(window.webpackJsonp=window.webpackJsonp||[]).push([[386],{718:function(e,t,a){"use strict";a.r(t);var n=a(4),r=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"twitter-java-style-guide"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#twitter-java-style-guide"}},[e._v("#")]),e._v(" Twitter Java Style Guide")]),e._v(" "),t("blockquote",[t("p",[e._v("本文是Twitter的Java代码规范。")])]),e._v(" "),t("p",[e._v("The intention of this guide is to provide a set of conventions that encourage\ngood code. It is the distillation of many combined man-years of software\nengineering and Java development experience. While some suggestions are more\nstrict than others, you should always practice good judgement.")]),e._v(" "),t("p",[e._v("If following the guide causes unnecessary hoop-jumping or otherwise less-\nreadable code, "),t("em",[e._v("readability trumps the guide")]),e._v(". However, if the more 'readable'\nvariant comes with perils or pitfalls, readability may be sacrificed.")]),e._v(" "),t("p",[e._v("In general, much of our style and conventions mirror the "),t("a",{attrs:{href:"http://www.oracle.com/technetwork/java/codeconvtoc-136057.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Code Conventions for\nthe Java Programming\nLanguage在新窗口打开"),t("OutboundLink")],1),e._v("\nand "),t("a",{attrs:{href:"https://google.github.io/styleguide/javaguide.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google's Java Style\nGuide在新窗口打开"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h1",{attrs:{id:"recommended-reading"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recommended-reading"}},[e._v("#")]),e._v(" Recommended reading")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683",target:"_blank",rel:"noopener noreferrer"}},[e._v("Effective Java在新窗口打开"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://jcip.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java Concurrency in Practice在新窗口打开"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://www.stevemcconnell.com/cc.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("Code Complete 2在新窗口打开"),t("OutboundLink")],1),t("br"),e._v("\nNot java-specific, but a good handbook for programming best-practices.")])])]),e._v(" "),t("h1",{attrs:{id:"coding-style"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#coding-style"}},[e._v("#")]),e._v(" Coding style")]),e._v(" "),t("h2",{attrs:{id:"formatting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#formatting"}},[e._v("#")]),e._v(" Formatting")]),e._v(" "),t("h3",{attrs:{id:"use-line-breaks-wisely"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-line-breaks-wisely"}},[e._v("#")]),e._v(" Use line breaks wisely")]),e._v(" "),t("p",[e._v("There are generally two reasons to insert a line break:")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Your statement exceeds the column limit.")])]),e._v(" "),t("li",[t("p",[e._v("You want to logically separate a thought."),t("br"),e._v("\nWriting code is like telling a story. Written language constructs like\nchapters, paragraphs, and punctuation (e.g. semicolons, commas, periods,\nhyphens) convey thought hierarchy and separation. We have similar constructs\nin programming languages; you should use them to your advantage to effectively\ntell the story to those reading the code.")])])]),e._v(" "),t("h3",{attrs:{id:"indent-style"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indent-style"}},[e._v("#")]),e._v(" Indent style")]),e._v(" "),t("p",[e._v('We use the "one true brace style"\n('),t("a",{attrs:{href:"http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS",target:"_blank",rel:"noopener noreferrer"}},[e._v("1TBS在新窗口打开"),t("OutboundLink")],1),e._v(").\nIndent size is 2 columns.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Like this.\nif (x < 0) {\n  negative(x);\n} else {\n  nonnegative(x);\n}\n\n// Not like this.\nif (x < 0)\n  negative(x);\n\n// Also not like this.\nif (x < 0) negative(x);\n")])])]),t("p",[e._v("Continuation indent is 4 columns. Nested continuations may add 4 columns or 2\nat each level.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// Bad.\n//   - Line breaks are arbitrary.\n//   - Scanning the code makes it difficult to piece the message together.\nthrow new IllegalStateException("Failed to process request" + request.getId()\n    + " for user " + user.getId() + " query: \'" + query.getText()\n    + "\'");\n\n// Good.\n//   - Each component of the message is separate and self-contained.\n//   - Adding or removing a component of the message requires minimal reformatting.\nthrow new IllegalStateException("Failed to process"\n    + " request " + request.getId()\n    + " for user " + user.getId()\n    + " query: \'" + query.getText() + "\'");\n')])])]),t("p",[e._v("Don't break up a statement unnecessarily.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\nfinal String value =\n    otherValue;\n\n// Good.\nfinal String value = otherValue;\n")])])]),t("p",[e._v("Method declaration continuations.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Sub-optimal since line breaks are arbitrary and only filling lines.\nString downloadAnInternet(Internet internet, Tubes tubes,\n    Blogosphere blogs, Amount<Long, Data> bandwidth) {\n  tubes.download(internet);\n  ...\n}\n\n// Acceptable.\nString downloadAnInternet(Internet internet, Tubes tubes, Blogosphere blogs,\n    Amount<Long, Data> bandwidth) {\n  tubes.download(internet);\n  ...\n}\n\n// Nicer, as the extra newline gives visual separation to the method body.\nString downloadAnInternet(Internet internet, Tubes tubes, Blogosphere blogs,\n    Amount<Long, Data> bandwidth) {\n\n  tubes.download(internet);\n  ...\n}\n\n// Also acceptable, but may be awkward depending on the column depth of the opening parenthesis.\npublic String downloadAnInternet(Internet internet,\n                                  Tubes tubes,\n                                  Blogosphere blogs,\n                                  Amount<Long, Data> bandwidth) {\n  tubes.download(internet);\n  ...\n}\n\n// Preferred for easy scanning and extra column space.\npublic String downloadAnInternet(\n    Internet internet,\n    Tubes tubes,\n    Blogosphere blogs,\n    Amount<Long, Data> bandwidth) {\n\n  tubes.download(internet);\n  ...\n}\n")])])]),t("h4",{attrs:{id:"chained-method-calls"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chained-method-calls"}},[e._v("#")]),e._v(" Chained method calls")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - Line breaks are based on line length, not logic.\nIterable<Module> modules = ImmutableList.<Module>builder().add(new LifecycleModule())\n    .add(new AppLauncherModule()).addAll(application.getModules()).build();\n\n// Better.\n//   - Calls are logically separated.\n//   - However, the trailing period logically splits a statement across two lines.\nIterable<Module> modules = ImmutableList.<Module>builder().\n    add(new LifecycleModule()).\n    add(new AppLauncherModule()).\n    addAll(application.getModules()).\n    build();\n\n// Good.\n//   - Method calls are isolated to a line.\n//   - The proper location for a new method call is unambiguous.\nIterable<Module> modules = ImmutableList.<Module>builder()\n    .add(new LifecycleModule())\n    .add(new AppLauncherModule())\n    .addAll(application.getModules())\n    .build();\n")])])]),t("h3",{attrs:{id:"no-tabs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#no-tabs"}},[e._v("#")]),e._v(" No tabs")]),e._v(" "),t("p",[e._v("An oldie, but goodie. We've found tab characters to cause more harm than good.")]),e._v(" "),t("h3",{attrs:{id:"_100-column-limit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_100-column-limit"}},[e._v("#")]),e._v(" 100 column limit")]),e._v(" "),t("p",[e._v("You should follow the convention set by the body of code you are working with.\nWe tend to use 100 columns for a balance between fewer continuation lines but\nstill easily fitting two editor tabs side-by-side on a reasonably-high\nresolution display.")]),e._v(" "),t("h3",{attrs:{id:"camelcase-for-types-camelcase-for-variables-upper-snake-for-constants"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#camelcase-for-types-camelcase-for-variables-upper-snake-for-constants"}},[e._v("#")]),e._v(" CamelCase for types, camelCase for variables, UPPER_SNAKE for constants")]),e._v(" "),t("h3",{attrs:{id:"no-trailing-whitespace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#no-trailing-whitespace"}},[e._v("#")]),e._v(" No trailing whitespace")]),e._v(" "),t("p",[e._v("Trailing whitespace characters, while logically benign, add nothing to the\nprogram. However, they do serve to frustrate developers when using keyboard\nshortcuts to navigate code.")]),e._v(" "),t("h2",{attrs:{id:"field-class-and-method-declarations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#field-class-and-method-declarations"}},[e._v("#")]),e._v(" Field, class, and method declarations")]),e._v(" "),t("h4",{attrs:{id:"modifier-order"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modifier-order"}},[e._v("#")]),e._v(" Modifier order")]),e._v(" "),t("p",[e._v("We follow the "),t("a",{attrs:{href:"http://docs.oracle.com/javase/specs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java Language\nSpecification在新窗口打开"),t("OutboundLink")],1),e._v(" for modifier\nordering (sections\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.1.1",target:"_blank",rel:"noopener noreferrer"}},[e._v("8.1.1在新窗口打开"),t("OutboundLink")],1),e._v(",\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1",target:"_blank",rel:"noopener noreferrer"}},[e._v("8.3.1在新窗口打开"),t("OutboundLink")],1),e._v("\nand\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.3",target:"_blank",rel:"noopener noreferrer"}},[e._v("8.4.3在新窗口打开"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\nfinal volatile private String value;\n\n// Good.\nprivate final volatile String value;\n")])])]),t("h2",{attrs:{id:"variable-naming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variable-naming"}},[e._v("#")]),e._v(" Variable naming")]),e._v(" "),t("h3",{attrs:{id:"extremely-short-variable-names-should-be-reserved-for-instances-like"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extremely-short-variable-names-should-be-reserved-for-instances-like"}},[e._v("#")]),e._v(" Extremely short variable names should be reserved for instances like")]),e._v(" "),t("p",[e._v("loop indices.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - Field names give little insight into what fields are used for.\nclass User {\n  private final int a;\n  private final String m;\n\n  ...\n}\n\n// Good.\nclass User {\n  private final int ageInYears;\n  private final String maidenName;\n\n  ...\n}\n")])])]),t("h3",{attrs:{id:"include-units-in-variable-names"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#include-units-in-variable-names"}},[e._v("#")]),e._v(" Include units in variable names")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\nlong pollInterval;\nint fileSize;\n\n// Good.\nlong pollIntervalMs;\nint fileSizeGb.\n\n// Better.\n//   - Unit is built in to the type.\n//   - The field is easily adaptable between units, readability is high.\nAmount<Long, Time> pollInterval;\nAmount<Integer, Data> fileSize;\n")])])]),t("h3",{attrs:{id:"don-t-embed-metadata-in-variable-names"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#don-t-embed-metadata-in-variable-names"}},[e._v("#")]),e._v(" Don't embed metadata in variable names")]),e._v(" "),t("p",[e._v("A variable name should describe the variable's purpose. Adding extra\ninformation like scope and type is generally a sign of a bad variable name.")]),e._v(" "),t("p",[e._v("Avoid embedding the field type in the field name.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\nMap<Integer, User> idToUserMap;\nString valueString;\n\n// Good.\nMap<Integer, User> usersById;\nString value;\n")])])]),t("p",[e._v("Also avoid embedding scope information in a variable. Hierarchy-based naming\nsuggests that a class is too complex and should be broken apart.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\nString _value;\nString mValue;\n\n// Good.\nString value;\n")])])]),t("h2",{attrs:{id:"space-pad-operators-and-equals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#space-pad-operators-and-equals"}},[e._v("#")]),e._v(" Space pad operators and equals.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - This offers poor visual separation of operations.\nint foo=a+b+1;\n\n// Good.\nint foo = a + b + 1;\n")])])]),t("h2",{attrs:{id:"be-explicit-about-operator-precedence"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#be-explicit-about-operator-precedence"}},[e._v("#")]),e._v(" Be explicit about operator precedence")]),e._v(" "),t("p",[e._v("Don't make your reader open the\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("spec在新窗口打开"),t("OutboundLink")],1),e._v("\nto confirm, if you expect a specific operation ordering, make it obvious with\nparenthesis.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\nreturn a << 8 * n + 1 | 0xFF;\n\n// Good.\nreturn (a << (8 * n) + 1) | 0xFF;\n")])])]),t("p",[e._v("It's even good to be "),t("em",[e._v("really")]),e._v(" obvious.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("if ((values != null) && (10 > values.size())) {\n  ...\n}\n")])])]),t("h2",{attrs:{id:"documentation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#documentation"}},[e._v("#")]),e._v(" Documentation")]),e._v(" "),t("p",[e._v("The more visible a piece of code is (and by extension - the farther away\nconsumers might be), the more documentation is needed.")]),e._v(" "),t("h3",{attrs:{id:"i-m-writing-a-report-about"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#i-m-writing-a-report-about"}},[e._v("#")]),e._v(' "I\'m writing a report about..."')]),e._v(" "),t("p",[e._v("Your elementary school teacher was right - you should never start a statement\nthis way. Likewise, you shouldn't write documentation this way.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n/**\n  * This is a class that implements a cache.  It does caching for you.\n  */\nclass Cache {\n  ...\n}\n\n// Good.\n/**\n  * A volatile storage for objects based on a key, which may be invalidated and discarded.\n  */\nclass Cache {\n  ...\n}\n")])])]),t("h3",{attrs:{id:"documenting-a-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#documenting-a-class"}},[e._v("#")]),e._v(" Documenting a class")]),e._v(" "),t("p",[e._v("Documentation for a class may range from a single sentence to paragraphs with\ncode examples. Documentation should serve to disambiguate any conceptual\nblanks in the API, and make it easier to quickly and "),t("em",[e._v("correctly")]),e._v(" use your API.\nA thorough class doc usually has a one sentence summary and, if necessary, a\nmore detailed explanation.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n  * An RPC equivalent of a unix pipe tee.  Any RPC sent to the tee input is guaranteed to have\n  * been sent to both tee outputs before the call returns.\n  *\n  * @param <T> The type of the tee'd service.\n  */\npublic class RpcTee<T> {\n  ...\n}\n")])])]),t("h3",{attrs:{id:"documenting-a-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#documenting-a-method"}},[e._v("#")]),e._v(" Documenting a method")]),e._v(" "),t("p",[e._v("A method doc should tell what the method "),t("em",[e._v("does")]),e._v(". Depending on the argument\ntypes, it may also be important to document input format.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - The doc tells nothing that the method declaration didn't.\n//   - This is the 'filler doc'.  It would pass style checks, but doesn't help anybody.\n/**\n  * Splits a string.\n  *\n  * @param s A string.\n  * @return A list of strings.\n  */\nList<String> split(String s);\n\n// Better.\n//   - We know what the method splits on.\n//   - Still some undefined behavior.\n/**\n  * Splits a string on whitespace.\n  *\n  * @param s The string to split.  An {@code null} string is treated as an empty string.\n  * @return A list of the whitespace-delimited parts of the input.\n  */\nList<String> split(String s);\n\n// Great.\n//   - Covers yet another edge case.\n/**\n  * Splits a string on whitespace.  Repeated whitespace characters are collapsed.\n  *\n  * @param s The string to split.  An {@code null} string is treated as an empty string.\n  * @return A list of the whitespace-delimited parts of the input.\n  */\nList<String> split(String s);\n")])])]),t("h3",{attrs:{id:"be-professional"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#be-professional"}},[e._v("#")]),e._v(" Be professional")]),e._v(" "),t("p",[e._v("We've all encountered frustration when dealing with other libraries, but\nranting about it doesn't do you any favors. Suppress the expletives and get to\nthe point.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// Bad.\n// I hate xml/soap so much, why can\'t it do this for me!?\ntry {\n  userId = Integer.parseInt(xml.getField("id"));\n} catch (NumberFormatException e) {\n  ...\n}\n\n// Good.\n// TODO(Jim): Tuck field validation away in a library.\ntry {\n  userId = Integer.parseInt(xml.getField("id"));\n} catch (NumberFormatException e) {\n  ...\n}\n')])])]),t("h3",{attrs:{id:"don-t-document-overriding-methods-usually"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#don-t-document-overriding-methods-usually"}},[e._v("#")]),e._v(" Don't document overriding methods (usually)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("interface Database {\n  /**\n    * Gets the installed version of the database.\n    *\n    * @return The database version identifier.\n    */\n  String getVersion();\n}\n\n// Bad.\n//   - Overriding method doc doesn't add anything.\nclass PostgresDatabase implements Database {\n  /**\n    * Gets the installed version of the database.\n    *\n    * @return The database version identifier.\n    */\n  @Override\n  public String getVersion() {\n    ...\n  }\n}\n\n// Good.\nclass PostgresDatabase implements Database {\n  @Override\n  public int getVersion();\n}\n\n// Great.\n//   - The doc explains how it differs from or adds to the interface doc.\nclass TwitterDatabase implements Database {\n  /**\n    * Semantic version number.\n    *\n    * @return The database version in semver format.\n    */\n  @Override\n  public String getVersion() {\n    ...\n  }\n}\n")])])]),t("h3",{attrs:{id:"use-javadoc-features"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-javadoc-features"}},[e._v("#")]),e._v(" Use javadoc features")]),e._v(" "),t("h4",{attrs:{id:"no-author-tags"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#no-author-tags"}},[e._v("#")]),e._v(" No author tags")]),e._v(" "),t("p",[e._v("Code can change hands numerous times in its lifetime, and quite often the\noriginal author of a source file is irrelevant after several iterations. We\nfind it's better to trust commit history and "),t("code",[e._v("OWNERS")]),e._v(" files to determine\nownership of a body of code.")]),e._v(" "),t("h2",{attrs:{id:"imports"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#imports"}},[e._v("#")]),e._v(" Imports")]),e._v(" "),t("h3",{attrs:{id:"import-ordering"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import-ordering"}},[e._v("#")]),e._v(" Import ordering")]),e._v(" "),t("p",[e._v("Imports are grouped by top-level package, with blank lines separating groups.\nStatic imports are grouped in the same way, in a section below traditional\nimports.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("import java.*\nimport javax.*\n\nimport scala.*\n\nimport com.*\n\nimport net.*\n\nimport org.*\n\nimport com.twitter.*\n\nimport static *\n")])])]),t("h3",{attrs:{id:"no-wildcard-imports"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#no-wildcard-imports"}},[e._v("#")]),e._v(" No wildcard imports")]),e._v(" "),t("p",[e._v("Wildcard imports make the source of an imported class less clear. They also\ntend to hide a high class "),t("a",{attrs:{href:"http://en.wikipedia.org/wiki/Coupling_(computer_programming)#Module_coupling",target:"_blank",rel:"noopener noreferrer"}},[e._v("fan-\nout在新窗口打开"),t("OutboundLink")],1),e._v("."),t("br"),e._v(" "),t("em",[e._v("See alsotexas imports")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - Where did Foo come from?\nimport com.twitter.baz.foo.*;\nimport com.twitter.*;\n\ninterface Bar extends Foo {\n  ...\n}\n\n// Good.\nimport com.twitter.baz.foo.BazFoo;\nimport com.twitter.Foo;\n\ninterface Bar extends Foo {\n  ...\n}\n")])])]),t("h2",{attrs:{id:"use-annotations-wisely"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-annotations-wisely"}},[e._v("#")]),e._v(" Use annotations wisely")]),e._v(" "),t("h3",{attrs:{id:"nullable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nullable"}},[e._v("#")]),e._v(" @Nullable")]),e._v(" "),t("p",[e._v("By default - disallow "),t("code",[e._v("null")]),e._v(". When a variable, parameter, or method return\nvalue may be "),t("code",[e._v("null")]),e._v(", be explicit about it by marking\n"),t("a",{attrs:{href:"http://code.google.com/p/jsr-305/source/browse/trunk/ri/src/main/java/javax/annotation/Nullable.java?r=24",target:"_blank",rel:"noopener noreferrer"}},[e._v("@Nullable在新窗口打开"),t("OutboundLink")],1),e._v(".\nThis is advisable even for fields/methods with private visibility.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("class Database {\n  @Nullable private Connection connection;\n\n  @Nullable\n  Connection getConnection() {\n    return connection;\n  }\n\n  void setConnection(@Nullable Connection connection) {\n    this.connection = connection;\n  }\n}\n")])])]),t("h3",{attrs:{id:"visiblefortesting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#visiblefortesting"}},[e._v("#")]),e._v(" @VisibleForTesting")]),e._v(" "),t("p",[e._v("Sometimes it makes sense to hide members and functions in general, but they\nmay still be required for good test coverage. It's usually preferred to make\nthese package-private and tag with\n[@VisibleForTesting在新窗口打开](http://docs.guava-libraries.googlecode.com/git-\nhistory/v11.0.2/javadoc/com/google/common/annotations/VisibleForTesting.html)\nto indicate the purpose for visibility.")]),e._v(" "),t("p",[e._v("Constants are a great example of things that are frequently exposed in this\nway.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// Bad.\n//   - Any adjustments to field names need to be duplicated in the test.\nclass ConfigReader {\n  private static final String USER_FIELD = "user";\n\n  Config parseConfig(String configData) {\n    ...\n  }\n}\npublic class ConfigReaderTest {\n  @Test\n  public void testParseConfig() {\n    ...\n    assertEquals(expectedConfig, reader.parseConfig("{user: bob}"));\n  }\n}\n\n// Good.\n//   - The test borrows directly from the same constant.\nclass ConfigReader {\n  @VisibleForTesting static final String USER_FIELD = "user";\n\n  Config parseConfig(String configData) {\n    ...\n  }\n}\npublic class ConfigReaderTest {\n  @Test\n  public void testParseConfig() {\n    ...\n    assertEquals(expectedConfig,\n        reader.parseConfig(String.format("{%s: bob}", ConfigReader.USER_FIELD)));\n  }\n}\n')])])]),t("h2",{attrs:{id:"use-interfaces"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-interfaces"}},[e._v("#")]),e._v(" Use interfaces")]),e._v(" "),t("p",[e._v("Interfaces decouple functionality from implementation, allowing you to use\nmultiple implementations without changing consumers. Interfaces are a great\nway to isolate packages - provide a set of interfaces, and keep your\nimplementations package private.")]),e._v(" "),t("p",[e._v("Many small interfaces can seem heavyweight, since you end up with a large\nnumber of source files. Consider the pattern below as an alternative.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("interface FileFetcher {\n  File getFile(String name);\n\n  // All the benefits of an interface, with little source management overhead.\n  // This is particularly useful when you only expect one implementation of an interface.\n  static class HdfsFileFetcher implements FileFetcher {\n    @Override File getFile(String name) {\n      ...\n    }\n  }\n}\n")])])]),t("h3",{attrs:{id:"leverage-or-extend-existing-interfaces"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#leverage-or-extend-existing-interfaces"}},[e._v("#")]),e._v(" Leverage or extend existing interfaces")]),e._v(" "),t("p",[e._v("Sometimes an existing interface allows your class to easily 'plug in' to other\nrelated classes. This leads to highly\n"),t("a",{attrs:{href:"http://en.wikipedia.org/wiki/Cohesion_(computer_science)",target:"_blank",rel:"noopener noreferrer"}},[e._v("cohesive在新窗口打开"),t("OutboundLink")],1),e._v("\ncode.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// An unfortunate lack of consideration.  Anyone who wants to interact with Blobs will need to\n// write specific glue code.\nclass Blobs {\n  byte[] nextBlob() {\n    ...\n  }\n}\n\n// Much better.  Now the caller can easily adapt this to standard collections, or do more\n// complex things like filtering.\nclass Blobs implements Iterable<byte[]> {\n  @Override\n  Iterator<byte[]> iterator() {\n    ...\n  }\n}\n")])])]),t("p",[e._v("Warning - don't bend the definition of an existing interface to make this\nwork. If the interface doesn't conceptually apply cleanly, it's best to avoid\nthis.")]),e._v(" "),t("h1",{attrs:{id:"writing-testable-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#writing-testable-code"}},[e._v("#")]),e._v(" Writing testable code")]),e._v(" "),t("p",[e._v("Writing unit tests doesn't have to be hard. You can make it easy for yourself\nif you keep testability in mind while designing your classes and interfaces.")]),e._v(" "),t("h2",{attrs:{id:"fakes-and-mocks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fakes-and-mocks"}},[e._v("#")]),e._v(" Fakes and mocks")]),e._v(" "),t("p",[e._v("When testing a class, you often need to provide some kind of canned\nfunctionality as a replacement for real-world behavior. For example, rather\nthan fetching a row from a real database, you have a test row that you want to\nreturn. This is most commonly performed with a fake object or a mock object.\nWhile the difference sounds subtle, mocks have major benefits over fakes.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("class RpcClient {\n  RpcClient(HttpTransport transport) {\n    ...\n  }\n}\n\n// Bad.\n//   - Our test has little control over method call order and frequency.\n//   - We need to be careful that changes to HttpTransport don't disable FakeHttpTransport.\n//   - May require a significant amount of code.\nclass FakeHttpTransport extends HttpTransport {\n  @Override\n  void writeBytes(byte[] bytes) {\n    ...\n  }\n\n  @Override\n  byte[] readBytes() {\n    ...\n  }\n}\n\npublic class RpcClientTest {\n  private RpcClient client;\n  private FakeHttpTransport transport;\n\n  @Before\n  public void setUp() {\n    transport = new FakeHttpTransport();\n    client = new RpcClient(transport);\n  }\n\n  ...\n}\n\ninterface Transport {\n  void writeBytes(byte[] bytes);\n  byte[] readBytes();\n}\n\nclass RpcClient {\n  RpcClient(Transport transport) {\n    ...\n  }\n}\n\n// Good.\n//   - We can mock the interface and have very fine control over how it is expected to be used.\npublic class RpcClientTest {\n  private RpcClient client;\n  private Transport transport;\n\n  @Before\n  public void setUp() {\n    transport = EasyMock.createMock(Transport.class);\n    client = new RpcClient(transport);\n  }\n\n  ...\n}\n")])])]),t("h2",{attrs:{id:"let-your-callers-construct-support-objects"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#let-your-callers-construct-support-objects"}},[e._v("#")]),e._v(" Let your callers construct support objects")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - A unit test needs to manage a temporary file on disk to test this class.\nclass ConfigReader {\n  private final InputStream configStream;\n  ConfigReader(String fileName) throws IOException {\n    this.configStream = new FileInputStream(fileName);\n  }\n}\n\n// Good.\n//   - Testing this class is as easy as using ByteArrayInputStream with a String.\nclass ConfigReader {\n  private final InputStream configStream;\n  ConfigReader(InputStream configStream){\n    this.configStream = checkNotNull(configStream);\n  }\n}\n")])])]),t("h2",{attrs:{id:"testing-multithreaded-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#testing-multithreaded-code"}},[e._v("#")]),e._v(" Testing multithreaded code")]),e._v(" "),t("p",[e._v("Testing code that uses multiple threads is notoriously hard. When approached\ncarefully, however, it can be accomplished without deadlocks or unnecessary\ntime-wait statements.")]),e._v(" "),t("p",[e._v("If you are testing code that needs to perform periodic background tasks (such\nas with a\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ScheduledExecutorService在新窗口打开"),t("OutboundLink")],1),e._v("),\nconsider mocking the service and/or manually triggering the tasks from your\ntests, and avoiding the actual scheduling. If you are testing code that\nsubmits tasks to an\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ExecutorService在新窗口打开"),t("OutboundLink")],1),e._v(",\nyou might consider allowing the executor to be injected, and supplying a\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newSingleThreadExecutor()",target:"_blank",rel:"noopener noreferrer"}},[e._v("single-thread\nexecutor在新窗口打开"),t("OutboundLink")],1),e._v("\nin tests.")]),e._v(" "),t("p",[e._v("In cases where multiple threads are inevitable,\n[java.util.concurrent在新窗口打开](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-\nsummary.html) provides some useful libraries to help manage lock-step\nexecution.")]),e._v(" "),t("p",[e._v("For example,\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingDeque.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("LinkedBlockingDeque在新窗口打开"),t("OutboundLink")],1),e._v("\ncan provide synchronization between producer and consumer when an asynchronous\noperation is performed.\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("CountDownLatch在新窗口打开"),t("OutboundLink")],1),e._v("\nis useful for state/operation synchronization when a queue does not apply.")]),e._v(" "),t("h2",{attrs:{id:"testing-antipatterns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#testing-antipatterns"}},[e._v("#")]),e._v(" Testing antipatterns")]),e._v(" "),t("h3",{attrs:{id:"time-dependence"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-dependence"}},[e._v("#")]),e._v(" Time-dependence")]),e._v(" "),t("p",[e._v("Code that captures real wall time can be difficult to test repeatably,\nespecially when time deltas are meaningful. Therefore, try to avoid "),t("code",[e._v("new Date()")]),e._v(", "),t("code",[e._v("System.currentTimeMillis()")]),e._v(", and "),t("code",[e._v("System.nanoTime()")]),e._v(". A suitable\nreplacement for these is\n"),t("a",{attrs:{href:"https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/util/Clock.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("Clock在新窗口打开"),t("OutboundLink")],1),e._v(";\nusing\n"),t("a",{attrs:{href:"https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/util/Clock.java#L32",target:"_blank",rel:"noopener noreferrer"}},[e._v("Clock.SYSTEM_CLOCK在新窗口打开"),t("OutboundLink")],1),e._v("\nwhen running normally, and\n"),t("a",{attrs:{href:"https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/util/testing/FakeClock.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("FakeClock在新窗口打开"),t("OutboundLink")],1),e._v("\nin tests.")]),e._v(" "),t("h3",{attrs:{id:"the-hidden-stress-test"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-hidden-stress-test"}},[e._v("#")]),e._v(" The hidden stress test")]),e._v(" "),t("p",[e._v("Avoid writing unit tests that attempt to verify a certain amount of\nperformance. This type of testing should be handled separately, and run in a\nmore controlled environment than unit tests typically are.")]),e._v(" "),t("h3",{attrs:{id:"thread-sleep"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#thread-sleep"}},[e._v("#")]),e._v(" Thread.sleep()")]),e._v(" "),t("p",[e._v("Sleeping is rarely warranted, especially in test code. Sleeping is expressing\nan expectation that something else is happening while the executing thread is\nsuspended. This quickly leads to brittleness; for example if the background\nthread was not scheduled while you were sleeping.")]),e._v(" "),t("p",[e._v("Sleeping in tests is also bad because it sets a firm lower bound on how fast\ntests can execute. No matter how fast the machine is, a test that sleeps for\none second can never execute in less than one second. Over time, this leads to\nvery long test execution cycles.")]),e._v(" "),t("h2",{attrs:{id:"avoid-randomness-in-tests"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avoid-randomness-in-tests"}},[e._v("#")]),e._v(" Avoid randomness in tests")]),e._v(" "),t("p",[e._v("Using random values may seem like a good idea in a test, as it allows you to\ncover more test cases with less code. The problem is that you lose control\nover which test cases you're covering. When you do encounter a test failure,\nit may be difficult to reproduce. Pseudorandom input with a fixed seed is\nslightly better, but in practice rarely improves test coverage. In general\nit's better to use fixed input data that exercises known edge cases.")]),e._v(" "),t("h1",{attrs:{id:"best-practices"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#best-practices"}},[e._v("#")]),e._v(" Best practices")]),e._v(" "),t("h2",{attrs:{id:"defensive-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#defensive-programming"}},[e._v("#")]),e._v(" Defensive programming")]),e._v(" "),t("h3",{attrs:{id:"avoid-assert"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avoid-assert"}},[e._v("#")]),e._v(" Avoid assert")]),e._v(" "),t("p",[e._v("We avoid the assert statement since it can be\n[disabled在新窗口打开](http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html#enable-\ndisable) at execution time, and prefer to enforce these types of invariants at\nall times.")]),e._v(" "),t("p",[t("em",[e._v("See alsopreconditions")])]),e._v(" "),t("h3",{attrs:{id:"preconditions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#preconditions"}},[e._v("#")]),e._v(" Preconditions")]),e._v(" "),t("p",[e._v("Preconditions checks are a good practice, since they serve as a well-defined\nbarrier against bad input from callers. As a convention, object parameters to\npublic constructors and methods should always be checked against null, unless\nnull is explicitly allowed.")]),e._v(" "),t("p",[t("em",[e._v("See alsobe wary of null, @Nullable")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// Bad.\n//   - If the file or callback are null, the problem isn\'t noticed until much later.\nclass AsyncFileReader {\n  void readLater(File file, Closure<String> callback) {\n    scheduledExecutor.schedule(new Runnable() {\n      @Override public void run() {\n        callback.execute(readSync(file));\n      }\n    }, 1L, TimeUnit.HOURS);\n  }\n}\n\n// Good.\nclass AsyncFileReader {\n  void readLater(File file, Closure<String> callback) {\n    checkNotNull(file);\n    checkArgument(file.exists() && file.canRead(), "File must exist and be readable.");\n    checkNotNull(callback);\n\n    scheduledExecutor.schedule(new Runnable() {\n      @Override public void run() {\n        callback.execute(readSync(file));\n      }\n    }, 1L, TimeUnit.HOURS);\n  }\n}\n')])])]),t("h3",{attrs:{id:"minimize-visibility"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minimize-visibility"}},[e._v("#")]),e._v(" Minimize visibility")]),e._v(" "),t("p",[e._v("In a class API, you should support access to any methods and fields that you\nmake accessible. Therefore, only expose what you intend the caller to use.\nThis can be imperative when writing thread-safe code.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public class Parser {\n  // Bad.\n  //   - Callers can directly access and mutate, possibly breaking internal assumptions.\n  public Map<String, String> rawFields;\n\n  // Bad.\n  //   - This is probably intended to be an internal utility function.\n  public String readConfigLine() {\n    ..\n  }\n}\n\n// Good.\n//   - rawFields and the utility function are hidden\n//   - The class is package-private, indicating that it should only be accessed indirectly.\nclass Parser {\n  private final Map<String, String> rawFields;\n\n  private String readConfigLine() {\n    ..\n  }\n}\n")])])]),t("h3",{attrs:{id:"favor-immutability"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#favor-immutability"}},[e._v("#")]),e._v(" Favor immutability")]),e._v(" "),t("p",[e._v("Mutable objects carry a burden - you need to make sure that those who are\n"),t("em",[e._v("able")]),e._v(" to mutate it are not violating expectations of other users of the\nobject, and that it's even safe for them to modify.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - Anyone with a reference to User can modify the user's birthday.\n//   - Calling getAttributes() gives mutable access to the underlying map.\npublic class User {\n  public Date birthday;\n  private final Map<String, String> attributes = Maps.newHashMap();\n\n  ...\n\n  public Map<String, String> getAttributes() {\n    return attributes;\n  }\n}\n\n// Good.\npublic class User {\n  private final Date birthday;\n  private final Map<String, String> attributes = Maps.newHashMap();\n\n  ...\n\n  public Map<String, String> getAttributes() {\n    return ImmutableMap.copyOf(attributes);\n  }\n\n  // If you realize the users don't need the full map, you can avoid the map copy\n  // by providing access to individual members.\n  @Nullable\n  public String getAttribute(String attributeName) {\n    return attributes.get(attributeName);\n  }\n}\n")])])]),t("h3",{attrs:{id:"be-wary-of-null"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#be-wary-of-null"}},[e._v("#")]),e._v(" Be wary of null")]),e._v(" "),t("p",[e._v("Use "),t("code",[e._v("@Nullable")]),e._v(" where prudent, but favor [Optional在新窗口打开](http://docs.guava-\nlibraries.googlecode.com/git-\nhistory/v11.0.2/javadoc/com/google/common/base/Optional.html) over\n"),t("code",[e._v("@Nullable")]),e._v(". "),t("code",[e._v("Optional")]),e._v(" provides better semantics around absence of a value.")]),e._v(" "),t("h3",{attrs:{id:"clean-up-with-finally"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clean-up-with-finally"}},[e._v("#")]),e._v(" Clean up with finally")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("FileInputStream in = null;\ntry {\n  ...\n} catch (IOException e) {\n  ...\n} finally {\n  Closeables.closeQuietly(in);\n}\n")])])]),t("p",[e._v("Even if there are no checked exceptions, there are still cases where you\nshould use try/finally to guarantee resource symmetry.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// Bad.\n//   - Mutex is never unlocked.\nmutex.lock();\nthrow new NullPointerException();\nmutex.unlock();\n\n// Good.\nmutex.lock();\ntry {\n  throw new NullPointerException();\n} finally {\n  mutex.unlock();\n}\n\n// Bad.\n//   - Connection is not closed if sendMessage throws.\nif (receivedBadMessage) {\n  conn.sendMessage("Bad request.");\n  conn.close();\n}\n\n// Good.\nif (receivedBadMessage) {\n  try {\n    conn.sendMessage("Bad request.");\n  } finally {\n    conn.close();\n  }\n}\n')])])]),t("h2",{attrs:{id:"clean-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clean-code"}},[e._v("#")]),e._v(" Clean code")]),e._v(" "),t("h3",{attrs:{id:"disambiguate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#disambiguate"}},[e._v("#")]),e._v(" Disambiguate")]),e._v(" "),t("p",[e._v("Favor readability - if there's an ambiguous and unambiguous route, always\nfavor unambiguous.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - Depending on the font, it may be difficult to discern 1001 from 100l.\nlong count = 100l + n;\n\n// Good.\nlong count = 100L + n;\n")])])]),t("h3",{attrs:{id:"remove-dead-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remove-dead-code"}},[e._v("#")]),e._v(" Remove dead code")]),e._v(" "),t("p",[e._v("Delete unused code (imports, fields, parameters, methods, classes). They will\nonly rot.")]),e._v(" "),t("h3",{attrs:{id:"use-general-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-general-types"}},[e._v("#")]),e._v(" Use general types")]),e._v(" "),t("p",[e._v("When declaring fields and methods, it's better to use general types whenever\npossible. This avoids implementation detail leak via your API, and allows you\nto change the types used internally without affecting users or peripheral\ncode.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - Implementations of Database must match the ArrayList return type.\n//   - Changing return type to Set<User> or List<User> could break implementations and users.\ninterface Database {\n  ArrayList<User> fetchUsers(String query);\n}\n\n// Good.\n//   - Iterable defines the minimal functionality required of the return.\ninterface Database {\n  Iterable<User> fetchUsers(String query);\n}\n")])])]),t("h3",{attrs:{id:"always-use-type-parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#always-use-type-parameters"}},[e._v("#")]),e._v(" Always use type parameters")]),e._v(" "),t("p",[e._v("Java 5 introduced support for\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/tutorial/java/generics/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("generics在新窗口打开"),t("OutboundLink")],1),e._v(".\nThis added type parameters to collection types, and allowed users to implement\ntheir own type-parameterized classes. Backwards compatibility and "),t("a",{attrs:{href:"http://docs.oracle.com/javase/tutorial/java/generics/erasure.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("type\nerasure在新窗口打开"),t("OutboundLink")],1),e._v("\nmean that type parameters are optional, however depending on usage they do\nresult in compiler warnings.")]),e._v(" "),t("p",[e._v("We conventionally include type parameters on every declaration where the type\nis parameterized. Even if the type is unknown, it's preferable to include a\nwildcard or wide type.")]),e._v(" "),t("h3",{attrs:{id:"stay-out-of-texas在新窗口打开"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stay-out-of-texas在新窗口打开"}},[e._v("#")]),e._v(" Stay out of "),t("a",{attrs:{href:"http://en.wikipedia.org/wiki/Texas-sized",target:"_blank",rel:"noopener noreferrer"}},[e._v("Texas在新窗口打开"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Try to keep your classes bite-sized and with clearly-defined responsibilities.\nThis can be "),t("em",[e._v("really")]),e._v(" hard as a program evolves.")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("texas imports")])]),e._v(" "),t("li",[t("p",[e._v("texas constructors: Can the class be cleanly broken apart?"),t("br"),e._v("\nIf not, consider builder pattern.")])]),e._v(" "),t("li",[t("p",[e._v("texas methods")])])]),e._v(" "),t("p",[e._v("We could do some science and come up with a statistics-driven threshold for\neach of these, but it probably wouldn't be very useful. This is usually just a\ngut instinct, and these are traits of classes that are too large or complex\nand should be broken up.")]),e._v(" "),t("h3",{attrs:{id:"avoid-typecasting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avoid-typecasting"}},[e._v("#")]),e._v(" Avoid typecasting")]),e._v(" "),t("p",[e._v("Typecasting is a sign of poor class design, and can often be avoided. An\nobvious exception here is overriding\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)",target:"_blank",rel:"noopener noreferrer"}},[e._v("equals在新窗口打开"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"use-final-fields"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-final-fields"}},[e._v("#")]),e._v(" Use final fields")]),e._v(" "),t("p",[t("em",[e._v("See alsofavor immutability")])]),e._v(" "),t("p",[e._v("Final fields are useful because they declare that a field may not be\nreassigned. When it comes to checking for thread-safety, a final field is one\nless thing that needs to be checked.")]),e._v(" "),t("h3",{attrs:{id:"avoid-mutable-static-state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avoid-mutable-static-state"}},[e._v("#")]),e._v(" Avoid mutable static state")]),e._v(" "),t("p",[e._v("Mutable static state is rarely necessary, and causes loads of problems when\npresent. A very simple case that mutable static state complicates is unit\ntesting. Since unit tests runs are typically in a single VM, static state will\npersist through all test cases. In general, mutable static state is a sign of\npoor class design.")]),e._v(" "),t("h3",{attrs:{id:"exceptions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exceptions"}},[e._v("#")]),e._v(" Exceptions")]),e._v(" "),t("h4",{attrs:{id:"catch-narrow-exceptions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#catch-narrow-exceptions"}},[e._v("#")]),e._v(" Catch narrow exceptions")]),e._v(" "),t("p",[e._v("Sometimes when using try/catch blocks, it may be tempting to just "),t("code",[e._v("catch Exception")]),e._v(", "),t("code",[e._v("Error")]),e._v(", or "),t("code",[e._v("Throwable")]),e._v(" so you don't have to worry about what type\nwas thrown. This is usually a bad idea, as you can end up catching more than\nyou really wanted to deal with. For example, "),t("code",[e._v("catch Exception")]),e._v(" would capture\n"),t("code",[e._v("NullPointerException")]),e._v(", and "),t("code",[e._v("catch Throwable")]),e._v(" would capture\n"),t("code",[e._v("OutOfMemoryError")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// Bad.\n//   - If a RuntimeException happens, the program continues rather than aborting.\ntry {\n  storage.insertUser(user);\n} catch (Exception e) {\n  LOG.error("Failed to insert user.");\n}\n\ntry {\n  storage.insertUser(user);\n} catch (StorageException e) {\n  LOG.error("Failed to insert user.");\n}\n')])])]),t("h4",{attrs:{id:"don-t-swallow-exceptions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#don-t-swallow-exceptions"}},[e._v("#")]),e._v(" Don't swallow exceptions")]),e._v(" "),t("p",[e._v("An empty "),t("code",[e._v("catch")]),e._v(" block is usually a bad idea, as you have no signal of a\nproblem. Coupled with narrow exception violations, it's a recipe for disaster.")]),e._v(" "),t("h4",{attrs:{id:"when-interrupted-reset-thread-interrupted-state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#when-interrupted-reset-thread-interrupted-state"}},[e._v("#")]),e._v(" When interrupted, reset thread interrupted state")]),e._v(" "),t("p",[e._v("Many blocking operations throw\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/lang/InterruptedException.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("InterruptedException在新窗口打开"),t("OutboundLink")],1),e._v("\nso that you may be awaken for events like a JVM shutdown. When catching\n"),t("code",[e._v("InterruptedException")]),e._v(", it is good practice to ensure that the thread\ninterrupted state is preserved.")]),e._v(" "),t("p",[e._v("IBM has a good\n"),t("a",{attrs:{href:"http://www.ibm.com/developerworks/java/library/j-jtp05236/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("article在新窗口打开"),t("OutboundLink")],1),e._v("\non this topic.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// Bad.\n//   - Surrounding code (or higher-level code) has no idea that the thread was interrupted.\ntry {\n  lock.tryLock(1L, TimeUnit.SECONDS)\n} catch (InterruptedException e) {\n  LOG.info("Interrupted while doing x");\n}\n\n// Good.\n//   - Interrupted state is preserved.\ntry {\n  lock.tryLock(1L, TimeUnit.SECONDS)\n} catch (InterruptedException e) {\n  LOG.info("Interrupted while doing x");\n  Thread.currentThread().interrupt();\n}\n')])])]),t("h4",{attrs:{id:"throw-appropriate-exception-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#throw-appropriate-exception-types"}},[e._v("#")]),e._v(" Throw appropriate exception types")]),e._v(" "),t("p",[e._v("Let your API users obey catch narrow exceptions, don't throw Exception. Even\nif you are calling another naughty API that throws Exception, at least hide\nthat so it doesn't bubble up even further. You should also make an effort to\nhide implementation details from your callers when it comes to exceptions.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - Caller is forced to catch Exception, trapping many unnecessary types of issues.\ninterface DataStore {\n  String fetchValue(String key) throws Exception;\n}\n\n// Better.\n//   - The interface leaks details about one specific implementation.\ninterface DataStore {\n  String fetchValue(String key) throws SQLException, UnknownHostException;\n}\n\n// Good.\n//   - A custom exception type insulates the user from the implementation.\n//   - Different implementations aren't forced to abuse irrelevant exception types.\ninterface DataStore {\n  String fetchValue(String key) throws StorageException;\n\n  static class StorageException extends Exception {\n    ...\n  }\n}\n")])])]),t("h2",{attrs:{id:"use-newer-better-libraries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-newer-better-libraries"}},[e._v("#")]),e._v(" Use newer/better libraries")]),e._v(" "),t("h3",{attrs:{id:"stringbuilder-over-stringbuffer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder-over-stringbuffer"}},[e._v("#")]),e._v(" StringBuilder over StringBuffer")]),e._v(" "),t("p",[t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("StringBuffer在新窗口打开"),t("OutboundLink")],1),e._v("\nis thread-safe, which is rarely needed.")]),e._v(" "),t("h3",{attrs:{id:"scheduledexecutorservice-over-timer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scheduledexecutorservice-over-timer"}},[e._v("#")]),e._v(" ScheduledExecutorService over Timer")]),e._v(" "),t("p",[e._v("Drawing from Java Concurrency in Practice (directly borrowed from a\nstackoverflow [question在新窗口打开](http://stackoverflow.com/questions/409932/java-\ntimer-vs-executorservice)).")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("Timer")]),e._v(" can be sensitive to changes in the system clock, "),t("code",[e._v("ScheduledThreadPoolExecutor")]),e._v(" is not")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("Timer")]),e._v(" has only one execution thread, so long-running task can delay other tasks.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("ScheduledThreadPoolExecutor")]),e._v(" can be configured with multiple threads and a "),t("code",[e._v("ThreadFactory")]),t("br"),e._v(" "),t("em",[e._v("Seemanage threads properly")])])]),e._v(" "),t("li",[t("p",[e._v("Exceptions thrown in "),t("code",[e._v("TimerTask")]),e._v(" kill the thread, rendering the "),t("code",[e._v("Timer")]),e._v(" ineffective.")])]),e._v(" "),t("li",[t("p",[e._v("ThreadPoolExecutor provides "),t("code",[e._v("afterExceute")]),e._v(" so you can explicitly handle execution results.")])])]),e._v(" "),t("h3",{attrs:{id:"list-over-vector"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-over-vector"}},[e._v("#")]),e._v(" List over Vector")]),e._v(" "),t("p",[t("code",[e._v("Vector")]),e._v(" is synchronized, which is often unneeded. When synchronization is\ndesirable, a "),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#synchronizedList(java.util.List)",target:"_blank",rel:"noopener noreferrer"}},[e._v("synchronized\nlist在新窗口打开"),t("OutboundLink")],1),e._v("\ncan usually serve as a drop-in replacement for "),t("code",[e._v("Vector")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"equals-and-hashcode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#equals-and-hashcode"}},[e._v("#")]),e._v(" equals() and hashCode()")]),e._v(" "),t("p",[e._v("If you override one, you must implement both. "),t("em",[e._v("See the\nequals/hashCode"),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()",target:"_blank",rel:"noopener noreferrer"}},[e._v("contract在新窗口打开"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("[Objects.equal()](http://docs.guava-libraries.googlecode.com/git-\nhistory/v11.0.2/javadoc/com/google/common/base/Objects.html#equal(java.lang.Object,\njava.lang.Object)) and [Objects.hashCode()在新窗口打开](http://docs.guava-\nlibraries.googlecode.com/git-\nhistory/v11.0.2/javadoc/com/google/common/base/Objects.html#hashCode(java.lang.Object...))\nmake it very easy to follow these contracts.")]),e._v(" "),t("h2",{attrs:{id:"premature-optimization-is-the-root-of-all-evil"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#premature-optimization-is-the-root-of-all-evil"}},[e._v("#")]),e._v(" Premature optimization is the root of all evil.")]),e._v(" "),t("p",[e._v("Donald Knuth is a smart guy, and he had a few things to\n"),t("a",{attrs:{href:"http://c2.com/cgi/wiki?PrematureOptimization",target:"_blank",rel:"noopener noreferrer"}},[e._v("say在新窗口打开"),t("OutboundLink")],1),e._v(" on the topic.")]),e._v(" "),t("p",[e._v("Unless you have strong evidence that an optimization is necessary, it's\nusually best to implement the un-optimized version first (possibly leaving\nnotes about where optimizations could be made).")]),e._v(" "),t("p",[e._v("So before you spend a week writing your memory-mapped compressed huffman-\nencoded hashmap, use the stock stuff first and "),t("em",[e._v("measure")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"todos"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#todos"}},[e._v("#")]),e._v(" TODOs")]),e._v(" "),t("h3",{attrs:{id:"leave-todos-early-and-often"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#leave-todos-early-and-often"}},[e._v("#")]),e._v(" Leave TODOs early and often")]),e._v(" "),t("p",[e._v("A TODO isn't a bad thing - it's signaling a future developer (possibly\nyourself) that a consideration was made, but omitted for various reasons. It\ncan also serve as a useful signal when debugging.")]),e._v(" "),t("h3",{attrs:{id:"leave-no-todo-unassigned"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#leave-no-todo-unassigned"}},[e._v("#")]),e._v(" Leave no TODO unassigned")]),e._v(" "),t("p",[e._v("TODOs should have owners, otherwise they are unlikely to ever be resolved.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - TODO is unassigned.\n// TODO: Implement request backoff.\n\n// Good.\n// TODO(George Washington): Implement request backoff.\n")])])]),t("h3",{attrs:{id:"adopt-todos"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#adopt-todos"}},[e._v("#")]),e._v(" Adopt TODOs")]),e._v(" "),t("p",[e._v("You should adopt an orphan if the owner has left the company/project, or if\nyou make modifications to the code directly related to the TODO topic.")]),e._v(" "),t("h2",{attrs:{id:"obey-the-law-of-demeter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#obey-the-law-of-demeter"}},[e._v("#")]),e._v(" Obey the Law of Demeter")]),e._v(" "),t("p",[e._v("("),t("a",{attrs:{href:"http://en.wikipedia.org/wiki/Law_of_Demeter",target:"_blank",rel:"noopener noreferrer"}},[e._v("LoD在新窗口打开"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("p",[e._v("The Law of Demeter is most obviously violated by breaking the [one dot\nrule在新窗口打开](http://en.wikipedia.org/wiki/Law_of_Demeter#In_object-\noriented_programming), but there are other code structures that lead to\nviolations of the spirit of the law.")]),e._v(" "),t("h3",{attrs:{id:"in-classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#in-classes"}},[e._v("#")]),e._v(" In classes")]),e._v(" "),t("p",[e._v("Take what you need, nothing more. This often relates to texas constructors but\nit can also hide in constructors or methods that take few parameters. The key\nidea is to defer assembly to the layers of the code that know enough to\nassemble and instead just take the minimal interface you need to get your work\ndone.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - Weigher uses hosts and port only to immediately construct another object.\nclass Weigher {\n  private final double defaultInitialRate;\n\n  Weigher(Iterable<String> hosts, int port, double defaultInitialRate) {\n    this.defaultInitialRate = validateRate(defaultInitialRate);\n    this.weightingService = createWeightingServiceClient(hosts, port);\n  }\n}\n\n// Good.\nclass Weigher {\n  private final double defaultInitialRate;\n\n  Weigher(WeightingService weightingService, double defaultInitialRate) {\n    this.defaultInitialRate = validateRate(defaultInitialRate);\n    this.weightingService = checkNotNull(weightingService);\n  }\n}\n")])])]),t("p",[e._v("If you want to provide a convenience constructor, a factory method or an\nexternal factory in the form of a builder you still can, but by making the\nfundamental constructor of a Weigher only take the things it actually uses it\nbecomes easier to unit-test and adapt as the system involves.")]),e._v(" "),t("h3",{attrs:{id:"in-methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#in-methods"}},[e._v("#")]),e._v(" In methods")]),e._v(" "),t("p",[e._v("If a method has multiple isolated blocks consider naming these blocks by\nextracting them to helper methods that do just one thing. Besides making the\ncalling sites read less like code and more like english, the extracted sites\nare often easier to flow-analyse for human eyes. The classic case is branched\nvariable assignment. In the extreme, never do this:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('void calculate(Subject subject) {\n  double weight;\n  if (useWeightingService(subject)) {\n    try {\n      weight = weightingService.weight(subject.id);\n    } catch (RemoteException e) {\n      throw new LayerSpecificException("Failed to look up weight for " + subject, e)\n    }\n  } else {\n    weight = defaultInitialRate * (1 + onlineLearnedBoost);\n  }\n\n  // Use weight here for further calculations\n}\n')])])]),t("p",[e._v("Instead do this:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('void calculate(Subject subject) {\n  double weight = calculateWeight(subject);\n\n  // Use weight here for further calculations\n}\n\nprivate double calculateWeight(Subject subject) throws LayerSpecificException {\n  if (useWeightingService(subject)) {\n    return fetchSubjectWeight(subject.id)\n  } else {\n    return currentDefaultRate();\n  }\n}\n\nprivate double fetchSubjectWeight(long subjectId) {\n  try {\n    return weightingService.weight(subjectId);\n  } catch (RemoteException e) {\n    throw new LayerSpecificException("Failed to look up weight for " + subject, e)\n  }\n}\n\nprivate double currentDefaultRate() {\n  defaultInitialRate * (1 + onlineLearnedBoost);\n}\n')])])]),t("p",[e._v("A code reader that generally trusts methods do what they say can scan\ncalculate quickly now and drill down only to those methods where I want to\nlearn more.")]),e._v(" "),t("h2",{attrs:{id:"don-t-repeat-yourself"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#don-t-repeat-yourself"}},[e._v("#")]),e._v(" Don't Repeat Yourself")]),e._v(" "),t("p",[e._v("("),t("a",{attrs:{href:"http://en.wikipedia.org/wiki/Don't_repeat_yourself",target:"_blank",rel:"noopener noreferrer"}},[e._v("DRY在新窗口打开"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("p",[e._v("For a more long-winded discussion on this topic, read\n"),t("a",{attrs:{href:"http://c2.com/cgi/wiki?DontRepeatYourself",target:"_blank",rel:"noopener noreferrer"}},[e._v("here在新窗口打开"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"extract-constants-whenever-it-makes-sense"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extract-constants-whenever-it-makes-sense"}},[e._v("#")]),e._v(" Extract constants whenever it makes sense")]),e._v(" "),t("h3",{attrs:{id:"centralize-duplicate-logic-in-utility-functions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#centralize-duplicate-logic-in-utility-functions"}},[e._v("#")]),e._v(" Centralize duplicate logic in utility functions")]),e._v(" "),t("h2",{attrs:{id:"manage-threads-properly"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manage-threads-properly"}},[e._v("#")]),e._v(" Manage threads properly")]),e._v(" "),t("p",[e._v("When spawning a thread, either directly or with a thread pool, you need to\ntake special care that you properly manage the lifecycle. Please familiarize\nyourself with the concept of daemon and non-daemon threads (and their effect\non the JVM lifecycle) by reading the documentation for\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Thread在新窗口打开"),t("OutboundLink")],1),e._v(".\nFailing to understand these concepts can cause your application to hang at\nshutdown.")]),e._v(" "),t("p",[e._v("Shutting down an\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ExecutorService在新窗口打开"),t("OutboundLink")],1),e._v("\nproperly is a slightly tricky process (see javadoc). If your code manages an\nexecutor service with non-daemon threads, you need to follow this procedure.\n"),t("a",{attrs:{href:"%5BExecutorService%5D(http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html)"}},[e._v("ExecutorServiceShutdown")]),e._v("\nvery nicely contains this behavior for you.")]),e._v(" "),t("p",[e._v("If you want to automatically perform cleanup like this when the VM is shutting\ndown, consider registering with\n"),t("a",{attrs:{href:"https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/application/ShutdownRegistry.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("ShutdownRegistry在新窗口打开"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"avoid-unnecessary-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avoid-unnecessary-code"}},[e._v("#")]),e._v(" Avoid unnecessary code")]),e._v(" "),t("h3",{attrs:{id:"superfluous-temporary-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#superfluous-temporary-variables"}},[e._v("#")]),e._v(" Superfluous temporary variables.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// Bad.\n//   - The variable is immediately returned, and just serves to clutter the code.\nList<String> strings = fetchStrings();\nreturn strings;\n\n// Good.\nreturn fetchStrings();\n")])])]),t("h3",{attrs:{id:"unneeded-assignment"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unneeded-assignment"}},[e._v("#")]),e._v(" Unneeded assignment.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// Bad.\n//   - The null value is never realized.\nString value = null;\ntry {\n  value = "The value is " + parse(foo);\n} catch (BadException e) {\n  throw new IllegalStateException(e);\n}\n\n// Good\nString value;\ntry {\n  value = "The value is " + parse(foo);\n} catch (BadException e) {\n  throw new IllegalStateException(e);\n}\n')])])]),t("h2",{attrs:{id:"the-fast-implementation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-fast-implementation"}},[e._v("#")]),e._v(" The 'fast' implementation")]),e._v(" "),t("p",[e._v("Don't bewilder your API users with a 'fast' or 'optimized' implementation of a\nmethod.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("int fastAdd(Iterable<Integer> ints);\n\n// Why would the caller ever use this when there's a 'fast' add?\nint add(Iterable<Integer> ints);\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);