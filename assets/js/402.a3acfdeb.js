(window.webpackJsonp=window.webpackJsonp||[]).push([[402],{734:function(t,r,a){"use strict";a.r(r);var c=a(4),n=Object(c.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"创建型-抽象工厂-abstract-factory"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型-抽象工厂-abstract-factory"}},[t._v("#")]),t._v(" 创建型 - 抽象工厂(Abstract Factory)")]),t._v(" "),r("blockquote",[r("p",[t._v("本文主要分析设计模式 - 抽象工厂(Abstract\nFactory)，抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂方法模式只是用于创建一个对象，这和抽象工厂模式有很大不同。")])]),t._v(" "),r("h2",{attrs:{id:"意图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[t._v("#")]),t._v(" 意图")]),t._v(" "),r("p",[t._v("提供一个接口，用于创建 "),r("strong",[t._v("相关的对象家族")]),t._v(" 。")]),t._v(" "),r("h2",{attrs:{id:"类图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[t._v("#")]),t._v(" 类图")]),t._v(" "),r("p",[t._v("抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂方法模式只是用于创建一个对象，这和抽象工厂模式有很大不同。")]),t._v(" "),r("p",[t._v("抽象工厂模式用到了工厂方法模式来创建单一对象，AbstractFactory 中的 createProductA() 和 createProductB()\n方法都是让子类来实现，这两个方法单独来看就是在创建一个对象，这符合工厂方法模式的定义。")]),t._v(" "),r("p",[t._v("至于创建对象的家族这一概念是在 Client 体现，Client 要通过 AbstractFactory\n同时调用两个方法来创建出两个对象，在这里这两个对象就有很大的相关性，Client 需要同时创建出这两个对象。")]),t._v(" "),r("p",[t._v("从高层次来看，抽象工厂使用了组合，即 Cilent 组合了 AbstractFactory，而工厂方法模式使用了继承。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/8668a3e1-c9c7-4fcb-98b2-a96a5d841579.png",alt:"img"}})]),t._v(" "),r("h2",{attrs:{id:"代码实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("public class AbstractProductA {\n}\n\n\n\npublic class AbstractProductB {\n}\n\n\n\npublic class ProductA1 extends AbstractProductA {\n}\n\n\n\npublic class ProductA2 extends AbstractProductA {\n}\n\n\n\npublic class ProductB1 extends AbstractProductB {\n}\n\n\n\npublic class ProductB2 extends AbstractProductB {\n}\n\n\n\npublic abstract class AbstractFactory {\n    abstract AbstractProductA createProductA();\n    abstract AbstractProductB createProductB();\n}\n\n\n\npublic class ConcreteFactory1 extends AbstractFactory {\n    AbstractProductA createProductA() {\n        return new ProductA1();\n    }\n\n    AbstractProductB createProductB() {\n        return new ProductB1();\n    }\n}\n\n\n\npublic class ConcreteFactory2 extends AbstractFactory {\n    AbstractProductA createProductA() {\n        return new ProductA2();\n    }\n\n    AbstractProductB createProductB() {\n        return new ProductB2();\n    }\n}\n\n\n\npublic class Client {\n    public static void main(String[] args) {\n        AbstractFactory abstractFactory = new ConcreteFactory1();\n        AbstractProductA productA = abstractFactory.createProductA();\n        AbstractProductB productB = abstractFactory.createProductB();\n        // do something with productA and productB\n    }\n}\n")])])]),r("h2",{attrs:{id:"jdk"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[t._v("#")]),t._v(" JDK")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("javax.xml.parsers.DocumentBuilderFactory在新窗口打开"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--",target:"_blank",rel:"noopener noreferrer"}},[t._v("javax.xml.transform.TransformerFactory在新窗口打开"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--",target:"_blank",rel:"noopener noreferrer"}},[t._v("javax.xml.xpath.XPathFactory在新窗口打开"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),r("ul",[r("li",[t._v("抽象工厂(Abstract Factory) https://www.jianshu.com/p/e873855e88a0")]),t._v(" "),r("li",[t._v("抽象工厂(Abstract Factory)- 最易懂的设计模式解析 https://www.jianshu.com/p/7deb64f902db")])]),t._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("blockquote",[r("p",[t._v("知识点的东西在上面参考文章中写的非常详细，读完之后问自己下面几个问题，直到可以流利的回答。")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("使用的场景?")])]),t._v(" "),r("li",[r("p",[t._v("本质是什么?")])]),t._v(" "),r("li",[r("p",[t._v("它解决了什么问题?")])]),t._v(" "),r("li",[r("p",[t._v("它体现了设计模式中什么原则?")])]),t._v(" "),r("li",[r("p",[t._v("存在的缺陷?")])]),t._v(" "),r("li",[r("p",[t._v("你认为与它相关的设计模式有哪些? 它们之间的区别有哪些?")])]),t._v(" "),r("li",[r("p",[t._v("*开源架构中哪些使用了这一模式?")])])])])}),[],!1,null,null,null);r.default=n.exports}}]);