(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{597:function(t,r,a){"use strict";a.r(r);var v=a(4),e=Object(v.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"mongo进阶-db核心-复制集"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mongo进阶-db核心-复制集"}},[t._v("#")]),t._v(" Mongo进阶 - DB核心：复制集")]),t._v(" "),r("blockquote",[r("p",[t._v("在实际的生产环境中，我们需要考虑"),r("strong",[t._v("数据冗余和高可靠性")]),t._v("\n，即通过在不同的机器上保存副本来保证数据的不会因为单点损坏而丢失；能够随时应对数据丢失、机器损坏带来的风险。MongoDB的复制集就是用来解决这个问题的，一组复制集就是一组mongod实例掌管同一个数据集，实例可以在不同的机器上面。实例中包含一个主导，接受客户端所有的写入操作，其他都是副本实例，从主服务器上获得数据并保持同步。")])]),t._v(" "),r("h2",{attrs:{id:"为什么要引入复制集"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么要引入复制集"}},[t._v("#")]),t._v(" 为什么要引入复制集？")]),t._v(" "),r("blockquote",[r("p",[t._v("保证数据在生产部署时的"),r("strong",[t._v("冗余和可靠性")]),t._v("\n，通过在不同的机器上保存副本来保证数据的不会因为单点损坏而丢失。能够随时应对数据丢失、机器损坏带来的风险。换一句话来说，还能提高读取能力，用户的读取服务器和写入服务器在不同的地方，而且，由不同的服务器为不同的用户提供服务，提高整个系统的负载。")])]),t._v(" "),r("p",[t._v("在"),r("strong",[t._v("MongoDB中就是复制集（replica set)")]),t._v(" ：\n一组复制集就是一组mongod实例掌管同一个数据集，实例可以在不同的机器上面。实例中包含一个主导，接受客户端所有的写入操作，其他都是副本实例，从主服务器上获得数据并保持同步。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-1.png",alt:"img"}})]),t._v(" "),r("h2",{attrs:{id:"复制集有哪些成员"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复制集有哪些成员"}},[t._v("#")]),t._v(" 复制集有哪些成员？")]),t._v(" "),r("blockquote",[r("p",[t._v("在上图中，我们了解了复制集中的主节点（Primary）和从节点（Secondary),\n进一步的我们需要了解更多复制集中的成员，以便深入部署架构和相关配置。")])]),t._v(" "),r("h3",{attrs:{id:"基本成员"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本成员"}},[t._v("#")]),t._v(" 基本成员")]),t._v(" "),r("p",[t._v("让我们看下基本的成员：")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("主节点（Primary）")])])]),t._v(" "),r("p",[t._v("包含了所有的写操作的日志。但是副本服务器集群包含有所有的主服务器数据，因此当主服务器挂掉了，就会在副本服务器上重新选取一个成为主服务器。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("从节点（Seconary）")])])]),t._v(" "),r("p",[t._v("正常情况下，复制集的Seconary会参与Primary选举（自身也可能会被选为Primary），并从Primary同步最新写入的数据，以保证与Primary存储相同的数据。")]),t._v(" "),r("p",[t._v("Secondary可以提供读服务，增加Secondary节点可以提供复制集的读服务能力，同时提升复制集的可用性。另外，Mongodb支持对复制集的Secondary节点进行灵活的配置，以适应多种场景的需求。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("仲裁节点（Arbiter）")])])]),t._v(" "),r("p",[t._v("Arbiter节点只参与投票，不能被选为Primary，并且不从Primary同步数据。")]),t._v(" "),r("p",[t._v("比如你部署了一个2个节点的复制集，1个Primary，1个Secondary，任意节点宕机，复制集将不能提供服务了（无法选出Primary），这时可以给复制集添加一个Arbiter节点，即使有节点宕机，仍能选出Primary。")]),t._v(" "),r("p",[t._v("Arbiter本身不存储数据，是非常轻量级的服务，当复制集成员为偶数时，最好加入一个Arbiter节点，以提升复制集可用性。")]),t._v(" "),r("h3",{attrs:{id:"主节点-primary-的细化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#主节点-primary-的细化"}},[t._v("#")]),t._v(" 主节点（Primary）的细化")]),t._v(" "),r("blockquote",[r("p",[t._v("依据具体功能实现的需要，MongoDB还细化将主节点（Primary）进行了细化：")])]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Priority0")])])]),t._v(" "),r("p",[t._v("作为一个辅助可以作为一个备用。在一些复制集中，可能无法在合理的时间内添加新成员的时候。备用成员保持数据的当前最新数据能够替换不可用的成员。")]),t._v(" "),r("p",[t._v("Priority0节点的选举优先级为0，不会被选举为Primary")]),t._v(" "),r("p",[t._v("比如你跨机房A、B部署了一个复制集，并且想指定Primary必须在A机房，这时可以将B机房的复制集成员Priority设置为0，这样Primary就一定会是A机房的成员。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-2.png",alt:"img"}})]),t._v(" "),r("p",[t._v("（注意：如果这样部署，最好将『大多数』节点部署在A机房，否则网络分区时可能无法选出Primary）")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Hidden")])])]),t._v(" "),r("p",[t._v("客户端将不会把读请求分发到隐藏节点上，即使我们设定了 复制集读选项 。")]),t._v(" "),r("p",[t._v("这些隐藏节点将不会收到来自应用程序的请求。我们可以将隐藏节点专用于报表节点或是备份节点。 延时节点也应该是一个隐藏节点。")]),t._v(" "),r("p",[t._v("Hidden节点不能被选为主（Priority为0），并且对Driver不可见。因"),r("strong",[t._v("Hidden节点不会接受Driver的请求，可使用Hidden节点做一些数据备份、离线计算的任务，不会影响复制集的服务")]),t._v("\n。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-3.png",alt:"img"}})]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Delayed")])])]),t._v(" "),r("p",[t._v("延时节点的数据集是延时的，因此它可以帮助我们在人为误操作或是其他意外情况下恢复数据。")]),t._v(" "),r("p",[t._v("举个例子，当应用升级失败，或是误操作删除了表和数据库时，我们可以通过延时节点进行数据恢复。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-4.png",alt:"img"}})]),t._v(" "),r("p",[t._v("Delayed节点必须是Hidden节点，并且其数据落后与Primary一段时间（可配置，比如1个小时）。")]),t._v(" "),r("p",[t._v("因Delayed节点的数据比Primary落后一段时间，当错误或者无效的数据写入Primary时，可通过Delayed节点的数据来恢复到之前的时间点。")]),t._v(" "),r("h2",{attrs:{id:"复制集常见部署架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复制集常见部署架构"}},[t._v("#")]),t._v(" 复制集常见部署架构？")]),t._v(" "),r("blockquote",[r("p",[t._v("我们将从基础三个节点和跨数据中心两个角度看常见复制集的部署架构：")])]),t._v(" "),r("h3",{attrs:{id:"基础三节点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础三节点"}},[t._v("#")]),t._v(" 基础三节点")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("一主两从方式")]),t._v(" "),r("ul",[r("li",[t._v("一个主节点；")]),t._v(" "),r("li",[t._v("两个从节点组成，主节点宕机时，这两个从节点都可以被选为主节点。")])])])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-5.png",alt:"img"}})]),t._v(" "),r("p",[t._v("当主节点宕机后,两个从节点都会进行竞选，其中一个变为主节点，当原主节点恢复后，作为从节点加入当前的复制集群即可。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-6.png",alt:"img"}})]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("一主一从一仲裁方式")]),t._v(" "),r("ul",[r("li",[t._v("一个主节点")]),t._v(" "),r("li",[t._v("一个从节点，可以在选举中成为主节点")]),t._v(" "),r("li",[t._v("一个仲裁节点，在选举中，只进行投票，不能成为主节点")])])])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-7.png",alt:"img"}})]),t._v(" "),r("p",[t._v("当主节点宕机时，将会选择从节点成为主，主节点修复后，将其加入到现有的复制集群中即可。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-8.png",alt:"img"}})]),t._v(" "),r("h3",{attrs:{id:"跨数据中心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨数据中心"}},[t._v("#")]),t._v(" 跨数据中心")]),t._v(" "),r("blockquote",[r("p",[t._v("单个数据中心中的复制集易受数据中心故障的影响，比如断电，洪水，断网等；所以多个数据中心便是这么引入的。")])]),t._v(" "),r("p",[t._v("为了在数据中心发生故障时保护您的数据，请在"),r("strong",[t._v("备用数据中心中至少保留一个成员")]),t._v(" 。如果可能，"),r("strong",[t._v("请使用奇数个数据中心")]),t._v("\n，并选择成员分布，以最大程度地保证即使丢失数据中心，其余复制集成员也可以构成大多数或最小数量的副本，以提供数据副本。")]),t._v(" "),r("h4",{attrs:{id:"三个节点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三个节点"}},[t._v("#")]),t._v(" 三个节点")]),t._v(" "),r("p",[t._v("对于三成员复制集，成员的一些可能的分布包括：")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("两个数据中心")]),t._v(" ：两个是数据中心1的成员，一个是数据中心2的成员。如果复制集的成员之一是仲裁者，则将仲裁者与一个承载数据的成员一起分发到数据中心1。\n"),r("ul",[r("li",[t._v("如果数据中心1发生故障，则复制集将变为只读。")]),t._v(" "),r("li",[t._v("如果数据中心2发生故障，则复制集将保持可写状态，因为数据中心1中的成员可以举行选举。")])])]),t._v(" "),r("li",[r("strong",[t._v("三个数据中心")]),t._v(" ：一个成员是数据中心1，一个成员是数据中心2，一个成员是数据中心3。\n"),r("ul",[r("li",[t._v("如果任何数据中心发生故障，复制集将保持可写状态，因为其余成员可以举行选举。")])])])]),t._v(" "),r("p",[r("strong",[t._v("注意")])]),t._v(" "),r("p",[t._v("在两个数据中心之间分布复制集成员可提供优于单个数据中心的好处。在两个数据中心分布中，")]),t._v(" "),r("ul",[r("li",[t._v("如果其中一个数据中心发生故障，则与单个数据中心分发不同，该数据仍然可供读取。")]),t._v(" "),r("li",[t._v("如果具有少数成员的数据中心发生故障，则复制集仍然可以同时执行写操作和读操作。")]),t._v(" "),r("li",[t._v("但是，如果具有大多数成员的数据中心发生故障，则复制集将变为只读。")])]),t._v(" "),r("p",[r("strong",[t._v("如果可能，请在至少三个数据中心中分配成员")]),t._v("\n。对于配置服务器复制集（CSRS），最佳做法是在三个（或更多，取决于成员的数量）中心之间分布。如果第三个数据中心的成本高得令人望而却步，则一种分配可能性是，在公司政策允许的情况下，在两个数据中心之间平均分配数据承载成员，并将其余成员存储在云中。")]),t._v(" "),r("h4",{attrs:{id:"五个节点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五个节点"}},[t._v("#")]),t._v(" 五个节点")]),t._v(" "),r("p",[t._v("对于具有5个成员的复制集，成员的一些可能的分布包括（相关注意事项和三个节点一致，这里仅展示分布方案）：")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("两个数据中心")]),t._v(" ：数据中心1的三个成员和数据中心2的两个成员。\n"),r("ul",[r("li",[t._v("如果数据中心1发生故障，则复制集将变为只读。")]),t._v(" "),r("li",[t._v("如果数据中心2发生故障，则复制集将保持可写状态，因为数据中心1中的成员可以创建多数。")])])]),t._v(" "),r("li",[r("strong",[t._v("三个数据中心")]),t._v(" ：两个成员是数据中心1，两个成员是数据中心2，一个成员是站点数据中心3。\n"),r("ul",[r("li",[t._v("如果任何数据中心发生故障，复制集将保持可写状态，因为其余成员可以举行选举。")])])])]),t._v(" "),r("p",[t._v("例如，以下5个成员复制集将其成员分布在三个数据中心中。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-9.png",alt:"img"}})]),t._v(" "),r("h4",{attrs:{id:"数据转移的优先级"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据转移的优先级"}},[t._v("#")]),t._v(" 数据转移的优先级")]),t._v(" "),r("p",[t._v("复制集的某些成员（例如，具有网络限制或资源有限的成员）不应成为故障转移中的主要成员。将不应成为主要成员的成员配置为具priority0。")]),t._v(" "),r("p",[t._v("在某些情况下，您可能希望将一个数据中心中的成员选为主要成员，然后再选择另一数据中心中的成员。您可以修改priority成员的，以使一个数据中心中priority的成员高于\n其他数据中心中的成员。")]),t._v(" "),r("p",[t._v("在以下示例中，数据中心1中的复制集成员具有比数据中心2和3中的成员更高的优先级；数据中心2中的成员比数据中心3中的成员具有更高的优先级：")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-10.png",alt:"img"}})]),t._v(" "),r("h2",{attrs:{id:"复制集是如何保证数据高可用的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复制集是如何保证数据高可用的"}},[t._v("#")]),t._v(" 复制集是如何保证数据高可用的？")]),t._v(" "),r("blockquote",[r("p",[t._v("那么复制集是如何保证数据的高可靠性的呢？或者说它包含有什么机制？这里我们通过两方面阐述：一个是选举机制，另一个是故障转移期间的回滚。")])]),t._v(" "),r("h3",{attrs:{id:"选举机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#选举机制"}},[t._v("#")]),t._v(" 选举机制")]),t._v(" "),r("blockquote",[r("p",[t._v("复制集通过选举机制来选择主节点。")])]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("如何选出Primary主节点的?")])])]),t._v(" "),r("p",[t._v("假设复制集内"),r("strong",[t._v("能够投票的成员")]),t._v(" 数量为N，则大多数为 N/2 +\n1，当复制集内存活成员数量不足大多数时，整个复制集将"),r("strong",[t._v("无法选举出Primary，复制集将无法提供写服务，处于只读状态")]),t._v(" 。")]),t._v(" "),r("p",[t._v("举例：3投票节点需要2个节点的赞成票，容忍选举失败次数为1；5投票节点需要3个节点的赞成票，容忍选举失败次数为2；通常投票节点为奇数，这样可以减少选举失败的概率。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("在什么情况下会触发选举机制？")])])]),t._v(" "),r("p",[t._v("在以下的情况将触发选举机制：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("往复制集中新加入节点")])]),t._v(" "),r("li",[r("p",[t._v("初始化复制集时")])]),t._v(" "),r("li",[r("p",[t._v("对复制集进行维护时，比如"),r("code",[t._v("rs.stepDown()")]),t._v("或者"),r("code",[t._v("rs.reconfig()")]),t._v("操作时")])]),t._v(" "),r("li",[r("p",[t._v("从节点失联时，比如超时（默认是10秒）")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("哪些成员具备选举权？哪些没有？")])])])]),t._v(" "),r("p",[t._v("首先不是所有的节点都会参与投票，一个复制集最高可以有50个节点，但是只有7个投票节点。一个非投票节点它的votes是0即vote0;\n它的priority是0即priority0。")]),t._v(" "),r("p",[t._v("比如：")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-rep-11.png",alt:"img"}})]),t._v(" "),r("p",[t._v("同时可投票的节点，必须属于如下状态之一：PRIMARY, SECONDARY, STARTUP2, RECOVERING, ARBITER,\nROLLBACK.")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("哪些因素可能会影响选举呢？")])])]),t._v(" "),r("p",[t._v("比如：")]),t._v(" "),r("ul",[r("li",[t._v("复制集的选举协议，例如在v4之前是pv0, v4开始为pv1;")]),t._v(" "),r("li",[t._v("心跳")]),t._v(" "),r("li",[t._v("成员权重")]),t._v(" "),r("li",[t._v("数据中心失联")]),t._v(" "),r("li",[t._v("网络分区")]),t._v(" "),r("li",[t._v("镜像读取（Mirrored Reads）注：MongoDBv4.4开始提供的功能，用来预热"),r("strong",[t._v("从节点")]),t._v(" 最近读取过的数据。")])]),t._v(" "),r("p",[t._v("如果你还期望对上述影响因素有更全面的认识，可以参考[官方文档 - Factors and Conditions that Affect\nElections在新窗口打开](https://docs.mongodb.com/manual/core/replica-set-\nelections/#factors-and-conditions-that-affect-elections)")]),t._v(" "),r("h3",{attrs:{id:"故障转移期间的回滚"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#故障转移期间的回滚"}},[t._v("#")]),t._v(" 故障转移期间的回滚")]),t._v(" "),r("blockquote",[r("p",[t._v("当成员在故障转移后重新加入其复制集时，回滚将还原以前的主在数据库上的写操作。 "),r("strong",[t._v("本质上就是保证数据的一致性")]),t._v(" 。")])]),t._v(" "),r("p",[t._v("仅当主服务器接受了在主服务器降级之前辅助服务器未成功复制的写操作时，才需要回滚。\n当主数据库作为辅助数据库重新加入集合时，它会还原或“回滚”其写入操作，以保持数据库与其他成员的一致性。")]),t._v(" "),r("p",[t._v("更多可以参考"),r("a",{attrs:{href:"https://docs.mongodb.com/manual/core/replica-set-rollbacks/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档 - Rollbacks During Replica Set\nFailover在新窗口打开"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"复制集中的optlog"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复制集中的optlog"}},[t._v("#")]),t._v(" 复制集中的OptLog")]),t._v(" "),r("blockquote",[r("p",[t._v("oplog(操作日志)是一个特殊的有上限的集合(老的日志会被overwrite)，它保存所有修改数据库中存储的数据的操作的滚动记录。")])]),t._v(" "),r("h3",{attrs:{id:"什么是optlog"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是optlog"}},[t._v("#")]),t._v(" 什么是OptLog")]),t._v(" "),r("p",[t._v("MongoDB在主节点上应用数据库操作，然后将这些操作记录到optlog中。然后从节点通过"),r("strong",[t._v("异步进程复制和应用")]),t._v("\n（数据同步）这些操作。在local.oplog.rs集合中，所有复制集成员都包含oplog的一个副本用来维护数据库的当前状态。")]),t._v(" "),r("p",[t._v("MongoDB 4.4支持以小时为单位指定最小操作日志保留期，其中MongoDB仅在以下情况下删除操作日志条目：")]),t._v(" "),r("ul",[r("li",[t._v("oplog已达到配置的最大大小")]),t._v(" "),r("li",[t._v("oplog条目早于配置的小时数")])]),t._v(" "),r("h3",{attrs:{id:"在设计optlog时要考虑什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在设计optlog时要考虑什么"}},[t._v("#")]),t._v(" 在设计OptLog时要考虑什么")]),t._v(" "),r("blockquote",[r("p",[t._v("看下MongoDB在设计OptLog时考虑了什么？这对我们在使用和配置optlog有很好的帮助。")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("查看操作日志的状态？")])]),t._v(" "),r("li",[r("p",[t._v("操作日志设置多大？默认设置是多大呢？")])]),t._v(" "),r("li",[r("p",[t._v("操作日志保存多久？")])]),t._v(" "),r("li",[r("p",[t._v("哪些情况需要设置更大的？")])]),t._v(" "),r("li",[r("p",[t._v("对操作慢的管理和设置？")])])]),t._v(" "),r("p",[t._v("更多可以参考"),r("a",{attrs:{href:"https://docs.mongodb.com/manual/core/replica-set-oplog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档 - Replica Set\nOplog在新窗口打开"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"复制集中的数据同步"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复制集中的数据同步"}},[t._v("#")]),t._v(" 复制集中的数据同步")]),t._v(" "),r("p",[t._v("复制集中的数据同步是为了维护共享数据集的最新副本，包括复制集的辅助成员同步或复制其他成员的数据。 MongoDB使用两种形式的数据同步：")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("初始同步(Initial Sync)")]),t._v(" 以使用完整的数据集填充新成员, 即"),r("strong",[t._v("全量同步")])]),t._v(" "),r("li",[r("strong",[t._v("复制(Replication)")]),t._v(" 以将正在进行的更改应用于整个数据集, 即"),r("strong",[t._v("增量同步")])])]),t._v(" "),r("h3",{attrs:{id:"初始同步-initial-sync"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#初始同步-initial-sync"}},[t._v("#")]),t._v(" 初始同步(Initial Sync)")]),t._v(" "),r("blockquote",[r("p",[t._v("从节点当出现如下状况时，需要先进行全量同步")])]),t._v(" "),r("ul",[r("li",[t._v("oplog为空")]),t._v(" "),r("li",[t._v("local.replset.minvalid集合里_initialSyncFlag字段设置为true")]),t._v(" "),r("li",[t._v("内存标记initialSyncRequested设置为true")])]),t._v(" "),r("p",[r("strong",[t._v("这3个场景分别对应")])]),t._v(" "),r("ul",[r("li",[t._v("新节点加入，无任何oplog，此时需先进性initial sync")]),t._v(" "),r("li",[t._v("initial sync开始时，会主动将_initialSyncFlag字段设置为true，正常结束后再设置为false；如果节点重启时，发现_initialSyncFlag为true，说明上次全量同步中途失败了，此时应该重新进行initial sync")]),t._v(" "),r("li",[t._v("当用户发送resync命令时，initialSyncRequested会设置为true，此时会重新开始一次initial sync")])]),t._v(" "),r("p",[r("strong",[t._v("intial sync流程")])]),t._v(" "),r("ul",[r("li",[t._v("全量同步开始，设置minvalid集合的_initialSyncFlag")]),t._v(" "),r("li",[t._v("获取同步源上最新oplog时间戳为t1")]),t._v(" "),r("li",[t._v("全量同步集合数据 （耗时）")]),t._v(" "),r("li",[t._v("获取同步源上最新oplog时间戳为t2")]),t._v(" "),r("li",[t._v("重放[t1, t2]范围内的所有oplog")]),t._v(" "),r("li",[t._v("获取同步源上最新oplog时间戳为t3")]),t._v(" "),r("li",[t._v("重放[t2, t3]范围内所有的oplog")]),t._v(" "),r("li",[t._v("建立集合所有索引 （耗时）")]),t._v(" "),r("li",[t._v("获取同步源上最新oplog时间戳为t4")]),t._v(" "),r("li",[t._v("重放[t3, t4]范围内所有的oplog")]),t._v(" "),r("li",[t._v("全量同步结束，清除minvalid集合的_initialSyncFlag")])]),t._v(" "),r("h3",{attrs:{id:"复制-replication"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复制-replication"}},[t._v("#")]),t._v(" 复制(Replication)")]),t._v(" "),r("blockquote",[r("p",[t._v("initial\nsync结束后，接下来Secondary就会『不断拉取主上新产生的optlog并重放』，这个过程在Secondary同步慢问题分析也介绍过，这里从另一个角度再分析下。")])]),t._v(" "),r("ul",[r("li",[t._v("producer thread，这个线程不断的从同步源上拉取oplog，并加入到一个BlockQueue的队列里保存着。")]),t._v(" "),r("li",[t._v("replBatcher thread，这个线程负责逐个从producer thread的队列里取出oplog，并放到自己维护的队列里。")]),t._v(" "),r("li",[t._v("sync线程将replBatcher thread的队列分发到默认16个replWriter线程，由replWriter thread来最终重放每条oplog。")])]),t._v(" "),r("p",[t._v("问题来了，为什么一个简单的『拉取oplog并重放』的动作要搞得这么复杂？")]),t._v(" "),r("p",[r("strong",[t._v("性能考虑，拉取oplog是单线程进行，如果把重放也放到拉取的线程里，同步势必会很慢；所以设计上producer thread只干一件事")]),t._v(" 。")]),t._v(" "),r("p",[t._v("为什么不将拉取的oplog直接分发给replWriter thread，而要多一个replBatcher线程来中转？")]),t._v(" "),r("p",[r("strong",[t._v("oplog重放时，要保持顺序性，而且遇到createCollection、dropCollection等DDL命令时，这些命令与其他的增删改查命令是不能并行执行的，而这些控制就是由replBatcher来完成的")]),t._v("\n。")]),t._v(" "),r("h3",{attrs:{id:"注意事项"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),r("blockquote",[r("p",[t._v("这部分内容源自：阿里巴巴在这块的技术专家张友东")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("initial sync单线程复制数据，效率比较低，生产环境应该尽量避免initial sync出现，需合理配置oplog，按默认『5%的可用磁盘空间』来配置oplog在绝大部分场景下都能满足需求，特殊的case(case1, case2)可根据实际情况设置更大的oplog。")])]),t._v(" "),r("li",[r("p",[t._v("新加入节点时，可以通过物理复制的方式来避免initial sync，将Primary上的dbpath拷贝到新的节点，直接启动，这样效率更高。")])]),t._v(" "),r("li",[r("p",[t._v("当Secondary上需要的oplog在同步源上已经滚掉时，Secondary的同步将无法正常进行，会进入RECOVERING的状态，需向Secondary主动发送resyc命令重新同步。")])]),t._v(" "),r("li",[r("p",[t._v("生产环境，最好通过db.printSlaveReplicationInfo()来监控主备同步滞后的情况，当Secondary落后太多时，要及时调查清楚原因。")])]),t._v(" "),r("li",[r("p",[t._v("当Secondary同步滞后是因为主上并发写入太高导致，（db.serverStatus().metrics.repl.buffer.sizeBytes持续接近db.serverStatus().metrics.repl.buffer.maxSizeBytes），可通过调整Secondary上replWriter并发线程数来提升。")])])]),t._v(" "),r("h2",{attrs:{id:"复制集读写关注-concern"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复制集读写关注-concern"}},[t._v("#")]),t._v(" 复制集读写关注(concern)")]),t._v(" "),r("h3",{attrs:{id:"读的优先级-read-preference"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#读的优先级-read-preference"}},[t._v("#")]),t._v(" 读的优先级(Read Preference)")]),t._v(" "),r("p",[t._v("默认情况下，复制集的所有读请求都发到Primary，Driver可通过设置Read Preference来将读请求路由到其他的节点。")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("primary")]),t._v("： 默认规则，所有读请求发到Primary")]),t._v(" "),r("li",[r("code",[t._v("primaryPreferred")]),t._v("： Primary优先，如果Primary不可达，请求Secondary")]),t._v(" "),r("li",[r("code",[t._v("secondary")]),t._v("： 所有的读请求都发到secondary")]),t._v(" "),r("li",[r("code",[t._v("secondaryPreferred")]),t._v("：Secondary优先，当所有Secondary不可达时，请求Primary")]),t._v(" "),r("li",[r("code",[t._v("nearest")]),t._v("：读请求发送到最近的可达节点上（通过ping探测得出最近的节点）")])]),t._v(" "),r("h3",{attrs:{id:"write-concern"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#write-concern"}},[t._v("#")]),t._v(" Write Concern")]),t._v(" "),r("p",[t._v("默认情况下，Primary完成写操作即返回，Driver可通过设置"),r("a",{attrs:{href:"https://docs.mongodb.org/manual/core/write-concern/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Write\nConcern在新窗口打开"),r("OutboundLink")],1),t._v("来设置写成功的规则。")]),t._v(" "),r("p",[t._v("如下的write concern规则设置写必须在大多数节点上成功，超时时间为5s。")]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("    db"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("products"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("item")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"envelopes"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("qty")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Clasp"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("writeConcern")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("w")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" majority"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("wtimeout")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br")])]),r("p",[t._v("上面的设置方式是针对单个请求的，也可以修改副本集默认的write concern，这样就不用每个请求单独设置。")]),t._v(" "),r("div",{staticClass:"language-json line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-json"}},[r("code",[t._v("cfg = rs.conf()\ncfg.settings = "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncfg.settings.getLastErrorDefaults = "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" w"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"majority"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" wtimeout"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nrs.reconfig(cfg)\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br")])]),r("h2",{attrs:{id:"参考文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("https://docs.mongodb.com/manual/replication/")])]),t._v(" "),r("li",[r("p",[t._v("https://www.cnblogs.com/clsn/p/8214345.html")])]),t._v(" "),r("li",[r("p",[t._v("https://cloud.tencent.com/developer/article/1004435")])]),t._v(" "),r("li",[r("p",[t._v("https://cloud.tencent.com/developer/article/1004384")])]),t._v(" "),r("li",[r("p",[t._v("https://mongoing.com/archives/72571")])])])])}),[],!1,null,null,null);r.default=e.exports}}]);