(window.webpackJsonp=window.webpackJsonp||[]).push([[311],{641:function(a,e,n){"use strict";n.r(e);var t=n(4),v=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"代码质量-统一风格-统一命名规范详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码质量-统一风格-统一命名规范详解"}},[a._v("#")]),a._v(" 代码质量 - 统一风格：统一命名规范详解")]),a._v(" "),e("blockquote",[e("p",[a._v("好的代码本身就是注释, 所以我们需要统一命名风格，本文将介绍常用的统一风格的措施之"),e("strong",[a._v("统一命名规范")]),a._v(" 。")])]),a._v(" "),e("h2",{attrs:{id:"统一命名风格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#统一命名风格"}},[a._v("#")]),a._v(" 统一命名风格")]),a._v(" "),e("blockquote",[e("p",[a._v("好的代码本身就是注释, 所以我们需要统一命名风格。")])]),a._v(" "),e("p",[a._v("​\n在本文中，将从大到小，从外到内，总结Java编程中的命名规范。文中将会涉及到日常工作中常见的命名示例，如包命名，类命名，接口命名，方法命名，变量命名，常类命名，抽象类命名，异常类命名以及扩展类命名等。我将按照项目工程目录结构，从包，类(接口，抽象类，异常类)，方法，变量和常量的顺序展开介绍。")]),a._v(" "),e("h3",{attrs:{id:"包命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包命名规范"}},[a._v("#")]),a._v(" 包命名规范")]),a._v(" "),e("p",[a._v("​>\n包(Package)的作用是将功能相似或相关的类或者接口进行分组管理，便于类的定位和查找，同时也可以使用包来避免类名的冲突和访问控制，使代码更容易维护。通常，包命使用小写英文字母进行命名，并使用“.”进行分割，每个被分割的单元只能包含一个名词。一般地，包命名常采用顶级域名作为前缀，例如com，net，org，edu，gov，cn，io等，随后紧跟公司/组织/个人名称以及功能模块名称。")]),a._v(" "),e("p",[a._v("下面是一些包命名示例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("package org.springframework.boot.autoconfigure.cloud\npackage org.springframework.boot.util\npackage org.hibernate.action\npackage org.hibernate.cfg\npackage com.alibaba.druid\npackage com.alibaba.druid.filter\npackage com.alibaba.nacos.client.config\npackage com.ramostear.blog.web\n")])])]),e("p",[a._v("下面是Oracle Java的一些常见包命名例子：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("package java.beans\npackage java.io\npackage java.lang\npackage java.net\npackage java.util\npackage javax.annotation\n")])])]),e("h3",{attrs:{id:"类命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类命名规范"}},[a._v("#")]),a._v(" 类命名规范")]),a._v(" "),e("blockquote",[e("p",[a._v("类(Class)通常采用名词进行命名，且首字母大写，如果一个类名包含两个以上名词，建议使用驼峰命名(Camel-\nCase)法书写类名,每个名词首字母也应该大写。一般地，类名的书写尽量使其保持简单和描述的完整性，因此在书写类名时不建议使用缩写(一些约定俗成的命名除外，例如Internationalization\nand Localization缩写成i18n，Uniform Resource Identifier缩写成URI，Data Access\nObject缩写成DAO，JSON Web Token缩写成JWT，HyperText Markup\nLanguage缩写成HTML等等)。下列是一些常见的类命名示例：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public class UserDTO{\n    //TODO...\n}\nclass EmployeeService{\n    //TODO...\n}\nclass StudentDAO{\n    //TODO...\n}\nclass OrderItemEntity{\n    //TODO...\n}\npublic class UserServiceImpl{\n    //TODO...\n}\npublic class OrderItemController{\n    //TODO...\n}\n")])])]),e("p",[a._v("下面是Oracle Java中的一些标准命名示例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public class HTMLEditorKit{\n    //...\n}\npublic abstract class HttpContext{\n    //...\n}\npublic interface ImageObserver{\n    //...\n}\npublic class ArrayIndexOutOfBoundsException{\n    //...\n}\npublic class enum Thread.State{\n    //...\n}\n")])])]),e("h3",{attrs:{id:"接口命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口命名规范"}},[a._v("#")]),a._v(" 接口命名规范")]),a._v(" "),e("blockquote",[e("p",[a._v("首先，接口(Interface)是一种表述某一类型对象动作的特殊类；简单来说，接口也是类(不太严谨)，所以，接口的名称的书写也应该符合类名书写规范，首字母应该大写，与普通类名不同的是，接口命名时通常采用形容词或动词来描述接口的动作行为。下列是Oracle\nJava中一些标准库的接口使用形容词命名示例：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public interface Closeable{\n    //...\n}\npublic interface Cloneable{\n    //...\n}\npublic interface RunnableP{\n    //...\n}\npublic interface Comparable<T>{\n    //...\n}\npublic interface CompletionService<V>{\n    //...\n}\npublic interface Iterable<T>{\n    //...\n}\npublic interface EventListener{\n    //...\n}\n")])])]),e("p",[a._v("在Spring Framework标准库中，通常采用名词+动词/形容词的组合方式来命名接口，下列是Spring Framework中一些接口命名示例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public interface AfterAdvice{\n    //...\n}\npublic interface TargetClassAware{\n    //...\n}\npublic interface ApplicationContextAware{\n    //...\n}\npublic interface MessageSourceResolvable{\n    //...\n}\n")])])]),e("h3",{attrs:{id:"抽象类命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽象类命名规范"}},[a._v("#")]),a._v(" 抽象类命名规范")]),a._v(" "),e("blockquote",[e("p",[a._v("抽象类(Abstract\nClass)是一种特殊的类，其命名与普通类的命名规范相当。一般地，为了将抽象类与普通类和接口做出区别，提高抽象类的可读性，在命名抽象类时，会以“Abstract”/“Base”作为类命的前缀。下面是编程中一些常规的命名示例：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public abstract class AbstractRepository<T>{\n    //...\n}\npublic abstract class AbstractController{\n    //...\n}\npublic abstract class BaseDao<T,ID>{\n    //...\n}\npublic abstract class AbstractCommonService<T>{\n    //...\n}\n")])])]),e("p",[a._v("以下是Spring Framework中常见的抽象类示例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public abstract class AbstractAspectJAdvice{\n    //...\n}\npublic abstract class AbstractSingletonProxyFactoryBean{\n    //...\n}\npublic abstract class AbstractBeanFactoryPointcutAdvisor{\n    //...\n}\npublic abstract class AbstractCachingConfiguration{\n    //...\n}\npublic abstract class AbstractContextLoaderInitializer{\n    //...\n}\n")])])]),e("h3",{attrs:{id:"异常类命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常类命名规范"}},[a._v("#")]),a._v(" 异常类命名规范")]),a._v(" "),e("blockquote",[e("p",[a._v("异常类(Exception\nClass)也是类的一种，但与普通类命名不同的是，异常类在命名时需要使用“Exception”作为其后缀。下面是常见的异常类命名示例：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public class FileNotFoundException{\n    //...\n}\npublic class UserAlreadyExistException{\n    //...\n}\npublic class TransactionException{\n    //...\n}\npublic class ClassNotFoundException{\n    //...\n}\npublic class IllegalArgumentException{\n    //...\n}\npublic class IndexOutOfBoundsException{\n    //...\n}\n")])])]),e("p",[a._v("另外，在Java中还有另外一类异常类，它们属于系统异常，这一类异常类的命名使用“Error”作为其后缀，以区分Exception(编码，环境，操作等异常)。下面是系统异常(非检查异常)的命名示例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public abstract class VirtualMachineError{\n    //...\n}\npublic class StackOverflowError{\n    //...\n}\npublic class OutOfMemoryError{\n    //...\n}\npublic class IllegalAccessError{\n    //...\n}\npublic class NoClassDefFoundError{\n    //...\n}\npublic class NoSuchFieldError{\n    //...\n}\npublic class NoSuchMethodError{\n    //...\n}\n")])])]),e("h3",{attrs:{id:"方法命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法命名规范"}},[a._v("#")]),a._v(" 方法命名规范")]),a._v(" "),e("blockquote",[e("p",[a._v("方法(Method)命名时,其首字母应该小写，如果方法签名由多个单词组成，则从第二个单词起，使用驼峰命名法进行书写。一般地，在对方法进行命名时，通常采用动词/动词+名词的组合，下面是方法命名的一些常见示例。")])]),a._v(" "),e("h4",{attrs:{id:"表述获取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表述获取"}},[a._v("#")]),a._v(" 表述获取")]),a._v(" "),e("p",[a._v("​ 如果一个方法用于获取某个值，通常使用“get”作为其前缀，例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public String getUserName(){\n    //...\n}\npublic List<Integer> getUserIds(){\n    //...\n}\npublic User getOne(){\n    //...\n}\n")])])]),e("h4",{attrs:{id:"表述查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表述查询"}},[a._v("#")]),a._v(" 表述查询")]),a._v(" "),e("p",[a._v("​ 如果方法需要通过查询或筛选的方式获取某个数据，通常使用“find”/“query”作为其前缀，例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public List<User> findOne(Integer id){\n    //...\n}\npublic List<Integer> findAll(){\n    //...\n} \npublic List<String> queryOrders(){\n    //...\n}\n")])])]),e("h4",{attrs:{id:"表述条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表述条件"}},[a._v("#")]),a._v(" 表述条件")]),a._v(" "),e("p",[a._v("​ 如果一个方法需要一些条件参数，则可以使用“by”/“with”等字符作为方法名中条件的连接符，例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public User findByUsername(String username){\n    //...\n}\npublic List<Integer> getUserIdsWithState(boolean state){\n    //...\n}\npublic List<User> findAllByUsernameOrderByIdDesc(String username){\n    //...\n}\n")])])]),e("h4",{attrs:{id:"表述设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表述设置"}},[a._v("#")]),a._v(" 表述设置")]),a._v(" "),e("p",[a._v("​ 如果一个方法是要设置，插入，修改，删除等操作，应该将对应的动词(set,insert,update,delete)作为其名词的前缀，例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public void setName(String name){\n    //...\n}\npublic User insert(User user){\n    //...\n}\npublic void update(User user){\n    //...\n}\npublic void clearAll(){\n    //...\n}\n")])])]),e("h4",{attrs:{id:"其他规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他规范"}},[a._v("#")]),a._v(" 其他规范")]),a._v(" "),e("p",[a._v("​\n如果一个方法用于获取某组数据的长度或数量，则该方法应该使用length或size命名；如果方法的返回值为布尔类型(Boolean)，则该方法应该使用“is”或”has”作为前缀；如果方法用于将一种类型的数据转换为另一种数据数类型，则可以使用“to”作为前缀。下面是综合示例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public long length(){\n    //...\n}\npublic int size(){\n    //...\n}\npublic boolean isOpen(){\n    //...\n}\npublic boolean isNotEmpty(){\n    //...\n}\npublic boolean hasLength(){\n    //...\n}\npublic Set<Integer> mapToSet(Map map){\n    //...\n}\npublic UserDto convertTo(User user){\n    //...\n}\npublic String toString(Object obj){\n    //...\n}\n")])])]),e("h3",{attrs:{id:"变量命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量命名规范"}},[a._v("#")]),a._v(" 变量命名规范")]),a._v(" "),e("blockquote",[e("p",[a._v("变量(Variable)命名包括参数名称，成员变量和局部变量。变量命名通常以小写字母开头，如果变量名由多个单词构成，则从第二个单词起首字母需要大写，在变量命名过程中，不建议使用“_”作为前缀或者单词之间的分割符号。下面是一些常见的变量命名示例：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("private String nickName;\nprivate String mobileNumber;\nprivate Long id;\nprivate String username;\nprivate Long orderId;\nprivate Long orderItemId;\n")])])]),e("h3",{attrs:{id:"常量命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常量命名规范"}},[a._v("#")]),a._v(" 常量命名规范")]),a._v(" "),e("blockquote",[e("p",[a._v("一般地，常量名称采用全部大写的英文单词书写，如果常量名称由多个单词组成，则单词之间统一使用“_”进行分割，下面是常量命名示例：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public static final String LOGIN_USER_SESSION_KEY = "current_login_user";\npublic static final int MAX_AGE_VALUE = 120;\npublic static final int DEFAULT_PAGE_NO = 1;\npublic static final long MAX_PAGE_SIZE = 1000;\npublic static final boolean HAS_LICENSE = false;\npublic static final boolean IS_CHECKED = false;\n')])])]),e("h3",{attrs:{id:"枚举命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#枚举命名规范"}},[a._v("#")]),a._v(" 枚举命名规范")]),a._v(" "),e("blockquote",[e("p",[a._v("枚举(Enum)类是一种特殊的类，其命名规范遵循普通类的命名约束条件，首字母大写，采用驼峰命名法；枚举类中定义的值的名称遵循常量的命名规范，且枚举值的名称需要与类名有一定的关联性，下面是枚举的一些示例：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public enum Color{\n    RED,YELLOW,BLUE,GREEN,WHITE;\n}\npublic enum PhysicalSize{\n    TINY,SMALL,MEDIUM,LARGE,HUGE,GIGANTIC;\n}\n")])])]),e("p",[a._v("下面是Oracle Java标准库中的一个示例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public enum ElementType{\n    TYPE,\n    FIELD,\n    METHOD,\n    PARAMETER,\n    CONSTRUCTOR,\n    LOCAL_VARIABLE,\n    ANNOTATION_TYPE,\n    PACKAGE,\n    TYPE_PARAMETER,\n    TYPE_USE;\n}\n")])])]),e("h3",{attrs:{id:"其他命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他命名规范"}},[a._v("#")]),a._v(" 其他命名规范")]),a._v(" "),e("h4",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),e("p",[a._v("​ 在定义数组时，为了便于阅读，尽量保持以下的书写规范：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('int[] array = new int[10];\nint[] idArray ={1,2,3,4,5};\nString[] nameArray = {"First","Yellow","Big"}\n \npublic List<String> getNameById(Integer[] ids){\n    //...\n}\n//或者\npublic List<String> getNameById(Integer...ids){\n    //...\n}\n')])])]),e("h4",{attrs:{id:"表述复数或者集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表述复数或者集合"}},[a._v("#")]),a._v(" 表述复数或者集合")]),a._v(" "),e("p",[a._v("​ 如果一个变量用于描述多个数据时，尽量使用单词的复数形式进行书写，例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Collection<Order> orders;\nint[] values;\nList<Item> items;\n")])])]),e("p",[a._v("另外，如果表述的是一个Map数据，则应使用“map”作为其后缀，例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Map<String,User> userMap;\nMap<String,List<Object>> listMap;\n")])])]),e("h4",{attrs:{id:"泛型类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型类"}},[a._v("#")]),a._v(" 泛型类")]),a._v(" "),e("p",[a._v("在书写泛型类时，通常做以下的约定：")]),a._v(" "),e("ul",[e("li",[a._v("E表示Element，通常用在集合中；")]),a._v(" "),e("li",[a._v("ID用于表示对象的唯一标识符类型")]),a._v(" "),e("li",[a._v("T表示Type(类型)，通常指代类；")]),a._v(" "),e("li",[a._v("K表示Key(键),通常用于Map中；")]),a._v(" "),e("li",[a._v("V表示Value(值),通常用于Map中，与K结对出现；")]),a._v(" "),e("li",[a._v("N表示Number,通常用于表示数值类型；")]),a._v(" "),e("li",[a._v("？表示不确定的Java类型；")]),a._v(" "),e("li",[a._v("X用于表示异常；")]),a._v(" "),e("li",[a._v("U,S表示任意的类型。")])]),a._v(" "),e("p",[a._v("下面时泛型类的书写示例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public class HashSet<E> extends AbstractSet<E>{\n    //...\n}\npublic class HashMap<K,V> extends AbstractMap<K,V>{\n    //...\n}\npublic class ThreadLocal<T>{\n    //...\n}\npublic interface Functor<T,X extends Throwable>{\n    T val() throws X;\n}\npublic class Container<K,V>{\n    private K key;\n    private V value;\n    Container(K key,V value){\n        this.key = key;\n        this.value = value;\n    }\n    //getter and setter ...\n}\n \npublic interface BaseRepository<T,ID>{\n    T findById(ID id);\n \n    void update(T t);\n \n    List<T> findByIds(ID...ids);\n}\n \npublic static <T> List<T> methodName(Class<T> clz){\n    List<T> dataList = getByClz(clz);\n    return dataList;\n}\n")])])]),e("h4",{attrs:{id:"接口实现类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口实现类"}},[a._v("#")]),a._v(" 接口实现类")]),a._v(" "),e("p",[a._v("​\n为了便于阅读，在通常情况下，建议接口实现类使用“Impl作为后缀”，不建议使用大写的“I”作为接口前缀(PS:当然也有很多代码是用I开头的），下面是接口和接口实现类的书写示例。")]),a._v(" "),e("p",[a._v("推荐写法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public interface OrderService{\n    //...\n}\npublic class OrderServiceImpl implements OrderService{\n    //...\n}\n")])])]),e("p",[a._v("不建议的写法：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public interface IOrderService{\n    //...\n}\npublic class OrderService implements IOrderService{\n    //...\n}\n")])])]),e("h4",{attrs:{id:"测试类和测试方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试类和测试方法"}},[a._v("#")]),a._v(" 测试类和测试方法")]),a._v(" "),e("p",[a._v("​\n在项目中，测试类采用被测试业务模块名/被测试接口/被测试类+“Test”的方法进行书写，测试类中的测试函数采用“test”+用例操作_状态的组合方式进行书写，例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("public class UserServiceTest{\n \n    public void testFindByUsernameAndPassword(){\n        //...\n    }\n \n    public void testUsernameExist_notExist(){\n        //...\n    }\n \n    public void testDeleteById_isOk(){\n        //...\n    }\n}\n")])])]),e("h2",{attrs:{id:"阿里代码手册中命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阿里代码手册中命名规范"}},[a._v("#")]),a._v(" 阿里代码手册中命名规范")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("【强制】代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。"),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" : "),e("code",[a._v("_name / __name / $Object / name_ / name$ / Object$")])])]),a._v(" "),e("li",[e("p",[a._v("【强制】代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。说明: 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : "),e("code",[a._v("alibaba / taobao / youku / hangzhou")]),a._v(" 等国际通用的名称，可视同英文。"),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" : "),e("code",[a._v("DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3")])])]),a._v(" "),e("li",[e("p",[a._v("【强制】类名使用 "),e("code",[a._v("UpperCamelCase")]),a._v(" 风格，必须遵从驼峰形式，但以下情形例外: "),e("code",[a._v("DO / BO / DTO / VO / AO")]),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : "),e("code",[a._v("MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion")]),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" : "),e("code",[a._v("macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion")])])]),a._v(" "),e("li",[e("p",[a._v("【强制】方法名、参数名、成员变量、局部变量都统一使用 "),e("code",[a._v("lowerCamelCase")]),a._v(" 风格，必须遵从驼峰形式。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : "),e("code",[a._v("localValue / getHttpMessage() / inputUserId")])])]),a._v(" "),e("li",[e("p",[a._v("【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : "),e("code",[a._v("MAX_STOCK_COUNT")]),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" : "),e("code",[a._v("MAX_COUNT")])])]),a._v(" "),e("li",[e("p",[a._v("【强制】抽象类命名使用 "),e("code",[a._v("Abstract")]),a._v(" 或 "),e("code",[a._v("Base")]),a._v(" 开头；异常类命名使用 "),e("code",[a._v("Exception")]),a._v(" 结尾；测试类命名以它要测试的类的名称开始，以 "),e("code",[a._v("Test")]),a._v(" 结尾。")])]),a._v(" "),e("li",[e("p",[a._v("【强制】中括号是数组类型的一部分，数组定义如下: "),e("code",[a._v("String[] args")]),a._v("。"),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" : 使用 "),e("code",[a._v("String args[]")]),a._v(" 的方式来定义。")])]),a._v(" "),e("li",[e("p",[a._v("【强制】POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。"),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" : 定义为基本数据类型 "),e("code",[a._v("Boolean isDeleted")]),a._v("；的属性，它的方法也是 "),e("code",[a._v("isDeleted()")]),a._v("，RPC\n框架在反向解析的时候，“以为”对应的属性名称是 "),e("code",[a._v("deleted")]),a._v("，导致属性获取不到，进而抛出异常。")])]),a._v(" "),e("li",[e("p",[a._v("【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : 应用工具类包名为 "),e("code",[a._v("com.alibaba.open.util")]),a._v("、类名为 "),e("code",[a._v("MessageUtils")]),a._v("(此规则参考 spring\n的框架结构)")])]),a._v(" "),e("li",[e("p",[a._v("【强制】杜绝完全不规范的缩写，避免望文不知义。"),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" : "),e("code",[a._v("AbstractClass")]),a._v(" “缩写”命名成 "),e("code",[a._v("AbsClass")]),a._v("；"),e("code",[a._v("condition")]),a._v(" “缩写”命名成\n"),e("code",[a._v("condi")]),a._v("，此类随意缩写严重降低了代码的可阅读性。")])]),a._v(" "),e("li",[e("p",[a._v("【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。"),e("br"),a._v(" "),e("strong",[a._v("说明")]),a._v(" : 将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" :")]),a._v(" "),e("p",[a._v("public class OrderFactory;\npublic class LoginProxy;\npublic class ResourceObserver;")])]),a._v(" "),e("li",[e("p",[a._v("【推荐】接口类中的方法和属性不要加任何修饰符号("),e("code",[a._v("public")]),a._v(" 也不要加)，保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : 接口方法签名: "),e("code",[a._v("void f();")]),e("br"),a._v("\n接口基础常量表示: "),e("code",[a._v('String COMPANY = "alibaba";')]),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" : 接口方法定义: "),e("code",[a._v("public abstract void f();")]),e("br"),a._v(" "),e("strong",[a._v("说明")]),a._v(" : JDK8 中接口允许有默认实现，那么这个 "),e("code",[a._v("default")]),a._v(" 方法，是对所有实现类都有价值的默认实现。")])]),a._v(" "),e("li",[e("p",[a._v("接口和实现类的命名有两套规则:")])]),a._v(" "),e("li",[e("p",[a._v("【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : "),e("code",[a._v("CacheServiceImpl")]),a._v(" 实现 "),e("code",[a._v("CacheService")]),a._v(" 接口。")])]),a._v(" "),e("li",[e("p",[a._v("【推荐】如果是形容能力的接口名称，取对应的形容词做接口名(通常是–able 的形式)。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : "),e("code",[a._v("AbstractTranslator")]),a._v(" 实现 "),e("code",[a._v("Translatable")]),a._v("。")])]),a._v(" "),e("li",[e("p",[a._v("【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。"),e("br"),a._v(" "),e("strong",[a._v("说明")]),a._v(" : 枚举其实就是特殊的常量类，且构造方法被默认强制是私有。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : 枚举名字: "),e("code",[a._v("DealStatusEnum")]),a._v("，成员名称: "),e("code",[a._v("SUCCESS / UNKOWN_REASON")]),a._v("。")])]),a._v(" "),e("li",[e("p",[a._v("【参考】各层命名规约:")])]),a._v(" "),e("li",[e("p",[e("code",[a._v("Service/DAO")]),a._v(" 层方法命名规约")])]),a._v(" "),e("li",[e("p",[a._v("获取单个对象的方法用 "),e("code",[a._v("get")]),a._v(" 做前缀。")])]),a._v(" "),e("li",[e("p",[a._v("获取多个对象的方法用 "),e("code",[a._v("list")]),a._v(" 做前缀。")])]),a._v(" "),e("li",[e("p",[a._v("获取统计值的方法用 "),e("code",[a._v("count")]),a._v(" 做前缀。")])]),a._v(" "),e("li",[e("p",[a._v("插入的方法用 "),e("code",[a._v("save")]),a._v("(推荐)或 "),e("code",[a._v("insert")]),a._v(" 做前缀。")])]),a._v(" "),e("li",[e("p",[a._v("删除的方法用 "),e("code",[a._v("remove")]),a._v("(推荐)或 "),e("code",[a._v("delete")]),a._v(" 做前缀。")])]),a._v(" "),e("li",[e("p",[a._v("修改的方法用 "),e("code",[a._v("update")]),a._v(" 做前缀。")])]),a._v(" "),e("li",[e("p",[a._v("领域模型命名规约")])]),a._v(" "),e("li",[e("p",[a._v("数据对象: "),e("code",[a._v("xxxDO")]),a._v("，"),e("code",[a._v("xxx")]),a._v(" 即为数据表名。")])]),a._v(" "),e("li",[e("p",[a._v("数据传输对象: "),e("code",[a._v("xxxDTO")]),a._v("，"),e("code",[a._v("xxx")]),a._v(" 为业务领域相关的名称。")])]),a._v(" "),e("li",[e("p",[a._v("展示对象: "),e("code",[a._v("xxxVO")]),a._v("，"),e("code",[a._v("xxx")]),a._v(" 一般为网页名称。")])]),a._v(" "),e("li",[e("p",[e("code",[a._v("POJO")]),a._v(" 是 "),e("code",[a._v("DO/DTO/BO/VO")]),a._v(" 的统称，禁止命名成 "),e("code",[a._v("xxxPOJO")]),a._v("。")])])]),a._v(" "),e("h3",{attrs:{id:"常量定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常量定义"}},[a._v("#")]),a._v(" 常量定义")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("【强制】不允许任何魔法值(即未经定义的常量)直接出现在代码中。"),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" :")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('String key = "Id#taobao_" + tradeId;  \n')])])]),e("p",[a._v("cache.put(key, value);")])]),a._v(" "),e("li",[e("p",[a._v("【强制】long 或者 Long 初始赋值时，必须使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。 说明: "),e("code",[a._v("Long a = 2l;")]),a._v(" 写的是数字的 21，还是 Long 型的 2?")])]),a._v(" "),e("li",[e("p",[a._v("【推荐】不要使用一个常量类维护所有常量，应该按常量功能进行归类，分开维护。如: 缓存相关的常量放在类: CacheConsts 下；系统配置相关的常量放在类: ConfigConsts 下。"),e("br"),a._v(" "),e("strong",[a._v("说明")]),a._v(" : 大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。")])]),a._v(" "),e("li",[e("p",[a._v("【推荐】常量的复用层次有五层: 跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。")])]),a._v(" "),e("li",[e("p",[a._v("跨应用共享常量: 放置在二方库中，通常是 "),e("code",[a._v("client.jar")]),a._v(" 中的 "),e("code",[a._v("constant")]),a._v(" 目录下。")])]),a._v(" "),e("li",[e("p",[a._v("应用内共享常量: 放置在一方库的 "),e("code",[a._v("modules")]),a._v(" 中的 "),e("code",[a._v("constant")]),a._v(" 目录下。"),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" : 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('      类 A 中: public static final String YES = "yes";  \n')])])]),e("p",[a._v('类 B 中: public static final String YES = "y";'),e("br"),a._v("\nA.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。")])]),a._v(" "),e("li",[e("p",[a._v("子工程内部共享常量: 即在当前子工程的 "),e("code",[a._v("constant")]),a._v(" 目录下。")])]),a._v(" "),e("li",[e("p",[a._v("包内共享常量: 即在当前包下单独的 "),e("code",[a._v("constant")]),a._v(" 目录下。")])]),a._v(" "),e("li",[e("p",[a._v("类内共享常量: 直接在类内部 "),e("code",[a._v("private static final")]),a._v(" 定义。")])]),a._v(" "),e("li",[e("p",[a._v("【推荐】如果变量值仅在一个范围内变化，且带有名称之外的延伸属性，定义为枚举类。下面正例中的数字就是延伸信息，表示星期几。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : "),e("code",[a._v("public Enum { MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(7);}")])])])]),a._v(" "),e("h3",{attrs:{id:"代码格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码格式"}},[a._v("#")]),a._v(" 代码格式")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则:")])]),a._v(" "),e("li",[e("p",[a._v("左大括号前不换行。")])]),a._v(" "),e("li",[e("p",[a._v("左大括号后换行。")])]),a._v(" "),e("li",[e("p",[a._v("右大括号前换行。")])]),a._v(" "),e("li",[e("p",[a._v("右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。")])]),a._v(" "),e("li",[e("p",[a._v("【强制】 左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格。详见 第 5 条下方正例提示。"),e("br"),a._v(" "),e("strong",[a._v("反例")]),a._v(" : "),e("code",[a._v("if (空格 a == b 空格)")])])]),a._v(" "),e("li",[e("p",[a._v("【强制】"),e("code",[a._v("if/for/while/switch/do")]),a._v(" 等保留字与括号之间都必须加空格。")])]),a._v(" "),e("li",[e("p",[a._v("【强制】任何二目、三目运算符的左右两边都需要加一个空格。"),e("br"),a._v(" "),e("strong",[a._v("说明")]),a._v(" : 运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号等。")])]),a._v(" "),e("li",[e("p",[a._v("【强制】缩进采用 4 个空格，禁止使用 tab 字符。"),e("br"),a._v(" "),e("strong",[a._v("说明")]),a._v(" : 如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 "),e("code",[a._v("Use tab character")]),a._v("；而在 eclipse 中，必须勾选 "),e("code",[a._v("insert spaces for tabs")]),a._v("。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" : (涉及 1-5 点)")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('public static void main(String[] args) {\n// 缩进 4 个空格\nString say = "hello";\n// 运算符的左右必须有一个空格\nint flag = 0;\n// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格\nif (flag == 0) {\n    System.out.println(say);\n}\n\n// 左大括号前加空格且不换行；左大括号后换行\nif (flag == 1) {\n    System.out.println("world");\n// 右大括号前换行，右大括号后有 else，不用换行\n} else {\n    System.out.println("ok");\n// 在右大括号后直接结束，则必须换行\n}\n')])])]),e("p",[a._v("}")])]),a._v(" "),e("li",[e("p",[a._v("【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则:")])]),a._v(" "),e("li",[e("p",[a._v("第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。")])]),a._v(" "),e("li",[e("p",[a._v("运算符与下文一起换行。")])]),a._v(" "),e("li",[e("p",[a._v("方法调用的点符号与下文一起换行。")])]),a._v(" "),e("li",[e("p",[a._v("在多个参数超长，在逗号后换行。")])]),a._v(" "),e("li",[e("p",[a._v("在括号前不要换行，见反例。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" :")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("StringBuffer sb = new StringBuffer();\n")])])]),e("p",[a._v('//超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行\nsb.append("zi").append("xin")...\n.append("huang")...\n.append("huang")...\n.append("huang");')])])]),a._v(" "),e("p",[e("strong",[a._v("反例")]),a._v(" :")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('     StringBuffer sb = new StringBuffer();\n //超过 120 个字符的情况下，不要在括号前换行\n sb.append("zi").append("xin")...append\n ("huang");\n //参数很多的方法调用可能超过 120 个字符，不要在逗号前换行\n method(args1, args2, args3, ...\n , argsX); \n')])])]),e("ol",{attrs:{start:"7"}},[e("li",[e("p",[a._v("【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(' : 下例中实参的"a",后边必须要有一个空格。'),e("code",[a._v('method("a", "b", "c");')])])]),a._v(" "),e("li",[e("p",[a._v("【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 windows 格式。")])]),a._v(" "),e("li",[e("p",[a._v("【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。"),e("br"),a._v(" "),e("strong",[a._v("正例")]),a._v(" :")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("int a = 3;\n")])])]),e("p",[a._v("long b = 4L;\nfloat c = 5F;\nStringBuffer sb = new StringBuffer();")])])]),a._v(" "),e("p",[e("strong",[a._v("说明")]),a._v(" : 增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的情况下，是一种累赘的事情。")]),a._v(" "),e("ol",{attrs:{start:"10"}},[e("li",[a._v("【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。"),e("br"),a._v(" "),e("strong",[a._v("说明")]),a._v(" : 没有必要插入多个空行进行隔开。")])]),a._v(" "),e("h2",{attrs:{id:"扩展-速记java开发中的各种o"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展-速记java开发中的各种o"}},[a._v("#")]),a._v(" 扩展：速记Java开发中的各种O")]),a._v(" "),e("blockquote",[e("p",[a._v("最后，通过一张表和图快速对Java中的BO,DTO,DAO,PO,POJO,VO之间的含义，区别以及联系进行梳理。")])]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("名称")]),a._v(" "),e("th",[a._v("使用范围")]),a._v(" "),e("th",[a._v("解释说明")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("BO")]),a._v(" "),e("td",[a._v("用于Service,Manager,Business等业务相关类的命名")]),a._v(" "),e("td",[a._v("Business")])])])]),a._v(" "),e("p",[a._v("Object业务处理对象，主要作用是把业务逻辑封装成一个对象。"),e("br"),a._v("\nDTO| 经过加工后的PO对象，其内部属性可能增加或减少| Data Transfer\nObject数据传输对象，主要用于远程调用等需要大量传输数据的地方，例如，可以将一个或多个PO类的部分或全部属性封装为DTO进行传输"),e("br"),a._v("\nDAO| 用于对数据库进行读写操作的类进行命名| Data Access\nObject数据访问对象，主要用来封装对数据库的访问，通过DAO可以将POJO持久化为PO，也可以利用PO封装出VO和DTO"),e("br"),a._v("\nPO| Bean,Entity等类的命名| Persistant\nObject持久化对象，数据库表中的数据在Java对象中的映射状态，可以简单的理解为一个PO对象即为数据库表中的一条记录"),e("br"),a._v("\nPOJO| POJO是DO/DTO/BO/VO的统称| Plain Ordinary Java Object\n简单Java对象，它是一个简单的普通Java对象，禁止将类命名为XxxxPOJO"),e("br"),a._v("\nVO| 通常是视图控制层和模板引擎之间传递的数据对象| Value Object\n值对象，主要用于视图层，视图控制器将视图层所需的属性封装成一个对象，然后用一个VO对象在视图控制器和视图之间进行数据传输。"),e("br"),a._v("\nAO| 应用层对象| Application Object，在Web层与Service层之间抽象的复用对象模型，很少用。")]),a._v(" "),e("p",[a._v("下面将通过一张图来理解上述几种O之间相互转换的关系:")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-qt-10.png",alt:"img"}})])])}),[],!1,null,null,null);e.default=v.exports}}]);