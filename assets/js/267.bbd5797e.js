(window.webpackJsonp=window.webpackJsonp||[]).push([[267],{595:function(v,a,n){"use strict";n.r(a);var _=n(4),t=Object(_.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"mongo进阶-db核心-分片sharding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mongo进阶-db核心-分片sharding"}},[v._v("#")]),v._v(" Mongo进阶 - DB核心：分片Sharding")]),v._v(" "),a("blockquote",[a("p",[v._v("分片（sharding）是MongoDB通过水平扩展将数据集分布在不同的服务器上来提高自己的存储容量和吞吐量。和MySQL分区方案相比，MongoDB的最大区别在于它几乎能自动完成所有事情，只要告诉MongoDB要分配数据，它就能自动维护数据在不同服务器之间的均衡。")])]),v._v(" "),a("h2",{attrs:{id:"为什么要引入分片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要引入分片"}},[v._v("#")]),v._v(" 为什么要引入分片")]),v._v(" "),a("p",[v._v("高数据量和吞吐量的数据库应用会对单机的性能造成较大压力, 大的查询量会将单机的CPU耗尽, 大的数据量对单机的存储压力较大,\n最终会耗尽系统的内存而将压力转移到磁盘IO上。")]),v._v(" "),a("p",[v._v("为了解决这些问题, 有两个基本的方法: "),a("code",[v._v("垂直扩展")]),v._v("和"),a("code",[v._v("水平扩展")]),v._v("。")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("垂直扩展")]),v._v("：增加更多的CPU和存储资源来扩展容量。")]),v._v(" "),a("li",[a("code",[v._v("水平扩展")]),v._v("：将数据集分布在多个服务器上。"),a("strong",[v._v("MongoDB的分片就是水平扩展的体现")]),v._v(" 。")])]),v._v(" "),a("p",[a("strong",[v._v("分片设计思想")])]),v._v(" "),a("p",[v._v("分片为应对高吞吐量与大数据量提供了方法。使用分片减少了每个分片需要处理的请求数，因此，通过水平扩展，集群可以提高自己的存储容量和吞吐量。举例来说，当插入一条数据时，应用只需要访问存储这条数据的分片.")]),v._v(" "),a("p",[a("strong",[v._v("分片目的")])]),v._v(" "),a("ul",[a("li",[v._v("读/写能力提升")]),v._v(" "),a("li",[v._v("存储容量扩容")]),v._v(" "),a("li",[v._v("高可用性")])]),v._v(" "),a("h2",{attrs:{id:"分片集群的结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分片集群的结构"}},[v._v("#")]),v._v(" 分片集群的结构")]),v._v(" "),a("p",[v._v("一个MongoDB的分片集群包含如下组件：")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("shard")]),v._v(": 即分片，真正的数据存储位置，以chunk为单位存数据；每个分片可以部署为一个复制集。")]),v._v(" "),a("li",[a("code",[v._v("mongos")]),v._v(": 查询的路由, 提供客户端和分片集群之间的接口。")]),v._v(" "),a("li",[a("code",[v._v("config servers")]),v._v(": 存储元数据和配置数据。")])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-shard-1.png",alt:"img"}})]),v._v(" "),a("p",[v._v("这里要注意mongos提供的是客户端application与MongoDB分片集群的路由功能，这里分片集群包含了分片的collection和非分片的collection。如下展示了通过路由访问分片的collection和非分片的collection:")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-shard-2.png",alt:"img"}})]),v._v(" "),a("h2",{attrs:{id:"分片数据如何存储-chunk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分片数据如何存储-chunk"}},[v._v("#")]),v._v(" 分片数据如何存储：Chunk")]),v._v(" "),a("blockquote",[a("p",[v._v("分片的内部是如何管理数据的呢？")])]),v._v(" "),a("h3",{attrs:{id:"chunk是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunk是什么"}},[v._v("#")]),v._v(" Chunk是什么")]),v._v(" "),a("p",[v._v("在一个shard server内部，MongoDB还是会把数据分为chunks，每个chunk代表这个shard\nserver内部一部分数据。chunk的产生，会有以下两个用途：")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("Splitting")]),v._v("：当一个chunk的大小超过配置中的chunk size时，MongoDB的后台进程会把这个chunk切分成更小的chunk，从而避免chunk过大的情况")]),v._v(" "),a("li",[a("code",[v._v("Balancing")]),v._v("：在MongoDB中，balancer是一个后台进程，负责chunk的迁移，从而均衡各个shard server的负载，系统初始1个chunk，chunk size默认值64M,生产库上选择适合业务的chunk size是最好的。MongoDB会自动拆分和迁移chunks。")])]),v._v(" "),a("p",[v._v("分片集群的数据分布（shard节点）")]),v._v(" "),a("ul",[a("li",[v._v("使用chunk来存储数据")]),v._v(" "),a("li",[v._v("进群搭建完成之后，默认开启一个chunk，大小是64M，")]),v._v(" "),a("li",[v._v("存储需求超过64M，chunk会进行分裂，如果单位时间存储需求很大，设置更大的chunk")]),v._v(" "),a("li",[v._v("chunk会被自动均衡迁移。")])]),v._v(" "),a("h3",{attrs:{id:"chunksize的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunksize的选择"}},[v._v("#")]),v._v(" chunksize的选择")]),v._v(" "),a("blockquote",[a("p",[v._v("适合业务的chunksize是最好的。")])]),v._v(" "),a("p",[v._v("chunk的分裂和迁移非常消耗IO资源；chunk分裂的时机：在插入和更新，读数据不会分裂。")]),v._v(" "),a("p",[a("strong",[v._v("chunksize的选择")]),v._v(" ：")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("小的chunksize")]),v._v("：数据均衡是迁移速度快，数据分布更均匀。数据分裂频繁，路由节点消耗更多资源。")]),v._v(" "),a("li",[a("code",[v._v("大的chunksize")]),v._v("：数据分裂少。数据块移动集中消耗IO资源。通常100-200M")])]),v._v(" "),a("h3",{attrs:{id:"chunk分裂及迁移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunk分裂及迁移"}},[v._v("#")]),v._v(" chunk分裂及迁移")]),v._v(" "),a("p",[v._v("随着数据的增长，其中的数据大小超过了配置的chunk size，默认是64M，则这个chunk就会分裂成两个。数据的增长会让chunk分裂得越来越多。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-shard-4.png",alt:"img"}})]),v._v(" "),a("p",[v._v("这时候，各个shard 上的chunk数量就会不平衡。这时候，mongos中的一个组件balancer\n就会执行自动平衡。把chunk从chunk数量最多的shard节点挪动到数量最少的节点。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-shard-5.png",alt:"img"}})]),v._v(" "),a("p",[a("strong",[v._v("chunkSize 对分裂及迁移的影响")])]),v._v(" "),a("ul",[a("li",[v._v("MongoDB 默认的 chunkSize 为64MB，如无特殊需求，"),a("strong",[v._v("建议保持默认值")]),v._v(" ；chunkSize 会直接影响到 chunk 分裂、迁移的行为。")]),v._v(" "),a("li",[a("strong",[v._v("chunkSize 越小，chunk 分裂及迁移越多，数据分布越均衡；反之，chunkSize 越大，chunk 分裂及迁移会更少，但可能导致数据分布不均")]),v._v(" 。")]),v._v(" "),a("li",[v._v("chunkSize 太小，容易出现 "),a("code",[v._v("jumbo chunk")]),v._v("（即shardKey 的某个取值出现频率很高，这些文档只能放到一个 chunk 里，无法再分裂）而无法迁移；chunkSize 越大，则可能出现 chunk 内文档数太多（chunk 内文档数不能超过 250000 ）而无法迁移。")]),v._v(" "),a("li",[a("strong",[v._v("chunk 自动分裂只会在数据写入时触发")]),v._v(" ，所以如果将 chunkSize 改小，系统需要一定的时间来将 chunk 分裂到指定的大小。")]),v._v(" "),a("li",[a("strong",[v._v("chunk 只会分裂，不会合并")]),v._v(" ，所以即使将 chunkSize 改大，现有的 chunk 数量不会减少，但 chunk 大小会随着写入不断增长，直到达到目标大小。")])]),v._v(" "),a("h2",{attrs:{id:"如何进行分片-分片依据和分片算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何进行分片-分片依据和分片算法"}},[v._v("#")]),v._v(" 如何进行分片：分片依据和分片算法")]),v._v(" "),a("blockquote",[a("p",[v._v("MongoDB 中Collection的数据是根据什么进行分片的呢？这就是我们要介绍的"),a("strong",[v._v("分片键（Shard key）")]),v._v("\n；那么又是采用过了什么算法进行分片的呢？这就是紧接着要介绍的"),a("strong",[v._v("范围分片（range sharding）"),a("strong",[v._v("和")]),v._v(" 哈希分片（Hash\nSharding)")]),v._v("。")])]),v._v(" "),a("h3",{attrs:{id:"分片键-shard-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分片键-shard-key"}},[v._v("#")]),v._v(" 分片键（Shard key）")]),v._v(" "),a("blockquote",[a("p",[v._v("分片键就是在集合中选一个字段或者组合字段，用该键的值作为数据拆分的依据。")])]),v._v(" "),a("p",[v._v("分片键必须是一个索引，通过sh.shardCollection加会自动创建索引（前提是此集合不存在的情况下）。一个自增的分片键对写入和数据均匀分布就不是很好，因为自增的片键总会在一个分片上写入，后续达到某个阀值可能会写到别的分片。但是按照片键查询会非常高效。")]),v._v(" "),a("p",[v._v("注意：")]),v._v(" "),a("ul",[a("li",[v._v("分片键是不可变。")]),v._v(" "),a("li",[v._v("分片键必须有索引。")]),v._v(" "),a("li",[v._v("分片键大小限制512bytes。")]),v._v(" "),a("li",[v._v("分片键用于路由查询。")]),v._v(" "),a("li",[v._v("MongoDB不接受已进行collection级分片的collection上插入无分片")]),v._v(" "),a("li",[v._v("键的文档（也不支持空值插入）")])]),v._v(" "),a("h3",{attrs:{id:"哈希分片-hash-sharding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希分片-hash-sharding"}},[v._v("#")]),v._v(" 哈希分片（Hash Sharding)")]),v._v(" "),a("blockquote",[a("p",[v._v("分片过程中利用哈希索引作为分片，基于哈希片键最大的好处就是保证数据在各个节点分布基本均匀。")])]),v._v(" "),a("p",[v._v("对于基于哈希的分片，MongoDB计算一个字段的哈希值，并用这个哈希值来创建数据块。在使用基于哈希分片的系统中，拥有"),a("strong",[v._v("相近分片键")]),v._v("\n的文档很可能不会存储在同一个数据块中，因此数据的分离性更好一些。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-shard-6.png",alt:"img"}})]),v._v(" "),a("p",[v._v("注意")]),v._v(" "),a("p",[v._v("这里要注意，哈希分片是只能基于一个字段吗？MongoDB4.4版本中已经可以针对"),a("code",[v._v("复合索引字段")]),v._v("进行哈希分片。")]),v._v(" "),a("h3",{attrs:{id:"范围分片-range-sharding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范围分片-range-sharding"}},[v._v("#")]),v._v(" 范围分片（range sharding）")]),v._v(" "),a("blockquote",[a("p",[v._v("将单个Collection的数据分散存储在多个shard上，用户可以指定根据集合内文档的某个字段即shard key来进行范围分片（range\nsharding）。")])]),v._v(" "),a("p",[v._v("对于基于范围的分片，MongoDB按照片键的范围把数据分成不同部分:")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-shard-7.png",alt:"img"}})]),v._v(" "),a("p",[v._v("在使用片键做范围划分的系统中，拥有"),a("strong",[v._v("相近分片键")]),v._v(" 的文档很可能存储在同一个数据块中，因此也会存储在同一个分片中。")]),v._v(" "),a("h3",{attrs:{id:"哈希和范围的结合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希和范围的结合"}},[v._v("#")]),v._v(" 哈希和范围的结合")]),v._v(" "),a("p",[v._v("如下是基于X索引字段进行范围分片，但是随着X的增长，大于20的数据全部进入了Chunk C, 这导致了数据的不均衡。\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-shard-111.png",alt:"img"}})]),v._v(" "),a("p",[v._v("这时对X索引字段建哈希索引：")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-shard-112.png",alt:"img"}})]),v._v(" "),a("h2",{attrs:{id:"分片数据按区域-zone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分片数据按区域-zone"}},[v._v("#")]),v._v(" 分片数据按区域：Zone")]),v._v(" "),a("blockquote",[a("p",[v._v("在分片群集中可以基于分片键划分数据的[区域(zone)在新窗口打开](https://docs.mongodb.com/manual/core/zone-\nsharding/), 你可以将每个区域(zone)与集群中的一个或多个分片关联。")])]),v._v(" "),a("p",[v._v("应用区域(zone)的一些常见部署模式如下：")]),v._v(" "),a("ul",[a("li",[v._v("将指定的数据放在指定的分片上。")]),v._v(" "),a("li",[v._v("确保最相关的数据驻留在地理上最靠近应用程序服务器的分片上。")]),v._v(" "),a("li",[v._v("根据分片硬件的硬件/性能将数据路由到分片。")])]),v._v(" "),a("p",[v._v("下图说明了具有三个分片和两个区域的分片集群。\nA区域代表下边界为1且上限为10的范围。B区域代表下边界为10且上限为20的范围。分片Alpha和Beta具有A区域。\n分片Beta也具有B区。分片Charlie没有与之关联的区域。 群集处于稳定状态。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/mongo-z-shard-113.png",alt:"img"}})]),v._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[v._v("#")]),v._v(" 参考文章")]),v._v(" "),a("ul",[a("li",[v._v("https://docs.mongodb.com/manual/sharding/")]),v._v(" "),a("li",[v._v("https://www.cnblogs.com/clsn/p/8214345.html")]),v._v(" "),a("li",[v._v("https://www.cnblogs.com/zhanjindong/archive/2013/04/11/3015394.html")]),v._v(" "),a("li",[v._v("https://www.cnblogs.com/zping/p/11203545.html")])])])}),[],!1,null,null,null);a.default=t.exports}}]);