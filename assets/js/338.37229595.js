(window.webpackJsonp=window.webpackJsonp||[]).push([[338],{670:function(n,s,a){"use strict";a.r(s);var e=a(4),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"常见重构技巧-去除不必要的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见重构技巧-去除不必要的"}},[n._v("#")]),n._v(" 常见重构技巧 - 去除不必要的!=")]),n._v(" "),s("blockquote",[s("p",[n._v("项目中会存在大量判空代码，多么丑陋繁冗！如何避免这种情况？我们是否滥用了判空呢？")])]),n._v(" "),s("h2",{attrs:{id:"场景一-null无意义之常规判断空"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景一-null无意义之常规判断空"}},[n._v("#")]),n._v(" 场景一：null无意义之常规判断空")]),n._v(" "),s("ul",[s("li",[n._v("通常是这样的")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('    private void xxxMethod(String key){\n        if(key!=null&&!"".equals(key)){\n            // do something\n        }\n    }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("ul",[s("li",[n._v("初步的，使用Apache Commons，Guvava, Hutool等StringUtils")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    private void xxxMethod(String key){\n        if(StringUtils.isNotEmpty(key)){\n            // do something\n        }\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("h2",{attrs:{id:"场景二-null无意义之使用断言assert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景二-null无意义之使用断言assert"}},[n._v("#")]),n._v(" 场景二：null无意义之使用断言Assert")]),n._v(" "),s("ul",[s("li",[n._v("考虑用Assert断言")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    private void xxxMethod(String key){\n        Assert.notNull(key);\n    \n        // do something\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("h2",{attrs:{id:"场景三-写util类是否都需要逐级判断空"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景三-写util类是否都需要逐级判断空"}},[n._v("#")]),n._v(" 场景三：写util类是否都需要逐级判断空")]),n._v(" "),s("blockquote",[s("p",[n._v("逐级判断空，还是抛出自定义异常，还是不处理？It Depends...")])]),n._v(" "),s("p",[n._v("随手翻了下，[hutool\nIdcardUtil在新窗口打开](https://gitee.com/loolly/hutool/blob/v5-dev/hutool-\ncore/src/main/java/cn/hutool/core/util/IdcardUtil.java) 显然是交给调用者判断的。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('    /**\n        * 是否有效身份证号\n        *\n        * @param idCard 身份证号，支持18位、15位和港澳台的10位\n        * @return 是否有效\n        */\n    public static boolean isValidCard(String idCard) {\n        idCard = idCard.trim();// 这里idCard没判断空\n        int length = idCard.length();\n        switch (length) {\n            case 18:// 18位身份证\n                return isValidCard18(idCard);\n            case 15:// 15位身份证\n                return isValidCard15(idCard);\n            case 10: {// 10位身份证，港澳台地区\n                String[] cardVal = isValidCard10(idCard);\n                return null != cardVal && "true".equals(cardVal[2]);\n            }\n            default:\n                return false;\n        }\n    }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("ul",[s("li",[n._v("再比如 Apache Common IO中, 并没判断空")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    /**\n        * Copy bytes from a <code>byte[]</code> to an <code>OutputStream</code>.\n        * @param input the byte array to read from\n        * @param output the <code>OutputStream</code> to write to\n        * @throws IOException In case of an I/O problem\n        */\n    public static void copy(final byte[] input, final OutputStream output)\n            throws IOException {\n        output.write(input);\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("h2",{attrs:{id:"场景四-让null变的有意义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景四-让null变的有意义"}},[n._v("#")]),n._v(" 场景四：让null变的有意义")]),n._v(" "),s("blockquote",[s("p",[n._v("返回一个空对象（而非null对象），比如NO_ACTION是特殊的Action，那么我们就定义一个ACTION。下面举个“栗子”，假设有如下代码")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    public interface Action {\n      void doSomething();}\n    \n    public interface Parser {\n      Action findAction(String userInput);\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("其中，Parse有一个接口FindAction，这个接口会依据用户的输入，找到并执行对应的动作。假如用户输入不对，可能就找不到对应的动作（Action），因此findAction就会返回null，接下来action调用doSomething方法时，就会出现空指针。")]),n._v(" "),s("p",[n._v("解决这个问题的一个方式，就是使用Null Object pattern（空对象模式）")]),n._v(" "),s("blockquote",[s("p",[n._v("NullObject模式首次发表在“ 程序设计模式语言\n”系列丛书中。一般的，在面向对象语言中，对对象的调用前需要使用判空检查，来判断这些对象是否为空，因为在空引用上无法调用所需方法。")])]),n._v(" "),s("p",[s("img",{attrs:{src:"/images/develop/refactor/dev-refactor-notnull-1.png",alt:""}})]),n._v(" "),s("p",[n._v("我们来改造一下")]),n._v(" "),s("p",[n._v("类定义如下，这样定义findAction方法后，确保无论用户输入什么，都不会返回null对象：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    public class MyParser implements Parser {\n      private static Action NO_ACTION = new Action() {\n        public void doSomething() { /* do nothing */ }\n      };\n    \n      public Action findAction(String userInput) {\n        // ...\n        if ( /* we can't find any actions */ ) {\n          return NO_ACTION;\n        }\n      }\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("对比下面两份调用实例")]),n._v(" "),s("p",[n._v("1.冗余: 每获取一个对象，就判一次空")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    Parser parser = ParserFactory.getParser();\n    if (parser == null) {\n      // now what?\n      // this would be an example of where null isn't (or shouldn't be) a valid response\n    }\n    Action action = parser.findAction(someInput);\n    if (action == null) {\n      // do nothing} \n    else {\n      action.doSomething();\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("2.精简")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    ParserFactory.getParser().findAction(someInput).doSomething();\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("因为无论什么情况，都不会返回空对象，因此通过findAction拿到action后，可以放心地调用action的方法。")]),n._v(" "),s("p",[n._v("顺便再提下一个插件：")]),n._v(" "),s("blockquote",[s("p",[n._v(".NR Null Object插件 NR Null Object是一款适用于Android Studio、IntelliJ\nIDEA、PhpStorm、WebStorm、PyCharm、RubyMine、AppCode、CLion、GoLand、DataGrip等IDEA的Intellij插件。其可以根据现有对象，便捷快速生成其空对象模式需要的组成成分，其包含功能如下：")])]),n._v(" "),s("ul",[s("li",[n._v("分析所选类可声明为接口的方法；")]),n._v(" "),s("li",[n._v("抽象出公有接口；")]),n._v(" "),s("li",[n._v("创建空对象，自动实现公有接口；")]),n._v(" "),s("li",[n._v("对部分函数进行可为空声明；")]),n._v(" "),s("li",[n._v("可追加函数进行再次生成；")]),n._v(" "),s("li",[n._v("自动的函数命名规范")])]),n._v(" "),s("h2",{attrs:{id:"场景五-java8中使用optional"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景五-java8中使用optional"}},[n._v("#")]),n._v(" 场景五：Java8中使用Optional")]),n._v(" "),s("p",[n._v("假设我们有一个像这样的类层次结构:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    class Outer {\n        Nested nested;\n        Nested getNested() {\n            return nested;\n        }\n    }\n    class Nested {\n        Inner inner;\n        Inner getInner() {\n            return inner;\n        }\n    }\n    class Inner {\n        String foo;\n        String getFoo() {\n            return foo;\n        }\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("p",[n._v("解决这种结构的深层嵌套路径是有点麻烦的。我们必须编写一堆 null 检查来确保不会导致一个 NullPointerException:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    Outer outer = new Outer();\n    if (outer != null && outer.nested != null && outer.nested.inner != null) {\n        System.out.println(outer.nested.inner.foo);\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("我们可以通过利用 Java 8 的 Optional 类型来摆脱所有这些 null 检查。map 方法接收一个 Function 类型的 lambda\n表达式，并自动将每个 function 的结果包装成一个 Optional 对象。这使我们能够在一行中进行多个 map 操作。Null\n检查是在底层自动处理的。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    Optional.of(new Outer())\n        .map(Outer::getNested)\n        .map(Nested::getInner)\n        .map(Inner::getFoo)\n        .ifPresent(System.out::println);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("还有一种实现相同作用的方式就是通过利用一个 supplier 函数来解决嵌套路径的问题:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    Outer obj = new Outer();\n    resolve(() -> obj.getNested().getInner().getFoo())\n        .ifPresent(System.out::println);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("调用 obj.getNested().getInner().getFoo()) 可能会抛出一个 NullPointerException\n异常。在这种情况下，该异常将会被捕获，而该方法会返回 Optional.empty()。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    public static <T> Optional<T> resolve(Supplier<T> resolver) {\n        try {\n            T result = resolver.get();\n            return Optional.ofNullable(result);\n        }\n        catch (NullPointerException e) {\n            return Optional.empty();\n        }\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("请记住，这两个解决方案可能没有传统 null 检查那么高的性能。不过在大多数情况下不会有太大问题。")]),n._v(" "),s("ul",[s("li",[n._v("更多Optional，可以看这篇： "),s("RouterLink",{attrs:{to:"/md/java/java8/java8-optional.html"}},[n._v("Java 8 - Optional类")]),n._v(" "),s("ul",[s("li",[n._v("Optional类的意义")]),n._v(" "),s("li",[n._v("Optional类有哪些常用的方法")]),n._v(" "),s("li",[n._v("Optional举例贯穿所有知识点")]),n._v(" "),s("li",[n._v("多重类嵌套Null值判断")])])],1)])])}),[],!1,null,null,null);s.default=t.exports}}]);