(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{481:function(a,t,v){"use strict";v.r(t);var s=v(4),r=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"图-最小生成树-prim-kruskal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图-最小生成树-prim-kruskal"}},[a._v("#")]),a._v(" 图 - 最小生成树(Prim & Kruskal)")]),a._v(" "),t("blockquote",[t("p",[a._v("Kruskal算法是从最小权重边着手，将森林里的树逐渐合并；prim算法是从顶点出发，在根结点的基础上建起一棵树。")])]),a._v(" "),t("h2",{attrs:{id:"最小生成树相关名词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最小生成树相关名词"}},[a._v("#")]),a._v(" 最小生成树相关名词")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("连通图")]),a._v(": 在无向图中，若任意两个顶点vivi与vjvj都有路径相通，则称该无向图为连通图。")]),a._v(" "),t("li",[t("code",[a._v("强连通图")]),a._v(": 在有向图中，若任意两个顶点vivi与vjvj都有路径相通，则称该有向图为强连通图。")]),a._v(" "),t("li",[t("code",[a._v("连通网")]),a._v(": 在连通图中，若图的边具有一定的意义，每一条边都对应着一个数，称为权；权代表着连接连个顶点的代价，称这种连通图叫做连通网。")]),a._v(" "),t("li",[t("code",[a._v("生成树")]),a._v(": 一个连通图的生成树是指一个连通子图，它含有图中全部n个顶点，但只有足以构成一棵树的n-1条边。一颗有n个顶点的生成树有且仅有n-1条边，如果生成树中再添加一条边，则必定成环。")]),a._v(" "),t("li",[t("code",[a._v("最小生成树")]),a._v(": 在连通网的所有生成树中，所有边的代价和最小的生成树，称为最小生成树。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/alg-graph-min-tree-0.png",alt:"img"}})]),a._v(" "),t("h2",{attrs:{id:"最小生成树算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最小生成树算法"}},[a._v("#")]),a._v(" 最小生成树算法")]),a._v(" "),t("h3",{attrs:{id:"kruskal算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kruskal算法"}},[a._v("#")]),a._v(" Kruskal算法")]),a._v(" "),t("p",[a._v("此算法可以称为“加边法”，初始最小生成树边数为0，每迭代一次就选择一条满足条件的最小代价边，加入到最小生成树的边集合里。")]),a._v(" "),t("ol",[t("li",[a._v("把图中的所有边按代价从小到大排序；")]),a._v(" "),t("li",[a._v("把图中的n个顶点看成独立的n棵树组成的森林；")]),a._v(" "),t("li",[a._v("按权值从小到大选择边，所选的边连接的两个顶点ui,viui,vi,应属于两颗不同的树，则成为最小生成树的一条边，并将这两颗树合并作为一颗树。")]),a._v(" "),t("li",[a._v("重复(3),直到所有顶点都在一颗树内或者有n-1条边为止。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/alg-graph-min-tree-1.png",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"prim算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prim算法"}},[a._v("#")]),a._v(" Prim算法")]),a._v(" "),t("p",[a._v("此算法可以称为“加点法”，每次迭代选择代价最小的边对应的点，加入到最小生成树中。算法从某一个顶点s开始，逐渐长大覆盖整个连通网的所有顶点。")]),a._v(" "),t("ul",[t("li",[a._v("图的所有顶点集合为VV；初始令集合u={s},v=V−uu={s},v=V−u;")]),a._v(" "),t("li",[a._v("在两个集合u,vu,v能够组成的边中，选择一条代价最小的边(u0,v0)(u0,v0)，加入到最小生成树中，并把v0v0并入到集合u中。")]),a._v(" "),t("li",[a._v("重复上述步骤，直到最小生成树有n-1条边或者n个顶点为止。")])]),a._v(" "),t("p",[a._v("由于不断向集合u中加点，所以最小代价边必须同步更新；需要建立一个辅助数组closedge,用来维护集合v中每个顶点与集合u中最小代价边信息，:")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/alg-graph-min-tree-2.png",alt:"img"}})]),a._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("p",[a._v("因为Kruskal涉及大量对边的操作，所以它适用于稀疏图；普通的prim算法适用于稠密图，但堆优化的prim算法更适用于稀疏图，因为其时间复杂度是由边的数量决定的。")]),a._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("https://blog.csdn.net/luoshixian099/article/details/51908175")])]),a._v(" "),t("li",[t("p",[a._v("https://www.cnblogs.com/wuxiangnong/p/10885129.html")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);