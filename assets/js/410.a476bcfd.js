(window.webpackJsonp=window.webpackJsonp||[]).push([[410],{741:function(t,n,i){"use strict";i.r(n);var e=i(4),a=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"结构型-享元-flyweight"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构型-享元-flyweight"}},[t._v("#")]),t._v(" 结构型 - 享元(Flyweight)")]),t._v(" "),n("blockquote",[n("p",[t._v('享元模式(Flyweight Pattern): 利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。\n它让某个类的一个实例能用来提供许多"虚拟实例"。')])]),t._v(" "),n("h2",{attrs:{id:"意图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[t._v("#")]),t._v(" 意图")]),t._v(" "),n("p",[t._v("利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。")]),t._v(" "),n("h2",{attrs:{id:"类图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[t._v("#")]),t._v(" 类图")]),t._v(" "),n("ul",[n("li",[t._v("Flyweight: 享元对象")]),t._v(" "),n("li",[t._v("IntrinsicState: 内部状态，享元对象共享内部状态")]),t._v(" "),n("li",[t._v("ExtrinsicState: 外部状态，每个享元对象的外部状态不同")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/d52270b4-9097-4667-9f18-f405fc661c99.png",alt:"img"}})]),t._v(" "),n("h2",{attrs:{id:"实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('public interface Flyweight {\n    void doOperation(String extrinsicState);\n}\n\n\n\npublic class ConcreteFlyweight implements Flyweight {\n\n    private String intrinsicState;\n\n    public ConcreteFlyweight(String intrinsicState) {\n        this.intrinsicState = intrinsicState;\n    }\n\n    @Override\n    public void doOperation(String extrinsicState) {\n        System.out.println("Object address: " + System.identityHashCode(this));\n        System.out.println("IntrinsicState: " + intrinsicState);\n        System.out.println("ExtrinsicState: " + extrinsicState);\n    }\n}\n\n\n\npublic class FlyweightFactory {\n\n    private HashMap<String, Flyweight> flyweights = new HashMap<>();\n\n    Flyweight getFlyweight(String intrinsicState) {\n        if (!flyweights.containsKey(intrinsicState)) {\n            Flyweight flyweight = new ConcreteFlyweight(intrinsicState);\n            flyweights.put(intrinsicState, flyweight);\n        }\n        return flyweights.get(intrinsicState);\n    }\n}\n\n\n\npublic class Client {\n    public static void main(String[] args) {\n        FlyweightFactory factory = new FlyweightFactory();\n        Flyweight flyweight1 = factory.getFlyweight("aa");\n        Flyweight flyweight2 = factory.getFlyweight("aa");\n        flyweight1.doOperation("x");\n        flyweight2.doOperation("y");\n    }\n}\n\n\n\nObject address: 1163157884\nIntrinsicState: aa\nExtrinsicState: x\nObject address: 1163157884\nIntrinsicState: aa\nExtrinsicState: y\n')])])]),n("h2",{attrs:{id:"jdk"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[t._v("#")]),t._v(" JDK")]),t._v(" "),n("p",[t._v("Java 利用缓存来加速大量小对象的访问时间。")]),t._v(" "),n("ul",[n("li",[t._v("java.lang.Integer#valueOf(int)")]),t._v(" "),n("li",[t._v("java.lang.Boolean#valueOf(boolean)")]),t._v(" "),n("li",[t._v("java.lang.Byte#valueOf(byte)")]),t._v(" "),n("li",[t._v("java.lang.Character#valueOf(char)")])])])}),[],!1,null,null,null);n.default=a.exports}}]);