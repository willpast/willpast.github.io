(window.webpackJsonp=window.webpackJsonp||[]).push([[420],{751:function(t,e,r){"use strict";r.r(e);var n=r(4),a=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"行为型-迭代器-iterator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行为型-迭代器-iterator"}},[t._v("#")]),t._v(" 行为型 - 迭代器(Iterator)")]),t._v(" "),e("blockquote",[e("p",[t._v("迭代器模式(iterator pattern): 提供一种方法顺序访问一个聚合对象中的各个元素, 而又不暴露其内部的表示。")])]),t._v(" "),e("h2",{attrs:{id:"意图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[t._v("#")]),t._v(" 意图")]),t._v(" "),e("p",[t._v("提供一种顺序访问聚合对象元素的方法，并且不暴露聚合对象的内部表示。")]),t._v(" "),e("h2",{attrs:{id:"类图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[t._v("#")]),t._v(" 类图")]),t._v(" "),e("ul",[e("li",[t._v("Aggregate 是聚合类，其中 createIterator() 方法可以产生一个 Iterator；")]),t._v(" "),e("li",[t._v("Iterator 主要定义了 hasNext() 和 next() 方法。")]),t._v(" "),e("li",[t._v("Client 组合了 Aggregate，为了迭代遍历 Aggregate，也需要组合 Iterator。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/b0f61ac2-a4b6-4042-9cf0-ccf4238c1ff7.png",alt:"img"}})]),t._v(" "),e("h2",{attrs:{id:"实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public interface Aggregate {\n    Iterator createIterator();\n}\n\n\n\npublic class ConcreteAggregate implements Aggregate {\n\n    private Integer[] items;\n\n    public ConcreteAggregate() {\n        items = new Integer[10];\n        for (int i = 0; i < items.length; i++) {\n            items[i] = i;\n        }\n    }\n\n    @Override\n    public Iterator createIterator() {\n        return new ConcreteIterator<Integer>(items);\n    }\n}\n\n\n\npublic interface Iterator<Item> {\n    Item next();\n\n    boolean hasNext();\n}\n\n\n\npublic class ConcreteIterator<Item> implements Iterator {\n\n    private Item[] items;\n    private int position = 0;\n\n    public ConcreteIterator(Item[] items) {\n        this.items = items;\n    }\n\n    @Override\n    public Object next() {\n        return items[position++];\n    }\n\n    @Override\n    public boolean hasNext() {\n        return position < items.length;\n    }\n}\n\n\n\npublic class Client {\n    public static void main(String[] args) {\n        Aggregate aggregate = new ConcreteAggregate();\n        Iterator<Integer> iterator = aggregate.createIterator();\n        while (iterator.hasNext()) {\n            System.out.println(iterator.next());\n        }\n    }\n}\n")])])]),e("h2",{attrs:{id:"jdk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[t._v("#")]),t._v(" JDK")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("java.util.Iterator在新窗口打开"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("java.util.Enumeration在新窗口打开"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=a.exports}}]);