(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{405:function(n,e,r){"use strict";r.r(e);var o=r(4),t=Object(o.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"juc线程池-fork-join框架详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#juc线程池-fork-join框架详解"}},[n._v("#")]),n._v(" JUC线程池: Fork/Join框架详解")]),n._v(" "),e("blockquote",[e("p",[n._v("ForkJoinPool 是JDK 7加入的一个线程池类。Fork/Join 技术是分治算法(Divide-and-Conquer)的并行实现，它是一项可以获得良好的并行性能的简单且高效的设计技术。目的是为了帮助我们更好地利用多处理器带来的好处，使用所有可用的运算能力来提升应用的性能。")])]),n._v(" "),e("h2",{attrs:{id:"思考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[n._v("#")]),n._v(" 思考")]),n._v(" "),e("ul",[e("li",[n._v("Fork/Join主要用来解决什么样的问题?")]),n._v(" "),e("li",[n._v("Fork/Join框架是在哪个JDK版本中引入的?")]),n._v(" "),e("li",[n._v("Fork/Join框架主要包含哪三个模块? 模块之间的关系是怎么样的?")]),n._v(" "),e("li",[n._v("ForkJoinPool类继承关系?")]),n._v(" "),e("li",[n._v("ForkJoinTask抽象类继承关系? 在实际运用中，我们一般都会继承 RecursiveTask 、RecursiveAction 或 CountedCompleter 来实现我们的业务需求，而不会直接继承 ForkJoinTask 类。")]),n._v(" "),e("li",[n._v("整个Fork/Join 框架的执行流程/运行机制是怎么样的?")]),n._v(" "),e("li",[n._v("具体阐述Fork/Join的分治思想和work-stealing 实现方式?")]),n._v(" "),e("li",[n._v("有哪些JDK源码中使用了Fork/Join思想?")]),n._v(" "),e("li",[n._v("如何使用Executors工具类创建ForkJoinPool?")]),n._v(" "),e("li",[n._v("写一个例子: 用ForkJoin方式实现1+2+3+...+100000?")]),n._v(" "),e("li",[n._v("Fork/Join在使用时有哪些注意事项? 结合JDK中的斐波那契数列实例具体说明。")])]),n._v(" "),e("h2",{attrs:{id:"fork-join框架简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fork-join框架简介"}},[n._v("#")]),n._v(" Fork/Join框架简介")]),n._v(" "),e("p",[n._v("Fork/Join框架是Java并发工具包中的一种可以将一个大任务拆分为很多小任务来异步执行的工具，自JDK1.7引入。")]),n._v(" "),e("h3",{attrs:{id:"三个模块及关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三个模块及关系"}},[n._v("#")]),n._v(" 三个模块及关系")]),n._v(" "),e("p",[n._v("Fork/Join框架主要包含三个模块:")]),n._v(" "),e("ul",[e("li",[n._v("任务对象: "),e("code",[n._v("ForkJoinTask")]),n._v(" (包括"),e("code",[n._v("RecursiveTask")]),n._v("、"),e("code",[n._v("RecursiveAction")]),n._v(" 和 "),e("code",[n._v("CountedCompleter")]),n._v(")")]),n._v(" "),e("li",[n._v("执行Fork/Join任务的线程: "),e("code",[n._v("ForkJoinWorkerThread")])]),n._v(" "),e("li",[n._v("线程池: "),e("code",[n._v("ForkJoinPool")])])]),n._v(" "),e("p",[n._v("这三者的关系是: ForkJoinPool可以通过池中的ForkJoinWorkerThread来处理ForkJoinTask任务。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("// from 《A Java Fork/Join Framework》Dong Lea\nResult solve(Problem problem) {\n    if (problem is small)\n        directly solve problem\n    else {\n        split problem into independent parts\n        fork new subtasks to solve each part\n        join all subtasks\n        compose result from subresults\n    }\n}\n")])])]),e("p",[n._v("ForkJoinPool 只接收 ForkJoinTask 任务(在实际使用中，也可以接收 Runnable/Callable\n任务，但在真正运行时，也会把这些任务封装成 ForkJoinTask 类型的任务)，RecursiveTask 是 ForkJoinTask\n的子类，是一个可以递归执行的 ForkJoinTask，RecursiveAction 是一个无返回值的\nRecursiveTask，CountedCompleter 在任务完成执行后会触发执行一个自定义的钩子函数。")]),n._v(" "),e("p",[n._v("在实际运用中，我们一般都会继承 "),e("code",[n._v("RecursiveTask")]),n._v(" 、"),e("code",[n._v("RecursiveAction")]),n._v(" 或 "),e("code",[n._v("CountedCompleter")]),n._v("\n来实现我们的业务需求，而不会直接继承 ForkJoinTask 类。")]),n._v(" "),e("h3",{attrs:{id:"核心思想-分治算法-divide-and-conquer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心思想-分治算法-divide-and-conquer"}},[n._v("#")]),n._v(" 核心思想: 分治算法(Divide-and-Conquer)")]),n._v(" "),e("p",[n._v("分治算法(Divide-and-\nConquer)把任务递归的拆分为各个子任务，这样可以更好的利用系统资源，尽可能的使用所有可用的计算能力来提升应用性能。首先看一下 Fork/Join\n框架的任务运行机制:")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/java-thread-x-forkjoin-2.png",alt:"img"}})]),n._v(" "),e("ul",[e("li",[n._v("这里也可以一并看下: "),e("RouterLink",{attrs:{to:"/md/algorithm/alg-core-divide-and-conquer.html"}},[n._v("算法思想 - 分治算法")])],1)]),n._v(" "),e("h3",{attrs:{id:"核心思想-work-stealing-工作窃取-算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心思想-work-stealing-工作窃取-算法"}},[n._v("#")]),n._v(" 核心思想: work-stealing(工作窃取)算法")]),n._v(" "),e("p",[n._v("work-stealing(工作窃取)算法:\n线程池内的所有工作线程都尝试找到并执行已经提交的任务，或者是被其他活动任务创建的子任务(如果不存在就阻塞等待)。这种特性使得 ForkJoinPool\n在运行多个可以产生子任务的任务，或者是提交的许多小任务时效率更高。尤其是构建异步模型的 ForkJoinPool\n时，对不需要合并(join)的事件类型任务也非常适用。")]),n._v(" "),e("p",[n._v("在 ForkJoinPool\n中，线程池中每个工作线程(ForkJoinWorkerThread)都对应一个任务队列(WorkQueue)，工作线程优先处理来自自身队列的任务(LIFO或FIFO顺序，参数\nmode 决定)，然后以FIFO的顺序随机窃取其他队列中的任务。")]),n._v(" "),e("p",[n._v("具体思路如下:")]),n._v(" "),e("ul",[e("li",[n._v("每个线程都有自己的一个WorkQueue，该工作队列是一个双端队列。")]),n._v(" "),e("li",[n._v("队列支持三个功能push、pop、poll")]),n._v(" "),e("li",[n._v("push/pop只能被队列的所有者线程调用，而poll可以被其他线程调用。")]),n._v(" "),e("li",[n._v("划分的子任务调用fork时，都会被push到自己的队列中。")]),n._v(" "),e("li",[n._v("默认情况下，工作线程从自己的双端队列获出任务并执行。")]),n._v(" "),e("li",[n._v("当自己的队列为空时，线程随机从另一个线程的队列末尾调用poll方法窃取任务。")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/java-thread-x-forkjoin-3.png",alt:"img"}})]),n._v(" "),e("h3",{attrs:{id:"fork-join-框架的执行流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fork-join-框架的执行流程"}},[n._v("#")]),n._v(" Fork/Join 框架的执行流程")]),n._v(" "),e("p",[n._v("上图可以看出ForkJoinPool 中的任务执行分两种:")]),n._v(" "),e("ul",[e("li",[n._v("直接通过 FJP 提交的外部任务(external/submissions task)，存放在 workQueues 的偶数槽位；")]),n._v(" "),e("li",[n._v("通过内部 fork 分割的子任务(Worker task)，存放在 workQueues 的奇数槽位。")])]),n._v(" "),e("p",[n._v("那Fork/Join 框架的执行流程是什么样的?")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/java-thread-x-forkjoin-5.png",alt:"img"}})]),n._v(" "),e("blockquote",[e("p",[n._v("后续的源码解析将围绕上图进行。")])]),n._v(" "),e("h2",{attrs:{id:"fork-join类关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fork-join类关系"}},[n._v("#")]),n._v(" Fork/Join类关系")]),n._v(" "),e("h3",{attrs:{id:"forkjoinpool继承关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool继承关系"}},[n._v("#")]),n._v(" ForkJoinPool继承关系")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/java-thread-x-forkjoin-1.png",alt:"img"}})]),n._v(" "),e("p",[n._v("内部类介绍:")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("ForkJoinWorkerThreadFactory: 内部线程工厂接口，用于创建工作线程ForkJoinWorkerThread")])]),n._v(" "),e("li",[e("p",[n._v("DefaultForkJoinWorkerThreadFactory: ForkJoinWorkerThreadFactory 的默认实现类")])]),n._v(" "),e("li",[e("p",[n._v("InnocuousForkJoinWorkerThreadFactory: 实现了 ForkJoinWorkerThreadFactory，无许可线程工厂，当系统变量中有系统安全管理相关属性时，默认使用这个工厂创建工作线程。")])]),n._v(" "),e("li",[e("p",[n._v("EmptyTask: 内部占位类，用于替换队列中 join 的任务。")])]),n._v(" "),e("li",[e("p",[n._v("ManagedBlocker: 为 ForkJoinPool 中的任务提供扩展管理并行数的接口，一般用在可能会阻塞的任务(如在 Phaser 中用于等待 phase 到下一个generation)。")])]),n._v(" "),e("li",[e("p",[n._v("WorkQueue: ForkJoinPool 的核心数据结构，本质上是work-stealing 模式的双端任务队列，内部存放 ForkJoinTask 对象任务，使用 @Contented 注解修饰防止伪共享。")]),n._v(" "),e("ul",[e("li",[n._v("工作线程在运行中产生新的任务(通常是因为调用了 fork())时，此时可以把 WorkQueue 的数据结构视为一个栈，新的任务会放入栈顶(top 位)；工作线程在处理自己工作队列的任务时，按照 LIFO 的顺序。")]),n._v(" "),e("li",[n._v("工作线程在处理自己的工作队列同时，会尝试窃取一个任务(可能是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的队列任务)，此时可以把 WorkQueue 的数据结构视为一个 FIFO 的队列，窃取的任务位于其他线程的工作队列的队首(base位)。")])])]),n._v(" "),e("li",[e("p",[n._v("伪共享状态: 缓存系统中是以缓存行(cache line)为单位存储的。缓存行是2的整数幂个连续字节，一般为32-256个字节。最常见的缓存行大小是64个字节。当多线程修改互相独立的变量时，如果这些变量共享同一个缓存行，就会无意中影响彼此的性能，这就是伪共享。")])])]),n._v(" "),e("h3",{attrs:{id:"forkjointask继承关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjointask继承关系"}},[n._v("#")]),n._v(" ForkJoinTask继承关系")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/java-thread-x-forkjoin-4.png",alt:"img"}})]),n._v(" "),e("p",[n._v("ForkJoinTask 实现了 Future 接口，说明它也是一个可取消的异步运算任务，实际上ForkJoinTask 是 Future\n的轻量级实现，主要用在纯粹是计算的函数式任务或者操作完全独立的对象计算任务。fork 是主运行方法，用于异步执行；而 join\n方法在任务结果计算完毕之后才会运行，用来合并或返回计算结果。 其内部类都比较简单，ExceptionNode\n是用于存储任务执行期间的异常信息的单向链表；其余四个类是为 Runnable/Callable 任务提供的适配器类，用于把\nRunnable/Callable 转化为 ForkJoinTask 类型的任务(因为 ForkJoinPool 只可以运行 ForkJoinTask\n类型的任务)。")]),n._v(" "),e("h2",{attrs:{id:"fork-join框架源码解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fork-join框架源码解析"}},[n._v("#")]),n._v(" Fork/Join框架源码解析")]),n._v(" "),e("blockquote",[e("p",[n._v("分析思路: 在对类层次结构有了解以后，我们先看下内部核心参数，然后分析上述流程图。会分4个部分:")])]),n._v(" "),e("ul",[e("li",[n._v("首先介绍任务的提交流程 - 外部任务(external/submissions task)提交")]),n._v(" "),e("li",[n._v("然后介绍任务的提交流程 - 子任务(Worker task)提交")]),n._v(" "),e("li",[n._v("再分析任务的执行过程(ForkJoinWorkerThread.run()到ForkJoinTask.doExec()这一部分)；")]),n._v(" "),e("li",[n._v("最后介绍任务的结果获取(ForkJoinTask.join()和ForkJoinTask.invoke())")])]),n._v(" "),e("h3",{attrs:{id:"forkjoinpool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool"}},[n._v("#")]),n._v(" ForkJoinPool")]),n._v(" "),e("h4",{attrs:{id:"核心参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心参数"}},[n._v("#")]),n._v(" 核心参数")]),n._v(" "),e("p",[n._v("在后面的源码解析中，我们会看到大量的位运算，这些位运算都是通过我们接下来介绍的一些常量参数来计算的。")]),n._v(" "),e("p",[n._v("例如，如果要更新活跃线程数，使用公式(UC_MASK & (c + AC_UNIT)) | (SP_MASK & c)；c 代表当前 ctl，UC_MASK 和 SP_MASK 分别是高位和低位掩码，AC_UNIT 为活跃线程的增量数，使用(UC_MASK & (c + AC_UNIT))就可以计算出高32位，然后再加上低32位(SP_MASK & c)，就拼接成了一个新的ctl。")]),n._v(" "),e("p",[n._v("这些运算的可读性很差，看起来有些复杂。在后面源码解析中有位运算的地方我都会加上注释，大家只需要了解它们的作用即可。")]),n._v(" "),e("p",[n._v("ForkJoinPool 与 内部类 WorkQueue 共享的一些常量:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("// Constants shared across ForkJoinPool and WorkQueue\n\n// 限定参数\nstatic final int SMASK = 0xffff;        //  低位掩码，也是最大索引位\nstatic final int MAX_CAP = 0x7fff;        //  工作线程最大容量\nstatic final int EVENMASK = 0xfffe;        //  偶数低位掩码\nstatic final int SQMASK = 0x007e;        //  workQueues 数组最多64个槽位\n\n// ctl 子域和 WorkQueue.scanState 的掩码和标志位\nstatic final int SCANNING = 1;             // 标记是否正在运行任务\nstatic final int INACTIVE = 1 << 31;       // 失活状态  负数\nstatic final int SS_SEQ = 1 << 16;       // 版本戳，防止ABA问题\n\n// ForkJoinPool.config 和 WorkQueue.config 的配置信息标记\nstatic final int MODE_MASK = 0xffff << 16;  // 模式掩码\nstatic final int LIFO_QUEUE = 0; //LIFO队列\nstatic final int FIFO_QUEUE = 1 << 16;//FIFO队列\nstatic final int SHARED_QUEUE = 1 << 31;       // 共享模式队列，负数\n")])])]),e("p",[n._v("ForkJoinPool 中的相关常量和实例字段:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("//  低位和高位掩码\nprivate static final long SP_MASK = 0xffffffffL;\nprivate static final long UC_MASK = ~SP_MASK;\n\n// 活跃线程数\nprivate static final int AC_SHIFT = 48;\nprivate static final long AC_UNIT = 0x0001L << AC_SHIFT; //活跃线程数增量\nprivate static final long AC_MASK = 0xffffL << AC_SHIFT; //活跃线程数掩码\n\n// 工作线程数\nprivate static final int TC_SHIFT = 32;\nprivate static final long TC_UNIT = 0x0001L << TC_SHIFT; //工作线程数增量\nprivate static final long TC_MASK = 0xffffL << TC_SHIFT; //掩码\nprivate static final long ADD_WORKER = 0x0001L << (TC_SHIFT + 15);  // 创建工作线程标志\n\n// 池状态\nprivate static final int RSLOCK = 1;\nprivate static final int RSIGNAL = 1 << 1;\nprivate static final int STARTED = 1 << 2;\nprivate static final int STOP = 1 << 29;\nprivate static final int TERMINATED = 1 << 30;\nprivate static final int SHUTDOWN = 1 << 31;\n\n// 实例字段\nvolatile long ctl;                   // 主控制参数\nvolatile int runState;               // 运行状态锁\nfinal int config;                    // 并行度|模式\nint indexSeed;                       // 用于生成工作线程索引\nvolatile WorkQueue[] workQueues;     // 主对象注册信息，workQueue\nfinal ForkJoinWorkerThreadFactory factory;// 线程工厂\nfinal UncaughtExceptionHandler ueh;  // 每个工作线程的异常信息\nfinal String workerNamePrefix;       // 用于创建工作线程的名称\nvolatile AtomicLong stealCounter;    // 偷取任务总数，也可作为同步监视器\n\n/** 静态初始化字段 */\n//线程工厂\npublic static final ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory;\n//启动或杀死线程的方法调用者的权限\nprivate static final RuntimePermission modifyThreadPermission;\n// 公共静态pool\nstatic final ForkJoinPool common;\n//并行度，对应内部common池\nstatic final int commonParallelism;\n//备用线程数，在tryCompensate中使用\nprivate static int commonMaxSpares;\n//创建workerNamePrefix(工作线程名称前缀)时的序号\nprivate static int poolNumberSequence;\n//线程阻塞等待新的任务的超时值(以纳秒为单位)，默认2秒\nprivate static final long IDLE_TIMEOUT = 2000L * 1000L * 1000L; // 2sec\n//空闲超时时间，防止timer未命中\nprivate static final long TIMEOUT_SLOP = 20L * 1000L * 1000L;  // 20ms\n//默认备用线程数\nprivate static final int DEFAULT_COMMON_MAX_SPARES = 256;\n//阻塞前自旋的次数，用在在awaitRunStateLock和awaitWork中\nprivate static final int SPINS  = 0;\n//indexSeed的增量\nprivate static final int SEED_INCREMENT = 0x9e3779b9;\n")])])]),e("p",[n._v("说明: ForkJoinPool 的内部状态都是通过一个64位的 long 型 变量ctl来存储，它由四个16位的子域组成:")]),n._v(" "),e("ul",[e("li",[n._v("AC: 正在运行工作线程数减去目标并行度，高16位")]),n._v(" "),e("li",[n._v("TC: 总工作线程数减去目标并行度，中高16位")]),n._v(" "),e("li",[n._v("SS: 栈顶等待线程的版本计数和状态，中低16位")]),n._v(" "),e("li",[n._v("ID: 栈顶 WorkQueue 在池中的索引(poolIndex)，低16位")])]),n._v(" "),e("p",[n._v("在后面的源码解析中，某些地方也提取了ctl的低32位(sp=(int)ctl)来检查工作线程状态，例如，当sp不为0时说明当前还有空闲工作线程。")]),n._v(" "),e("h4",{attrs:{id:"forkjoinpool-workqueue-中的相关属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool-workqueue-中的相关属性"}},[n._v("#")]),n._v(" ForkJoinPool.WorkQueue 中的相关属性:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("//初始队列容量，2的幂\nstatic final int INITIAL_QUEUE_CAPACITY = 1 << 13;\n//最大队列容量\nstatic final int MAXIMUM_QUEUE_CAPACITY = 1 << 26; // 64M\n\n// 实例字段\nvolatile int scanState;    // Woker状态, <0: inactive; odd:scanning\nint stackPred;             // 记录前一个栈顶的ctl\nint nsteals;               // 偷取任务数\nint hint;                  // 记录偷取者索引，初始为随机索引\nint config;                // 池索引和模式\nvolatile int qlock;        // 1: locked, < 0: terminate; else 0\nvolatile int base;         //下一个poll操作的索引(栈底/队列头)\nint top;                   //  下一个push操作的索引(栈顶/队列尾)\nForkJoinTask<?>[] array;   // 任务数组\nfinal ForkJoinPool pool;   // the containing pool (may be null)\nfinal ForkJoinWorkerThread owner; // 当前工作队列的工作线程，共享模式下为null\nvolatile Thread parker;    // 调用park阻塞期间为owner，其他情况为null\nvolatile ForkJoinTask<?> currentJoin;  // 记录被join过来的任务\nvolatile ForkJoinTask<?> currentSteal; // 记录从其他工作队列偷取过来的任务\n")])])]),e("h3",{attrs:{id:"forkjointask"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjointask"}},[n._v("#")]),n._v(" ForkJoinTask")]),n._v(" "),e("h4",{attrs:{id:"核心参数-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心参数-2"}},[n._v("#")]),n._v(" 核心参数")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("/** 任务运行状态 */\nvolatile int status; // 任务运行状态\nstatic final int DONE_MASK   = 0xf0000000;  // 任务完成状态标志位\nstatic final int NORMAL      = 0xf0000000;  // must be negative\nstatic final int CANCELLED   = 0xc0000000;  // must be < NORMAL\nstatic final int EXCEPTIONAL = 0x80000000;  // must be < CANCELLED\nstatic final int SIGNAL      = 0x00010000;  // must be >= 1 << 16 等待信号\nstatic final int SMASK       = 0x0000ffff;  //  低位掩码\n")])])]),e("h2",{attrs:{id:"fork-join框架源码解析-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fork-join框架源码解析-2"}},[n._v("#")]),n._v(" Fork/Join框架源码解析")]),n._v(" "),e("h3",{attrs:{id:"构造函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[n._v("#")]),n._v(" 构造函数")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('public ForkJoinPool(int parallelism,\n                    ForkJoinWorkerThreadFactory factory,\n                    UncaughtExceptionHandler handler,\n                    boolean asyncMode) {\n    this(checkParallelism(parallelism),\n            checkFactory(factory),\n            handler,\n            asyncMode ? FIFO_QUEUE : LIFO_QUEUE,\n            "ForkJoinPool-" + nextPoolId() + "-worker-");\n    checkPermission();\n}\n')])])]),e("p",[n._v("说明: 在 ForkJoinPool 中我们可以自定义四个参数:")]),n._v(" "),e("ul",[e("li",[n._v("parallelism: 并行度，默认为CPU数，最小为1")]),n._v(" "),e("li",[n._v("factory: 工作线程工厂；")]),n._v(" "),e("li",[n._v("handler: 处理工作线程运行任务时的异常情况类，默认为null；")]),n._v(" "),e("li",[n._v("asyncMode: 是否为异步模式，默认为 false。如果为true，表示子任务的执行遵循 FIFO 顺序并且任务不能被合并(join)，这种模式适用于工作线程只运行事件类型的异步任务。")])]),n._v(" "),e("p",[n._v("在多数场景使用时，如果没有太强的业务需求，我们一般直接使用 ForkJoinPool\n中的common池，在JDK1.8之后提供了ForkJoinPool.commonPool()方法可以直接使用common池，来看一下它的构造:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('private static ForkJoinPool makeCommonPool() {\n    int parallelism = -1;\n    ForkJoinWorkerThreadFactory factory = null;\n    UncaughtExceptionHandler handler = null;\n    try {  // ignore exceptions in accessing/parsing\n        String pp = System.getProperty\n                ("java.util.concurrent.ForkJoinPool.common.parallelism");//并行度\n        String fp = System.getProperty\n                ("java.util.concurrent.ForkJoinPool.common.threadFactory");//线程工厂\n        String hp = System.getProperty\n                ("java.util.concurrent.ForkJoinPool.common.exceptionHandler");//异常处理类\n        if (pp != null)\n            parallelism = Integer.parseInt(pp);\n        if (fp != null)\n            factory = ((ForkJoinWorkerThreadFactory) ClassLoader.\n                    getSystemClassLoader().loadClass(fp).newInstance());\n        if (hp != null)\n            handler = ((UncaughtExceptionHandler) ClassLoader.\n                    getSystemClassLoader().loadClass(hp).newInstance());\n    } catch (Exception ignore) {\n    }\n    if (factory == null) {\n        if (System.getSecurityManager() == null)\n            factory = defaultForkJoinWorkerThreadFactory;\n        else // use security-managed default\n            factory = new InnocuousForkJoinWorkerThreadFactory();\n    }\n    if (parallelism < 0 && // default 1 less than #cores\n            (parallelism = Runtime.getRuntime().availableProcessors() - 1) <= 0)\n        parallelism = 1;//默认并行度为1\n    if (parallelism > MAX_CAP)\n        parallelism = MAX_CAP;\n    return new ForkJoinPool(parallelism, factory, handler, LIFO_QUEUE,\n            "ForkJoinPool.commonPool-worker-");\n}\n')])])]),e("p",[n._v("使用common\npool的优点就是我们可以通过指定系统参数的方式定义“并行度、线程工厂和异常处理类”；并且它使用的是同步模式，也就是说可以支持任务合并(join)。")]),n._v(" "),e("h3",{attrs:{id:"执行流程-外部任务-external-submissions-task-提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行流程-外部任务-external-submissions-task-提交"}},[n._v("#")]),n._v(" 执行流程 - 外部任务(external/submissions task)提交")]),n._v(" "),e("p",[n._v("向 ForkJoinPool 提交任务有三种方式:")]),n._v(" "),e("ul",[e("li",[n._v("invoke()会等待任务计算完毕并返回计算结果；")]),n._v(" "),e("li",[n._v("execute()是直接向池提交一个任务来异步执行，无返回结果；")]),n._v(" "),e("li",[n._v("submit()也是异步执行，但是会返回提交的任务，在适当的时候可通过task.get()获取执行结果。")])]),n._v(" "),e("p",[n._v("这三种提交方式都都是调用externalPush()方法来完成，所以接下来我们将从externalPush()方法开始逐步分析外部任务的执行过程。")]),n._v(" "),e("h4",{attrs:{id:"externalpush-forkjointask-task"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#externalpush-forkjointask-task"}},[n._v("#")]),n._v(" externalPush(ForkJoinTask<?> task)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("//添加给定任务到submission队列中\nfinal void externalPush(ForkJoinTask<?> task) {\n    WorkQueue[] ws;\n    WorkQueue q;\n    int m;\n    int r = ThreadLocalRandom.getProbe();//探针值，用于计算WorkQueue槽位索引\n    int rs = runState;\n    if ((ws = workQueues) != null && (m = (ws.length - 1)) >= 0 &&\n            (q = ws[m & r & SQMASK]) != null && r != 0 && rs > 0 && //获取随机偶数槽位的workQueue\n            U.compareAndSwapInt(q, QLOCK, 0, 1)) {//锁定workQueue\n        ForkJoinTask<?>[] a;\n        int am, n, s;\n        if ((a = q.array) != null &&\n                (am = a.length - 1) > (n = (s = q.top) - q.base)) {\n            int j = ((am & s) << ASHIFT) + ABASE;//计算任务索引位置\n            U.putOrderedObject(a, j, task);//任务入列\n            U.putOrderedInt(q, QTOP, s + 1);//更新push slot\n            U.putIntVolatile(q, QLOCK, 0);//解除锁定\n            if (n <= 1)\n                signalWork(ws, q);//任务数小于1时尝试创建或激活一个工作线程\n            return;\n        }\n        U.compareAndSwapInt(q, QLOCK, 1, 0);//解除锁定\n    }\n    externalSubmit(task);//初始化workQueues及相关属性\n}\n")])])]),e("p",[n._v("首先说明一下externalPush和externalSubmit两个方法的联系:\n它们的作用都是把任务放到队列中等待执行。不同的是，externalSubmit可以说是完整版的externalPush，在任务首次提交时，需要初始化workQueues及其他相关属性，这个初始化操作就是externalSubmit来完成的；而后再向池中提交的任务都是通过简化版的externalSubmit-\nexternalPush来完成。")]),n._v(" "),e("p",[n._v("externalPush的执行流程很简单: 首先找到一个随机偶数槽位的 workQueue，然后把任务放入这个 workQueue\n的任务数组中，并更新top位。如果队列的剩余任务数小于1，则尝试创建或激活一个工作线程来运行任务(防止在externalSubmit初始化时发生异常导致工作线程创建失败)。")]),n._v(" "),e("h4",{attrs:{id:"externalsubmit-forkjointask-task"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#externalsubmit-forkjointask-task"}},[n._v("#")]),n._v(" externalSubmit(ForkJoinTask<?> task)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("//任务提交\nprivate void externalSubmit(ForkJoinTask<?> task) {\n    //初始化调用线程的探针值，用于计算WorkQueue索引\n    int r;                                    // initialize caller's probe\n    if ((r = ThreadLocalRandom.getProbe()) == 0) {\n        ThreadLocalRandom.localInit();\n        r = ThreadLocalRandom.getProbe();\n    }\n    for (; ; ) {\n        WorkQueue[] ws;\n        WorkQueue q;\n        int rs, m, k;\n        boolean move = false;\n        if ((rs = runState) < 0) {// 池已关闭\n            tryTerminate(false, false);     // help terminate\n            throw new RejectedExecutionException();\n        }\n        //初始化workQueues\n        else if ((rs & STARTED) == 0 ||     // initialize\n                ((ws = workQueues) == null || (m = ws.length - 1) < 0)) {\n            int ns = 0;\n            rs = lockRunState();//锁定runState\n            try {\n                //初始化\n                if ((rs & STARTED) == 0) {\n                    //初始化stealCounter\n                    U.compareAndSwapObject(this, STEALCOUNTER, null,\n                            new AtomicLong());\n                    //创建workQueues，容量为2的幂次方\n                    // create workQueues array with size a power of two\n                    int p = config & SMASK; // ensure at least 2 slots\n                    int n = (p > 1) ? p - 1 : 1;\n                    n |= n >>> 1;\n                    n |= n >>> 2;\n                    n |= n >>> 4;\n                    n |= n >>> 8;\n                    n |= n >>> 16;\n                    n = (n + 1) << 1;\n                    workQueues = new WorkQueue[n];\n                    ns = STARTED;\n                }\n            } finally {\n                unlockRunState(rs, (rs & ~RSLOCK) | ns);//解锁并更新runState\n            }\n        } else if ((q = ws[k = r & m & SQMASK]) != null) {//获取随机偶数槽位的workQueue\n            if (q.qlock == 0 && U.compareAndSwapInt(q, QLOCK, 0, 1)) {//锁定 workQueue\n                ForkJoinTask<?>[] a = q.array;//当前workQueue的全部任务\n                int s = q.top;\n                boolean submitted = false; // initial submission or resizing\n                try {                      // locked version of push\n                    if ((a != null && a.length > s + 1 - q.base) ||\n                            (a = q.growArray()) != null) {//扩容\n                        int j = (((a.length - 1) & s) << ASHIFT) + ABASE;\n                        U.putOrderedObject(a, j, task);//放入给定任务\n                        U.putOrderedInt(q, QTOP, s + 1);//修改push slot\n                        submitted = true;\n                    }\n                } finally {\n                    U.compareAndSwapInt(q, QLOCK, 1, 0);//解除锁定\n                }\n                if (submitted) {//任务提交成功，创建或激活工作线程\n                    signalWork(ws, q);//创建或激活一个工作线程来运行任务\n                    return;\n                }\n            }\n            move = true;                   // move on failure 操作失败，重新获取探针值\n        } else if (((rs = runState) & RSLOCK) == 0) { // create new queue\n            q = new WorkQueue(this, null);\n            q.hint = r;\n            q.config = k | SHARED_QUEUE;\n            q.scanState = INACTIVE;\n            rs = lockRunState();           // publish index\n            if (rs > 0 && (ws = workQueues) != null &&\n                    k < ws.length && ws[k] == null)\n                ws[k] = q;                 // 更新索引k位值的workQueue\n            //else terminated\n            unlockRunState(rs, rs & ~RSLOCK);\n        } else\n            move = true;                   // move if busy\n        if (move)\n            r = ThreadLocalRandom.advanceProbe(r);//重新获取线程探针值\n    }\n}\n")])])]),e("p",[n._v("说明:\nexternalSubmit是externalPush的完整版本，主要用于第一次提交任务时初始化workQueues及相关属性，并且提交给定任务到队列中。具体执行步骤如下:")]),n._v(" "),e("ul",[e("li",[n._v("如果池为终止状态(runState<0)，调用tryTerminate来终止线程池，并抛出任务拒绝异常；")]),n._v(" "),e("li",[n._v("如果尚未初始化，就为 FJP 执行初始化操作: 初始化stealCounter、创建workerQueues，然后继续自旋；")]),n._v(" "),e("li",[n._v("初始化完成后，执行在externalPush中相同的操作: 获取 workQueue，放入指定任务。任务提交成功后调用signalWork方法创建或激活线程；")]),n._v(" "),e("li",[n._v("如果在步骤3中获取到的 workQueue 为null，会在这一步中创建一个 workQueue，创建成功继续自旋执行第三步操作；")]),n._v(" "),e("li",[n._v("如果非上述情况，或者有线程争用资源导致获取锁失败，就重新获取线程探针值继续自旋。")])]),n._v(" "),e("h4",{attrs:{id:"signalwork-workqueue-ws-workqueue-q"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#signalwork-workqueue-ws-workqueue-q"}},[n._v("#")]),n._v(" signalWork(WorkQueue[] ws, WorkQueue q)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("final void signalWork(WorkQueue[] ws, WorkQueue q) {\n    long c;\n    int sp, i;\n    WorkQueue v;\n    Thread p;\n    while ((c = ctl) < 0L) {                       // too few active\n        if ((sp = (int) c) == 0) {                  // no idle workers\n            if ((c & ADD_WORKER) != 0L)            // too few workers\n                tryAddWorker(c);//工作线程太少，添加新的工作线程\n            break;\n        }\n        if (ws == null)                            // unstarted/terminated\n            break;\n        if (ws.length <= (i = sp & SMASK))         // terminated\n            break;\n        if ((v = ws[i]) == null)                   // terminating\n            break;\n        //计算ctl，加上版本戳SS_SEQ避免ABA问题\n        int vs = (sp + SS_SEQ) & ~INACTIVE;        // next scanState\n        int d = sp - v.scanState;                  // screen CAS\n        //计算活跃线程数(高32位)并更新为下一个栈顶的scanState(低32位)\n        long nc = (UC_MASK & (c + AC_UNIT)) | (SP_MASK & v.stackPred);\n        if (d == 0 && U.compareAndSwapLong(this, CTL, c, nc)) {\n            v.scanState = vs;                      // activate v\n            if ((p = v.parker) != null)\n                U.unpark(p);//唤醒阻塞线程\n            break;\n        }\n        if (q != null && q.base == q.top)          // no more work\n            break;\n    }\n}\n")])])]),e("p",[n._v("说明:\n新建或唤醒一个工作线程，在externalPush、externalSubmit、workQueue.push、scan中调用。如果还有空闲线程，则尝试唤醒索引到的\nWorkQueue 的parker线程；如果工作线程过少((ctl & ADD_WORKER) !=\n0L)，则调用tryAddWorker添加一个新的工作线程。")]),n._v(" "),e("h4",{attrs:{id:"tryaddworker-long-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tryaddworker-long-c"}},[n._v("#")]),n._v(" tryAddWorker(long c)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("private void tryAddWorker(long c) {\n    boolean add = false;\n    do {\n        long nc = ((AC_MASK & (c + AC_UNIT)) |\n                   (TC_MASK & (c + TC_UNIT)));\n        if (ctl == c) {\n            int rs, stop;                 // check if terminating\n            if ((stop = (rs = lockRunState()) & STOP) == 0)\n                add = U.compareAndSwapLong(this, CTL, c, nc);\n            unlockRunState(rs, rs & ~RSLOCK);//释放锁\n            if (stop != 0)\n                break;\n            if (add) {\n                createWorker();//创建工作线程\n                break;\n            }\n        }\n    } while (((c = ctl) & ADD_WORKER) != 0L && (int)c == 0);\n}\n")])])]),e("p",[n._v("说明: 尝试添加一个新的工作线程，首先更新ctl中的工作线程数，然后调用createWorker()创建工作线程。")]),n._v(" "),e("h4",{attrs:{id:"createworker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#createworker"}},[n._v("#")]),n._v(" createWorker()")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("private boolean createWorker() {\n    ForkJoinWorkerThreadFactory fac = factory;\n    Throwable ex = null;\n    ForkJoinWorkerThread wt = null;\n    try {\n        if (fac != null && (wt = fac.newThread(this)) != null) {\n            wt.start();\n            return true;\n        }\n    } catch (Throwable rex) {\n        ex = rex;\n    }\n    deregisterWorker(wt, ex);//线程创建失败处理\n    return false;\n}\n")])])]),e("p",[n._v("说明:\ncreateWorker首先通过线程工厂创一个新的ForkJoinWorkerThread，然后启动这个工作线程(wt.start())。如果期间发生异常，调用deregisterWorker处理线程创建失败的逻辑(deregisterWorker在后面再详细说明)。")]),n._v(" "),e("p",[n._v("ForkJoinWorkerThread 的构造函数如下:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('protected ForkJoinWorkerThread(ForkJoinPool pool) {\n    // Use a placeholder until a useful name can be set in registerWorker\n    super("aForkJoinWorkerThread");\n    this.pool = pool;\n    this.workQueue = pool.registerWorker(this);\n}\n')])])]),e("p",[n._v("可以看到 ForkJoinWorkerThread 在构造时首先调用父类 Thread\n的方法，然后为工作线程注册pool和workQueue，而workQueue的注册任务由ForkJoinPool.registerWorker来完成。")]),n._v(" "),e("h4",{attrs:{id:"registerworker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#registerworker"}},[n._v("#")]),n._v(" registerWorker()")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("final WorkQueue registerWorker(ForkJoinWorkerThread wt) {\n    UncaughtExceptionHandler handler;\n    //设置为守护线程\n    wt.setDaemon(true);                           // configure thread\n    if ((handler = ueh) != null)\n        wt.setUncaughtExceptionHandler(handler);\n    WorkQueue w = new WorkQueue(this, wt);//构造新的WorkQueue\n    int i = 0;                                    // assign a pool index\n    int mode = config & MODE_MASK;\n    int rs = lockRunState();\n    try {\n        WorkQueue[] ws;\n        int n;                    // skip if no array\n        if ((ws = workQueues) != null && (n = ws.length) > 0) {\n            //生成新建WorkQueue的索引\n            int s = indexSeed += SEED_INCREMENT;  // unlikely to collide\n            int m = n - 1;\n            i = ((s << 1) | 1) & m;               // Worker任务放在奇数索引位 odd-numbered indices\n            if (ws[i] != null) {                  // collision 已存在，重新计算索引位\n                int probes = 0;                   // step by approx half n\n                int step = (n <= 4) ? 2 : ((n >>> 1) & EVENMASK) + 2;\n                //查找可用的索引位\n                while (ws[i = (i + step) & m] != null) {\n                    if (++probes >= n) {//所有索引位都被占用，对workQueues进行扩容\n                        workQueues = ws = Arrays.copyOf(ws, n <<= 1);//workQueues 扩容\n                        m = n - 1;\n                        probes = 0;\n                    }\n                }\n            }\n            w.hint = s;                           // use as random seed\n            w.config = i | mode;\n            w.scanState = i;                      // publication fence\n            ws[i] = w;\n        }\n    } finally {\n        unlockRunState(rs, rs & ~RSLOCK);\n    }\n    wt.setName(workerNamePrefix.concat(Integer.toString(i >>> 1)));\n    return w;\n}\n")])])]),e("p",[n._v("说明: registerWorker是 ForkJoinWorkerThread 构造器的回调函数，用于创建和记录工作线程的 WorkQueue。比较简单，就不多赘述了。注意在此为工作线程创建的 WorkQueue 是放在奇数索引的(代码行: i = ((s << 1) | 1) & m;)")]),n._v(" "),e("h4",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[n._v("#")]),n._v(" 小结")]),n._v(" "),e("p",[n._v("OK，外部任务的提交流程就先讲到这里。在createWorker()中启动工作线程后(wt.start())，当为线程分配到CPU执行时间片之后会运行\nForkJoinWorkerThread 的run方法开启线程来执行任务。工作线程执行任务的流程我们在讲完内部任务提交之后会统一讲解。")]),n._v(" "),e("h3",{attrs:{id:"执行流程-子任务-worker-task-提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行流程-子任务-worker-task-提交"}},[n._v("#")]),n._v(" 执行流程: 子任务(Worker task)提交")]),n._v(" "),e("p",[n._v("子任务的提交相对比较简单，由任务的fork()方法完成。通过上面的流程图可以看到任务被分割(fork)之后调用了ForkJoinPool.WorkQueue.push()方法直接把任务放到队列中等待被执行。")]),n._v(" "),e("h4",{attrs:{id:"forkjointask-fork"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjointask-fork"}},[n._v("#")]),n._v(" ForkJoinTask.fork()")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("public final ForkJoinTask<V> fork() {\n    Thread t;\n    if ((t = Thread.currentThread()) instanceof ForkJoinWorkerThread)\n        ((ForkJoinWorkerThread)t).workQueue.push(this);\n    else\n        ForkJoinPool.common.externalPush(this);\n    return this;\n}\n")])])]),e("p",[n._v("说明: 如果当前线程是 Worker\n线程，说明当前任务是fork分割的子任务，通过ForkJoinPool.workQueue.push()方法直接把任务放到自己的等待队列中；否则调用ForkJoinPool.externalPush()提交到一个随机的等待队列中(外部任务)。")]),n._v(" "),e("h4",{attrs:{id:"forkjoinpool-workqueue-push"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool-workqueue-push"}},[n._v("#")]),n._v(" ForkJoinPool.WorkQueue.push()")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("final void push(ForkJoinTask<?> task) {\n    ForkJoinTask<?>[] a;\n    ForkJoinPool p;\n    int b = base, s = top, n;\n    if ((a = array) != null) {    // ignore if queue removed\n        int m = a.length - 1;     // fenced write for task visibility\n        U.putOrderedObject(a, ((m & s) << ASHIFT) + ABASE, task);\n        U.putOrderedInt(this, QTOP, s + 1);\n        if ((n = s - b) <= 1) {//首次提交，创建或唤醒一个工作线程\n            if ((p = pool) != null)\n                p.signalWork(p.workQueues, this);\n        } else if (n >= m)\n            growArray();\n    }\n}\n")])])]),e("p",[n._v("说明: 首先把任务放入等待队列并更新top位；如果当前 WorkQueue 为新建的等待队列(top-base<=1)，则调用signalWork方法为当前\nWorkQueue 新建或唤醒一个工作线程；如果 WorkQueue\n中的任务数组容量过小，则调用growArray()方法对其进行两倍扩容，growArray()方法源码如下:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('final ForkJoinTask<?>[] growArray() {\n    ForkJoinTask<?>[] oldA = array;//获取内部任务列表\n    int size = oldA != null ? oldA.length << 1 : INITIAL_QUEUE_CAPACITY;\n    if (size > MAXIMUM_QUEUE_CAPACITY)\n        throw new RejectedExecutionException("Queue capacity exceeded");\n    int oldMask, t, b;\n    //新建一个两倍容量的任务数组\n    ForkJoinTask<?>[] a = array = new ForkJoinTask<?>[size];\n    if (oldA != null && (oldMask = oldA.length - 1) >= 0 &&\n            (t = top) - (b = base) > 0) {\n        int mask = size - 1;\n        //从老数组中拿出数据，放到新的数组中\n        do { // emulate poll from old array, push to new array\n            ForkJoinTask<?> x;\n            int oldj = ((b & oldMask) << ASHIFT) + ABASE;\n            int j = ((b & mask) << ASHIFT) + ABASE;\n            x = (ForkJoinTask<?>) U.getObjectVolatile(oldA, oldj);\n            if (x != null &&\n                    U.compareAndSwapObject(oldA, oldj, x, null))\n                U.putObjectVolatile(a, j, x);\n        } while (++b != t);\n    }\n    return a;\n}\n')])])]),e("h4",{attrs:{id:"小结-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[n._v("#")]),n._v(" 小结")]),n._v(" "),e("p",[n._v("到此，两种任务的提交流程都已经解析完毕，下一节我们来一起看看任务提交之后是如何被运行的。")]),n._v(" "),e("h3",{attrs:{id:"执行流程-任务执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行流程-任务执行"}},[n._v("#")]),n._v(" 执行流程: 任务执行")]),n._v(" "),e("p",[n._v("回到我们开始时的流程图，在ForkJoinPool\n.createWorker()方法中创建工作线程后，会启动工作线程，系统为工作线程分配到CPU执行时间片之后会执行 ForkJoinWorkerThread\n的run()方法正式开始执行任务。")]),n._v(" "),e("h4",{attrs:{id:"forkjoinworkerthread-run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinworkerthread-run"}},[n._v("#")]),n._v(" ForkJoinWorkerThread.run()")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("public void run() {\n    if (workQueue.array == null) { // only run once\n        Throwable exception = null;\n        try {\n            onStart();//钩子方法，可自定义扩展\n            pool.runWorker(workQueue);\n        } catch (Throwable ex) {\n            exception = ex;\n        } finally {\n            try {\n                onTermination(exception);//钩子方法，可自定义扩展\n            } catch (Throwable ex) {\n                if (exception == null)\n                    exception = ex;\n            } finally {\n                pool.deregisterWorker(this, exception);//处理异常\n            }\n        }\n    }\n}\n")])])]),e("p",[n._v("说明:\n方法很简单，在工作线程运行前后会调用自定义钩子函数(onStart和onTermination)，任务的运行则是调用了ForkJoinPool.runWorker()。如果全部任务执行完毕或者期间遭遇异常，则通过ForkJoinPool.deregisterWorker关闭工作线程并处理异常信息(deregisterWorker方法我们后面会详细讲解)。")]),n._v(" "),e("h4",{attrs:{id:"forkjoinpool-runworker-workqueue-w"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool-runworker-workqueue-w"}},[n._v("#")]),n._v(" ForkJoinPool.runWorker(WorkQueue w)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("final void runWorker(WorkQueue w) {\n    w.growArray();                   // allocate queue\n    int seed = w.hint;               // initially holds randomization hint\n    int r = (seed == 0) ? 1 : seed;  // avoid 0 for xorShift\n    for (ForkJoinTask<?> t; ; ) {\n        if ((t = scan(w, r)) != null)//扫描任务执行\n            w.runTask(t);\n        else if (!awaitWork(w, r))\n            break;\n        r ^= r << 13;\n        r ^= r >>> 17;\n        r ^= r << 5; // xorshift\n    }\n}\n")])])]),e("p",[n._v("说明: runWorker是 ForkJoinWorkerThread 的主运行方法，用来依次执行当前工作线程中的任务。函数流程很简单:\n调用scan方法依次获取任务，然后调用WorkQueue\n.runTask运行任务；如果未扫描到任务，则调用awaitWork等待，直到工作线程/线程池终止或等待超时。")]),n._v(" "),e("h4",{attrs:{id:"forkjoinpool-scan-workqueue-w-int-r"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool-scan-workqueue-w-int-r"}},[n._v("#")]),n._v(" ForkJoinPool.scan(WorkQueue w, int r)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("private ForkJoinTask<?> scan(WorkQueue w, int r) {\n    WorkQueue[] ws;\n    int m;\n    if ((ws = workQueues) != null && (m = ws.length - 1) > 0 && w != null) {\n        int ss = w.scanState;                     // initially non-negative\n        //初始扫描起点，自旋扫描\n        for (int origin = r & m, k = origin, oldSum = 0, checkSum = 0; ; ) {\n            WorkQueue q;\n            ForkJoinTask<?>[] a;\n            ForkJoinTask<?> t;\n            int b, n;\n            long c;\n            if ((q = ws[k]) != null) {//获取workQueue\n                if ((n = (b = q.base) - q.top) < 0 &&\n                        (a = q.array) != null) {      // non-empty\n                    //计算偏移量\n                    long i = (((a.length - 1) & b) << ASHIFT) + ABASE;\n                    if ((t = ((ForkJoinTask<?>)\n                            U.getObjectVolatile(a, i))) != null && //取base位置任务\n                            q.base == b) {//stable\n                        if (ss >= 0) {  //scanning\n                            if (U.compareAndSwapObject(a, i, t, null)) {//\n                                q.base = b + 1;//更新base位\n                                if (n < -1)       // signal others\n                                    signalWork(ws, q);//创建或唤醒工作线程来运行任务\n                                return t;\n                            }\n                        } else if (oldSum == 0 &&   // try to activate 尝试激活工作线程\n                                w.scanState < 0)\n                            tryRelease(c = ctl, ws[m & (int) c], AC_UNIT);//唤醒栈顶工作线程\n                    }\n                    //base位置任务为空或base位置偏移，随机移位重新扫描\n                    if (ss < 0)                   // refresh\n                        ss = w.scanState;\n                    r ^= r << 1;\n                    r ^= r >>> 3;\n                    r ^= r << 10;\n                    origin = k = r & m;           // move and rescan\n                    oldSum = checkSum = 0;\n                    continue;\n                }\n                checkSum += b;//队列任务为空，记录base位\n            }\n            //更新索引k 继续向后查找\n            if ((k = (k + 1) & m) == origin) {    // continue until stable\n                //运行到这里说明已经扫描了全部的 workQueues，但并未扫描到任务\n\n                if ((ss >= 0 || (ss == (ss = w.scanState))) &&\n                        oldSum == (oldSum = checkSum)) {\n                    if (ss < 0 || w.qlock < 0)    // already inactive\n                        break;// 已经被灭活或终止,跳出循环\n\n                    //对当前WorkQueue进行灭活操作\n                    int ns = ss | INACTIVE;       // try to inactivate\n                    long nc = ((SP_MASK & ns) |\n                            (UC_MASK & ((c = ctl) - AC_UNIT)));//计算ctl为INACTIVE状态并减少活跃线程数\n                    w.stackPred = (int) c;         // hold prev stack top\n                    U.putInt(w, QSCANSTATE, ns);//修改scanState为inactive状态\n                    if (U.compareAndSwapLong(this, CTL, c, nc))//更新scanState为灭活状态\n                        ss = ns;\n                    else\n                        w.scanState = ss;         // back out\n                }\n                checkSum = 0;//重置checkSum，继续循环\n            }\n        }\n    }\n    return null;\n}\n")])])]),e("p",[n._v("说明: 扫描并尝试偷取一个任务。使用w.hint进行随机索引 WorkQueue，也就是说并不一定会执行当前 WorkQueue\n中的任务，而是偷取别的Worker的任务来执行。")]),n._v(" "),e("p",[n._v("函数的大概执行流程如下:")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("取随机位置的一个 WorkQueue；")])]),n._v(" "),e("li",[e("p",[n._v("获取base位的 ForkJoinTask，成功取到后更新base位并返回任务；如果取到的 WorkQueue 中任务数大于1，则调用signalWork创建或唤醒其他工作线程；")])]),n._v(" "),e("li",[e("p",[n._v("如果当前工作线程处于不活跃状态(INACTIVE)，则调用tryRelease尝试唤醒栈顶工作线程来执行。")])])]),n._v(" "),e("p",[n._v("tryRelease源码如下:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("    private boolean tryRelease(long c, WorkQueue v, long inc) {\n    int sp = (int) c, vs = (sp + SS_SEQ) & ~INACTIVE;\n    Thread p;\n    //ctl低32位等于scanState，说明可以唤醒parker线程\n    if (v != null && v.scanState == sp) {          // v is at top of stack\n        //计算活跃线程数(高32位)并更新为下一个栈顶的scanState(低32位)\n        long nc = (UC_MASK & (c + inc)) | (SP_MASK & v.stackPred);\n        if (U.compareAndSwapLong(this, CTL, c, nc)) {\n            v.scanState = vs;\n            if ((p = v.parker) != null)\n                U.unpark(p);//唤醒线程\n            return true;\n        }\n    }\n    return false;\n}\n")])])]),e("ul",[e("li",[e("p",[n._v("如果base位任务为空或发生偏移，则对索引位进行随机移位，然后重新扫描；")])]),n._v(" "),e("li",[e("p",[n._v("如果扫描整个workQueues之后没有获取到任务，则设置当前工作线程为INACTIVE状态；然后重置checkSum，再次扫描一圈之后如果还没有任务则跳出循环返回null。")])])]),n._v(" "),e("h4",{attrs:{id:"forkjoinpool-awaitwork-workqueue-w-int-r"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool-awaitwork-workqueue-w-int-r"}},[n._v("#")]),n._v(" ForkJoinPool.awaitWork(WorkQueue w, int r)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("private boolean awaitWork(WorkQueue w, int r) {\n    if (w == null || w.qlock < 0)                 // w is terminating\n        return false;\n    for (int pred = w.stackPred, spins = SPINS, ss; ; ) {\n        if ((ss = w.scanState) >= 0)//正在扫描，跳出循环\n            break;\n        else if (spins > 0) {\n            r ^= r << 6;\n            r ^= r >>> 21;\n            r ^= r << 7;\n            if (r >= 0 && --spins == 0) {         // randomize spins\n                WorkQueue v;\n                WorkQueue[] ws;\n                int s, j;\n                AtomicLong sc;\n                if (pred != 0 && (ws = workQueues) != null &&\n                        (j = pred & SMASK) < ws.length &&\n                        (v = ws[j]) != null &&        // see if pred parking\n                        (v.parker == null || v.scanState >= 0))\n                    spins = SPINS;                // continue spinning\n            }\n        } else if (w.qlock < 0)                     // 当前workQueue已经终止，返回false recheck after spins\n            return false;\n        else if (!Thread.interrupted()) {//判断线程是否被中断，并清除中断状态\n            long c, prevctl, parkTime, deadline;\n            int ac = (int) ((c = ctl) >> AC_SHIFT) + (config & SMASK);//活跃线程数\n            if ((ac <= 0 && tryTerminate(false, false)) || //无active线程，尝试终止\n                    (runState & STOP) != 0)           // pool terminating\n                return false;\n            if (ac <= 0 && ss == (int) c) {        // is last waiter\n                //计算活跃线程数(高32位)并更新为下一个栈顶的scanState(低32位)\n                prevctl = (UC_MASK & (c + AC_UNIT)) | (SP_MASK & pred);\n                int t = (short) (c >>> TC_SHIFT);  // shrink excess spares\n                if (t > 2 && U.compareAndSwapLong(this, CTL, c, prevctl))//总线程过量\n                    return false;                 // else use timed wait\n                //计算空闲超时时间\n                parkTime = IDLE_TIMEOUT * ((t >= 0) ? 1 : 1 - t);\n                deadline = System.nanoTime() + parkTime - TIMEOUT_SLOP;\n            } else\n                prevctl = parkTime = deadline = 0L;\n            Thread wt = Thread.currentThread();\n            U.putObject(wt, PARKBLOCKER, this);   // emulate LockSupport\n            w.parker = wt;//设置parker，准备阻塞\n            if (w.scanState < 0 && ctl == c)      // recheck before park\n                U.park(false, parkTime);//阻塞指定的时间\n\n            U.putOrderedObject(w, QPARKER, null);\n            U.putObject(wt, PARKBLOCKER, null);\n            if (w.scanState >= 0)//正在扫描，说明等到任务，跳出循环\n                break;\n            if (parkTime != 0L && ctl == c &&\n                    deadline - System.nanoTime() <= 0L &&\n                    U.compareAndSwapLong(this, CTL, c, prevctl))//未等到任务，更新ctl，返回false\n                return false;                     // shrink pool\n        }\n    }\n    return true;\n}\n")])])]),e("p",[n._v("说明: 回到runWorker方法，如果scan方法未扫描到任务，会调用awaitWork等待获取任务。函数的具体执行流程大家看源码，这里简单说一下:")]),n._v(" "),e("ul",[e("li",[n._v("在等待获取任务期间，如果工作线程或线程池已经终止则直接返回false。如果当前无 active 线程，尝试终止线程池并返回false，如果终止失败并且当前是最后一个等待的 Worker，就阻塞指定的时间(IDLE_TIMEOUT)；等到届期或被唤醒后如果发现自己是scanning(scanState >= 0)状态，说明已经等到任务，跳出等待返回true继续 scan，否则的更新ctl并返回false。")])]),n._v(" "),e("h4",{attrs:{id:"workqueue-runtask"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#workqueue-runtask"}},[n._v("#")]),n._v(" WorkQueue.runTask()")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("final void runTask(ForkJoinTask<?> task) {\n    if (task != null) {\n        scanState &= ~SCANNING; // mark as busy\n        (currentSteal = task).doExec();//更新currentSteal并执行任务\n        U.putOrderedObject(this, QCURRENTSTEAL, null); // release for GC\n        execLocalTasks();//依次执行本地任务\n        ForkJoinWorkerThread thread = owner;\n        if (++nsteals < 0)      // collect on overflow\n            transferStealCount(pool);//增加偷取任务数\n        scanState |= SCANNING;\n        if (thread != null)\n            thread.afterTopLevelExec();//执行钩子函数\n    }\n}\n")])])]),e("p",[n._v("说明: 在scan方法扫描到任务之后，调用WorkQueue.runTask()来执行获取到的任务，大概流程如下:")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("标记scanState为正在执行状态；")])]),n._v(" "),e("li",[e("p",[n._v("更新currentSteal为当前获取到的任务并执行它，任务的执行调用了ForkJoinTask.doExec()方法，源码如下:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("//ForkJoinTask.doExec()\n")])])]),e("p",[n._v("final int doExec() {\nint s; boolean completed;\nif ((s = status) >= 0) {\ntry {\ncompleted = exec();//执行我们定义的任务\n} catch (Throwable rex) {\nreturn setExceptionalCompletion(rex);\n}\nif (completed)\ns = setCompletion(NORMAL);\n}\nreturn s;\n}")])]),n._v(" "),e("li",[e("p",[n._v("调用execLocalTasks依次执行当前WorkerQueue中的任务，源码如下:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("//执行并移除所有本地任务\n")])])]),e("p",[n._v("final void execLocalTasks() {\nint b = base, m, s;\nForkJoinTask<?>[] a = array;\nif (b - (s = top - 1) <= 0 && a != null &&\n(m = a.length - 1) >= 0) {\nif ((config & FIFO_QUEUE) == 0) {//FIFO模式\nfor (ForkJoinTask<?> t; ; ) {\nif ((t = (ForkJoinTask<?>) U.getAndSetObject\n(a, ((m & s) << ASHIFT) + ABASE, null)) == null)//FIFO执行，取top任务\nbreak;\nU.putOrderedInt(this, QTOP, s);\nt.doExec();//执行\nif (base - (s = top - 1) > 0)\nbreak;\n}\n} else\npollAndExecAll();//LIFO模式执行，取base任务\n}\n}")])]),n._v(" "),e("li",[e("p",[n._v("更新偷取任务数；")])]),n._v(" "),e("li",[e("p",[n._v("还原scanState并执行钩子函数。")])])]),n._v(" "),e("h4",{attrs:{id:"forkjoinpool-deregisterworker-forkjoinworkerthread-wt-throwable-ex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool-deregisterworker-forkjoinworkerthread-wt-throwable-ex"}},[n._v("#")]),n._v(" ForkJoinPool.deregisterWorker(ForkJoinWorkerThread wt, Throwable ex)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("final void deregisterWorker(ForkJoinWorkerThread wt, Throwable ex) {\n    WorkQueue w = null;\n    //1.移除workQueue\n    if (wt != null && (w = wt.workQueue) != null) {//获取ForkJoinWorkerThread的等待队列\n        WorkQueue[] ws;                           // remove index from array\n        int idx = w.config & SMASK;//计算workQueue索引\n        int rs = lockRunState();//获取runState锁和当前池运行状态\n        if ((ws = workQueues) != null && ws.length > idx && ws[idx] == w)\n            ws[idx] = null;//移除workQueue\n        unlockRunState(rs, rs & ~RSLOCK);//解除runState锁\n    }\n    //2.减少CTL数\n    long c;                                       // decrement counts\n    do {} while (!U.compareAndSwapLong\n                 (this, CTL, c = ctl, ((AC_MASK & (c - AC_UNIT)) |\n                                       (TC_MASK & (c - TC_UNIT)) |\n                                       (SP_MASK & c))));\n    //3.处理被移除workQueue内部相关参数\n    if (w != null) {\n        w.qlock = -1;                             // ensure set\n        w.transferStealCount(this);\n        w.cancelAll();                            // cancel remaining tasks\n    }\n    //4.如果线程未终止，替换被移除的workQueue并唤醒内部线程\n    for (;;) {                                    // possibly replace\n        WorkQueue[] ws; int m, sp;\n        //尝试终止线程池\n        if (tryTerminate(false, false) || w == null || w.array == null ||\n            (runState & STOP) != 0 || (ws = workQueues) == null ||\n            (m = ws.length - 1) < 0)              // already terminating\n            break;\n        //唤醒被替换的线程，依赖于下一步\n        if ((sp = (int)(c = ctl)) != 0) {         // wake up replacement\n            if (tryRelease(c, ws[sp & m], AC_UNIT))\n                break;\n        }\n        //创建工作线程替换\n        else if (ex != null && (c & ADD_WORKER) != 0L) {\n            tryAddWorker(c);                      // create replacement\n            break;\n        }\n        else                                      // don't need replacement\n            break;\n    }\n    //5.处理异常\n    if (ex == null)                               // help clean on way out\n        ForkJoinTask.helpExpungeStaleExceptions();\n    else                                          // rethrow\n        ForkJoinTask.rethrow(ex);\n}\n")])])]),e("p",[n._v("说明:\nderegisterWorker方法用于工作线程运行完毕之后终止线程或处理工作线程异常，主要就是清除已关闭的工作线程或回滚创建线程之前的操作，并把传入的异常抛给\nForkJoinTask 来处理。具体步骤见源码注释。")]),n._v(" "),e("h4",{attrs:{id:"小结-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结-3"}},[n._v("#")]),n._v(" 小结")]),n._v(" "),e("p",[n._v("本节我们对任务的执行流程进行了说明，后面我们将继续介绍任务的结果获取(join/invoke)。")]),n._v(" "),e("h3",{attrs:{id:"获取任务结果-forkjointask-join-forkjointask-invoke"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取任务结果-forkjointask-join-forkjointask-invoke"}},[n._v("#")]),n._v(" 获取任务结果 - ForkJoinTask.join() / ForkJoinTask.invoke()")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("join() :")]),n._v(" "),e("p",[n._v("//合并任务结果\npublic final V join() {\nint s;\nif ((s = doJoin() & DONE_MASK) != NORMAL)\nreportException(s);\nreturn getRawResult();\n}")]),n._v(" "),e("p",[n._v("//join, get, quietlyJoin的主实现方法\nprivate int doJoin() {\nint s; Thread t; ForkJoinWorkerThread wt; ForkJoinPool.WorkQueue w;\nreturn (s = status) < 0 ? s :\n((t = Thread.currentThread()) instanceof ForkJoinWorkerThread) ?\n(w = (wt = (ForkJoinWorkerThread)t).workQueue).\ntryUnpush(this) && (s = doExec()) < 0 ? s :\nwt.pool.awaitJoin(w, this, 0L) :\nexternalAwaitDone();\n}")])]),n._v(" "),e("li",[e("p",[n._v("invoke() :")]),n._v(" "),e("p",[n._v("//执行任务，并等待任务完成并返回结果\npublic final V invoke() {\nint s;\nif ((s = doInvoke() & DONE_MASK) != NORMAL)\nreportException(s);\nreturn getRawResult();\n}")]),n._v(" "),e("p",[n._v("//invoke, quietlyInvoke的主实现方法\nprivate int doInvoke() {\nint s; Thread t; ForkJoinWorkerThread wt;\nreturn (s = doExec()) < 0 ? s :\n((t = Thread.currentThread()) instanceof ForkJoinWorkerThread) ?\n(wt = (ForkJoinWorkerThread)t).pool.\nawaitJoin(wt.workQueue, this, 0L) :\nexternalAwaitDone();\n}")])])]),n._v(" "),e("p",[n._v("说明: join()方法一把是在任务fork()之后调用，用来获取(或者叫“合并”)任务的执行结果。")]),n._v(" "),e("p",[n._v("ForkJoinTask的join()和invoke()方法都可以用来获取任务的执行结果(另外还有get方法也是调用了doJoin来获取任务结果，但是会响应运行时异常)，它们对外部提交任务的执行方式一致，都是通过externalAwaitDone方法等待执行结果。不同的是invoke()方法会直接执行当前任务；而join()方法则是在当前任务在队列\ntop 位时(通过tryUnpush方法判断)才能执行，如果当前任务不在 top\n位或者任务执行失败调用ForkJoinPool.awaitJoin方法帮助执行或阻塞当前 join\n任务。(所以在官方文档中建议了我们对ForkJoinTask任务的调用顺序，一对 fork-join操作一般按照如下顺序调用: a.fork();\nb.fork(); b.join(); a.join();。因为任务 b 是后面进入队列，也就是说它是在栈顶的(top\n位)，在它fork()之后直接调用join()就可以直接执行而不会调用ForkJoinPool.awaitJoin方法去等待。)")]),n._v(" "),e("p",[n._v("在这些方法中，join()相对比较全面，所以之后的讲解我们将从join()开始逐步向下分析，首先看一下join()的执行流程:")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/java-thread-x-forkjoin-6.png",alt:"img"}})]),n._v(" "),e("p",[n._v("后面的源码分析中，我们首先讲解比较简单的外部 join 任务(externalAwaitDone)，然后再讲解内部 join\n任务(从ForkJoinPool.awaitJoin()开始)。")]),n._v(" "),e("h4",{attrs:{id:"forkjointask-externalawaitdone"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjointask-externalawaitdone"}},[n._v("#")]),n._v(" ForkJoinTask.externalAwaitDone()")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("private int externalAwaitDone() {\n    //执行任务\n    int s = ((this instanceof CountedCompleter) ? // try helping\n             ForkJoinPool.common.externalHelpComplete(  // CountedCompleter任务\n                 (CountedCompleter<?>)this, 0) :\n             ForkJoinPool.common.tryExternalUnpush(this) ? doExec() : 0);  // ForkJoinTask任务\n    if (s >= 0 && (s = status) >= 0) {//执行失败，进入等待\n        boolean interrupted = false;\n        do {\n            if (U.compareAndSwapInt(this, STATUS, s, s | SIGNAL)) {  //更新state\n                synchronized (this) {\n                    if (status >= 0) {//SIGNAL 等待信号\n                        try {\n                            wait(0L);\n                        } catch (InterruptedException ie) {\n                            interrupted = true;\n                        }\n                    }\n                    else\n                        notifyAll();\n                }\n            }\n        } while ((s = status) >= 0);\n        if (interrupted)\n            Thread.currentThread().interrupt();\n    }\n    return s;\n}\n")])])]),e("p",[n._v("说明: 如果当前join为外部调用，则调用此方法执行任务，如果任务执行失败就进入等待。方法本身是很简单的，需要注意的是对不同的任务类型分两种情况:")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("如果我们的任务为 CountedCompleter 类型的任务，则调用externalHelpComplete方法来执行任务。")])]),n._v(" "),e("li",[e("p",[n._v("其他类型的 ForkJoinTask 任务调用tryExternalUnpush来执行，源码如下:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("//为外部提交者提供 tryUnpush 功能(给定任务在top位时弹出任务)\n")])])]),e("p",[n._v("final boolean tryExternalUnpush(ForkJoinTask<?> task) {\nWorkQueue[] ws;\nWorkQueue w;\nForkJoinTask<?>[] a;\nint m, s;\nint r = ThreadLocalRandom.getProbe();\nif ((ws = workQueues) != null && (m = ws.length - 1) >= 0 &&\n(w = ws[m & r & SQMASK]) != null &&\n(a = w.array) != null && (s = w.top) != w.base) {\nlong j = (((a.length - 1) & (s - 1)) << ASHIFT) + ABASE;  //取top位任务\nif (U.compareAndSwapInt(w, QLOCK, 0, 1)) {  //加锁\nif (w.top == s && w.array == a &&\nU.getObject(a, j) == task &&\nU.compareAndSwapObject(a, j, task, null)) {  //符合条件，弹出\nU.putOrderedInt(w, QTOP, s - 1);  //更新top\nU.putOrderedInt(w, QLOCK, 0); //解锁，返回true\nreturn true;\n}\nU.compareAndSwapInt(w, QLOCK, 1, 0);  //当前任务不在top位，解锁返回false\n}\n}\nreturn false;\n}")])])]),n._v(" "),e("p",[n._v("tryExternalUnpush的作用就是判断当前任务是否在top位，如果是则弹出任务，然后在externalAwaitDone中调用doExec()执行任务。")]),n._v(" "),e("h4",{attrs:{id:"forkjoinpool-awaitjoin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool-awaitjoin"}},[n._v("#")]),n._v(" ForkJoinPool.awaitJoin()")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("final int awaitJoin(WorkQueue w, ForkJoinTask<?> task, long deadline) {\n    int s = 0;\n    if (task != null && w != null) {\n        ForkJoinTask<?> prevJoin = w.currentJoin;  //获取给定Worker的join任务\n        U.putOrderedObject(w, QCURRENTJOIN, task);  //把currentJoin替换为给定任务\n        //判断是否为CountedCompleter类型的任务\n        CountedCompleter<?> cc = (task instanceof CountedCompleter) ?\n                (CountedCompleter<?>) task : null;\n        for (; ; ) {\n            if ((s = task.status) < 0)  //已经完成|取消|异常 跳出循环\n                break;\n\n            if (cc != null)//CountedCompleter任务由helpComplete来完成join\n                helpComplete(w, cc, 0);\n            else if (w.base == w.top || w.tryRemoveAndExec(task))  //尝试执行\n                helpStealer(w, task);  //队列为空或执行失败，任务可能被偷，帮助偷取者执行该任务\n\n            if ((s = task.status) < 0) //已经完成|取消|异常，跳出循环\n                break;\n            //计算任务等待时间\n            long ms, ns;\n            if (deadline == 0L)\n                ms = 0L;\n            else if ((ns = deadline - System.nanoTime()) <= 0L)\n                break;\n            else if ((ms = TimeUnit.NANOSECONDS.toMillis(ns)) <= 0L)\n                ms = 1L;\n\n            if (tryCompensate(w)) {//执行补偿操作\n                task.internalWait(ms);//补偿执行成功，任务等待指定时间\n                U.getAndAddLong(this, CTL, AC_UNIT);//更新活跃线程数\n            }\n        }\n        U.putOrderedObject(w, QCURRENTJOIN, prevJoin);//循环结束，替换为原来的join任务\n    }\n    return s;\n}\n")])])]),e("p",[n._v("说明: 如果当前 join 任务不在Worker等待队列的top位，或者任务执行失败，调用此方法来帮助执行或阻塞当前 join 的任务。函数执行流程如下:")]),n._v(" "),e("ul",[e("li",[n._v("由于每次调用awaitJoin都会优先执行当前join的任务，所以首先会更新currentJoin为当前join任务；")]),n._v(" "),e("li",[n._v("进入自旋:\n"),e("ul",[e("li",[e("p",[n._v("首先检查任务是否已经完成(通过task.status < 0判断)，如果给定任务执行完毕|取消|异常 则跳出循环返回执行状态s；")])]),n._v(" "),e("li",[e("p",[n._v("如果是 CountedCompleter 任务类型，调用helpComplete方法来完成join操作(后面笔者会开新篇来专门讲解CountedCompleter，本篇暂时不做详细解析)；")])]),n._v(" "),e("li",[e("p",[n._v("非 CountedCompleter 任务类型调用WorkQueue.tryRemoveAndExec尝试执行任务；")])]),n._v(" "),e("li",[e("p",[n._v("如果给定 WorkQueue 的等待队列为空或任务执行失败，说明任务可能被偷，调用helpStealer帮助偷取者执行任务(也就是说，偷取者帮我执行任务，我去帮偷取者执行它的任务)；")])]),n._v(" "),e("li",[e("p",[n._v("再次判断任务是否执行完毕(task.status < 0)，如果任务执行失败，计算一个等待时间准备进行补偿操作；")])]),n._v(" "),e("li",[e("p",[n._v("调用tryCompensate方法为给定 WorkQueue 尝试执行补偿操作。在执行补偿期间，如果发现 资源争用|池处于unstable状态|当前Worker已终止，则调用ForkJoinTask.internalWait()方法等待指定的时间，任务唤醒之后继续自旋，ForkJoinTask.internalWait()源码如下:")]),n._v(" "),e("p",[n._v("final void internalWait(long timeout) {\nint s;\nif ((s = status) >= 0 && // force completer to issue notify\nU.compareAndSwapInt(this, STATUS, s, s | SIGNAL)) {//更新任务状态为SIGNAL(等待唤醒)\nsynchronized (this) {\nif (status >= 0)\ntry { wait(timeout); } catch (InterruptedException ie) { }\nelse\nnotifyAll();\n}\n}\n}")])])])])]),n._v(" "),e("p",[n._v("在awaitJoin中，我们总共调用了三个比较复杂的方法:\ntryRemoveAndExec、helpStealer和tryCompensate，下面我们依次讲解。")]),n._v(" "),e("h4",{attrs:{id:"workqueue-tryremoveandexec-forkjointask-task"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#workqueue-tryremoveandexec-forkjointask-task"}},[n._v("#")]),n._v(" WorkQueue.tryRemoveAndExec(ForkJoinTask<?> task)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("final boolean tryRemoveAndExec(ForkJoinTask<?> task) {\n    ForkJoinTask<?>[] a;\n    int m, s, b, n;\n    if ((a = array) != null && (m = a.length - 1) >= 0 &&\n            task != null) {\n        while ((n = (s = top) - (b = base)) > 0) {\n            //从top往下自旋查找\n            for (ForkJoinTask<?> t; ; ) {      // traverse from s to b\n                long j = ((--s & m) << ASHIFT) + ABASE;//计算任务索引\n                if ((t = (ForkJoinTask<?>) U.getObject(a, j)) == null) //获取索引到的任务\n                    return s + 1 == top;     // shorter than expected\n                else if (t == task) { //给定任务为索引任务\n                    boolean removed = false;\n                    if (s + 1 == top) {      // pop\n                        if (U.compareAndSwapObject(a, j, task, null)) { //弹出任务\n                            U.putOrderedInt(this, QTOP, s); //更新top\n                            removed = true;\n                        }\n                    } else if (base == b)      // replace with proxy\n                        removed = U.compareAndSwapObject(\n                                a, j, task, new EmptyTask()); //join任务已经被移除，替换为一个占位任务\n                    if (removed)\n                        task.doExec(); //执行\n                    break;\n                } else if (t.status < 0 && s + 1 == top) { //给定任务不是top任务\n                    if (U.compareAndSwapObject(a, j, t, null)) //弹出任务\n                        U.putOrderedInt(this, QTOP, s);//更新top\n                    break;                  // was cancelled\n                }\n                if (--n == 0) //遍历结束\n                    return false;\n            }\n            if (task.status < 0) //任务执行完毕\n                return false;\n        }\n    }\n    return true;\n}\n")])])]),e("p",[n._v("说明: 从top位开始自旋向下找到给定任务，如果找到把它从当前 Worker 的任务队列中移除并执行它。注意返回的参数:\n如果任务队列为空或者任务未执行完毕返回true；任务执行完毕返回false。")]),n._v(" "),e("h4",{attrs:{id:"forkjoinpool-helpstealer-workqueue-w-forkjointask-task"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool-helpstealer-workqueue-w-forkjointask-task"}},[n._v("#")]),n._v(" ForkJoinPool.helpStealer(WorkQueue w, ForkJoinTask<?> task)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("private void helpStealer(WorkQueue w, ForkJoinTask<?> task) {\n    WorkQueue[] ws = workQueues;\n    int oldSum = 0, checkSum, m;\n    if (ws != null && (m = ws.length - 1) >= 0 && w != null &&\n            task != null) {\n        do {                                       // restart point\n            checkSum = 0;                          // for stability check\n            ForkJoinTask<?> subtask;\n            WorkQueue j = w, v;                    // v is subtask stealer\n            descent:\n            for (subtask = task; subtask.status >= 0; ) {\n                //1. 找到给定WorkQueue的偷取者v\n                for (int h = j.hint | 1, k = 0, i; ; k += 2) {//跳两个索引，因为Worker在奇数索引位\n                    if (k > m)                     // can't find stealer\n                        break descent;\n                    if ((v = ws[i = (h + k) & m]) != null) {\n                        if (v.currentSteal == subtask) {//定位到偷取者\n                            j.hint = i;//更新stealer索引\n                            break;\n                        }\n                        checkSum += v.base;\n                    }\n                }\n                //2. 帮助偷取者v执行任务\n                for (; ; ) {                         // help v or descend\n                    ForkJoinTask<?>[] a;            //偷取者内部的任务\n                    int b;\n                    checkSum += (b = v.base);\n                    ForkJoinTask<?> next = v.currentJoin;//获取偷取者的join任务\n                    if (subtask.status < 0 || j.currentJoin != subtask ||\n                            v.currentSteal != subtask) // stale\n                        break descent; // stale，跳出descent循环重来\n                    if (b - v.top >= 0 || (a = v.array) == null) {\n                        if ((subtask = next) == null)   //偷取者的join任务为null，跳出descent循环\n                            break descent;\n                        j = v;\n                        break; //偷取者内部任务为空，可能任务也被偷走了；跳出本次循环，查找偷取者的偷取者\n                    }\n                    int i = (((a.length - 1) & b) << ASHIFT) + ABASE;//获取base偏移地址\n                    ForkJoinTask<?> t = ((ForkJoinTask<?>)\n                            U.getObjectVolatile(a, i));//获取偷取者的base任务\n                    if (v.base == b) {\n                        if (t == null)             // stale\n                            break descent; // stale，跳出descent循环重来\n                        if (U.compareAndSwapObject(a, i, t, null)) {//弹出任务\n                            v.base = b + 1;         //更新偷取者的base位\n                            ForkJoinTask<?> ps = w.currentSteal;//获取调用者偷来的任务\n                            int top = w.top;\n                            //首先更新给定workQueue的currentSteal为偷取者的base任务，然后执行该任务\n                            //然后通过检查top来判断给定workQueue是否有自己的任务，如果有，\n                            // 则依次弹出任务(LIFO)->更新currentSteal->执行该任务(注意这里是自己偷自己的任务执行)\n                            do {\n                                U.putOrderedObject(w, QCURRENTSTEAL, t);\n                                t.doExec();        // clear local tasks too\n                            } while (task.status >= 0 &&\n                                    w.top != top && //内部有自己的任务，依次弹出执行\n                                    (t = w.pop()) != null);\n                            U.putOrderedObject(w, QCURRENTSTEAL, ps);//还原给定workQueue的currentSteal\n                            if (w.base != w.top)//给定workQueue有自己的任务了，帮助结束，返回\n                                return;            // can't further help\n                        }\n                    }\n                }\n            }\n        } while (task.status >= 0 && oldSum != (oldSum = checkSum));\n    }\n}\n")])])]),e("p",[n._v("说明: 如果队列为空或任务执行失败，说明任务可能被偷，调用此方法来帮助偷取者执行任务。基本思想是: 偷取者帮助我执行任务，我去帮助偷取者执行它的任务。\n函数执行流程如下:")]),n._v(" "),e("p",[n._v("循环定位偷取者，由于Worker是在奇数索引位，所以每次会跳两个索引位。定位到偷取者之后，更新调用者 WorkQueue\n的hint为偷取者的索引，方便下次定位；\n定位到偷取者后，开始帮助偷取者执行任务。从偷取者的base索引开始，每次偷取一个任务执行。在帮助偷取者执行任务后，如果调用者发现本身已经有任务(w.top\n!= top)，则依次弹出自己的任务(LIFO顺序)并执行(也就是说自己偷自己的任务执行)。")]),n._v(" "),e("h4",{attrs:{id:"forkjoinpool-trycompensate-workqueue-w"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool-trycompensate-workqueue-w"}},[n._v("#")]),n._v(" ForkJoinPool.tryCompensate(WorkQueue w)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('//执行补偿操作: 尝试缩减活动线程量，可能释放或创建一个补偿线程来准备阻塞\nprivate boolean tryCompensate(WorkQueue w) {\n    boolean canBlock;\n    WorkQueue[] ws;\n    long c;\n    int m, pc, sp;\n    if (w == null || w.qlock < 0 ||           // caller terminating\n            (ws = workQueues) == null || (m = ws.length - 1) <= 0 ||\n            (pc = config & SMASK) == 0)           // parallelism disabled\n        canBlock = false; //调用者已终止\n    else if ((sp = (int) (c = ctl)) != 0)      // release idle worker\n        canBlock = tryRelease(c, ws[sp & m], 0L);//唤醒等待的工作线程\n    else {//没有空闲线程\n        int ac = (int) (c >> AC_SHIFT) + pc; //活跃线程数\n        int tc = (short) (c >> TC_SHIFT) + pc;//总线程数\n        int nbusy = 0;                        // validate saturation\n        for (int i = 0; i <= m; ++i) {        // two passes of odd indices\n            WorkQueue v;\n            if ((v = ws[((i << 1) | 1) & m]) != null) {//取奇数索引位\n                if ((v.scanState & SCANNING) != 0)//没有正在运行任务，跳出\n                    break;\n                ++nbusy;//正在运行任务，添加标记\n            }\n        }\n        if (nbusy != (tc << 1) || ctl != c)\n            canBlock = false;                 // unstable or stale\n        else if (tc >= pc && ac > 1 && w.isEmpty()) {//总线程数大于并行度 && 活动线程数大于1 && 调用者任务队列为空，不需要补偿\n            long nc = ((AC_MASK & (c - AC_UNIT)) |\n                    (~AC_MASK & c));       // uncompensated\n            canBlock = U.compareAndSwapLong(this, CTL, c, nc);//更新活跃线程数\n        } else if (tc >= MAX_CAP ||\n                (this == common && tc >= pc + commonMaxSpares))//超出最大线程数\n            throw new RejectedExecutionException(\n                    "Thread limit exceeded replacing blocked worker");\n        else {                                // similar to tryAddWorker\n            boolean add = false;\n            int rs;      // CAS within lock\n            long nc = ((AC_MASK & c) |\n                    (TC_MASK & (c + TC_UNIT)));//计算总线程数\n            if (((rs = lockRunState()) & STOP) == 0)\n                add = U.compareAndSwapLong(this, CTL, c, nc);//更新总线程数\n            unlockRunState(rs, rs & ~RSLOCK);\n            //运行到这里说明活跃工作线程数不足，需要创建一个新的工作线程来补偿\n            canBlock = add && createWorker(); // throws on exception\n        }\n    }\n    return canBlock;\n}\n')])])]),e("p",[n._v("说明: 具体的执行看源码及注释，这里我们简单总结一下需要和不需要补偿的几种情况:")]),n._v(" "),e("p",[e("strong",[n._v("需要补偿")]),n._v(" :")]),n._v(" "),e("ul",[e("li",[n._v("调用者队列不为空，并且有空闲工作线程，这种情况会唤醒空闲线程(调用tryRelease方法)")]),n._v(" "),e("li",[n._v("池尚未停止，活跃线程数不足，这时会新建一个工作线程(调用createWorker方法)")])]),n._v(" "),e("p",[e("strong",[n._v("不需要补偿")]),n._v(" :")]),n._v(" "),e("ul",[e("li",[n._v("调用者已终止或池处于不稳定状态")]),n._v(" "),e("li",[n._v("总线程数大于并行度 && 活动线程数大于1 && 调用者任务队列为空")])]),n._v(" "),e("h2",{attrs:{id:"fork-join的陷阱与注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fork-join的陷阱与注意事项"}},[n._v("#")]),n._v(" Fork/Join的陷阱与注意事项")]),n._v(" "),e("p",[n._v("使用Fork/Join框架时，需要注意一些陷阱, 在下面 "),e("code",[n._v("斐波那契数列")]),n._v("例子中你将看到示例:")]),n._v(" "),e("h3",{attrs:{id:"避免不必要的fork"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#避免不必要的fork"}},[n._v("#")]),n._v(" 避免不必要的fork()")]),n._v(" "),e("p",[n._v("划分成两个子任务后，不要同时调用两个子任务的fork()方法。")]),n._v(" "),e("p",[n._v("表面上看上去两个子任务都fork()，然后join()两次似乎更自然。但事实证明，直接调用compute()效率更高。因为直接调用子任务的compute()方法实际上就是在当前的工作线程进行了计算(线程重用)，这比“将子任务提交到工作队列，线程又从工作队列中拿任务”快得多。")]),n._v(" "),e("blockquote",[e("p",[n._v("当一个大任务被划分成两个以上的子任务时，尽可能使用前面说到的三个衍生的invokeAll方法，因为使用它们能避免不必要的fork()。")])]),n._v(" "),e("h3",{attrs:{id:"注意fork-、compute-、join-的顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意fork-、compute-、join-的顺序"}},[n._v("#")]),n._v(" 注意fork()、compute()、join()的顺序")]),n._v(" "),e("p",[n._v("为了两个任务并行，三个方法的调用顺序需要万分注意。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("right.fork(); // 计算右边的任务\nlong leftAns = left.compute(); // 计算左边的任务(同时右边任务也在计算)\nlong rightAns = right.join(); // 等待右边的结果\nreturn leftAns + rightAns;\n")])])]),e("p",[n._v("如果我们写成:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("left.fork(); // 计算完左边的任务\nlong leftAns = left.join(); // 等待左边的计算结果\nlong rightAns = right.compute(); // 再计算右边的任务\nreturn leftAns + rightAns;\n")])])]),e("p",[n._v("或者")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("long rightAns = right.compute(); // 计算完右边的任务\nleft.fork(); // 再计算左边的任务\nlong leftAns = left.join(); // 等待左边的计算结果\nreturn leftAns + rightAns;\n")])])]),e("p",[n._v("这两种实际上都没有并行。")]),n._v(" "),e("h3",{attrs:{id:"选择合适的子任务粒度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择合适的子任务粒度"}},[n._v("#")]),n._v(" 选择合适的子任务粒度")]),n._v(" "),e("p",[n._v("选择划分子任务的粒度(顺序执行的阈值)很重要，因为使用Fork/Join框架并不一定比顺序执行任务的效率高:\n如果任务太大，则无法提高并行的吞吐量；如果任务太小，子任务的调度开销可能会大于并行计算的性能提升，我们还要考虑创建子任务、fork()子任务、线程调度以及合并子任务处理结果的耗时以及相应的内存消耗。")]),n._v(" "),e("p",[n._v("官方文档给出的粗略经验是:\n任务应该执行"),e("code",[n._v("100~10000")]),n._v("个基本的计算步骤。决定子任务的粒度的最好办法是实践，通过实际测试结果来确定这个阈值才是“上上策”。")]),n._v(" "),e("blockquote",[e("p",[n._v("和其他Java代码一样，Fork/Join框架测试时需要“预热”或者说执行几遍才会被JIT(Just-in-\ntime)编译器优化，所以测试性能之前跑几遍程序很重要。")])]),n._v(" "),e("h3",{attrs:{id:"避免重量级任务划分与结果合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#避免重量级任务划分与结果合并"}},[n._v("#")]),n._v(" 避免重量级任务划分与结果合并")]),n._v(" "),e("p",[n._v("Fork/Join的很多使用场景都用到数组或者List等数据结构，子任务在某个分区中运行，最典型的例子如并行排序和并行查找。拆分子任务以及合并处理结果的时候，应该尽量避免System.arraycopy这样耗时耗空间的操作，从而最小化任务的处理开销。")]),n._v(" "),e("h2",{attrs:{id:"再深入理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#再深入理解"}},[n._v("#")]),n._v(" 再深入理解")]),n._v(" "),e("h3",{attrs:{id:"有哪些jdk源码中使用了fork-join思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有哪些jdk源码中使用了fork-join思想"}},[n._v("#")]),n._v(" 有哪些JDK源码中使用了Fork/Join思想?")]),n._v(" "),e("p",[n._v("我们常用的数组工具类 Arrays 在JDK 8之后新增的并行排序方法(parallelSort)就运用了 ForkJoinPool 的特性，还有\nConcurrentHashMap 在JDK 8之后添加的函数式方法(如forEach等)也有运用。")]),n._v(" "),e("h3",{attrs:{id:"使用executors工具类创建forkjoinpool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用executors工具类创建forkjoinpool"}},[n._v("#")]),n._v(" 使用Executors工具类创建ForkJoinPool")]),n._v(" "),e("p",[n._v("Java8在Executors工具类中新增了两个工厂方法:")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("// parallelism定义并行级别\npublic static ExecutorService newWorkStealingPool(int parallelism);\n// 默认并行级别为JVM可用的处理器个数\n// Runtime.getRuntime().availableProcessors()\npublic static ExecutorService newWorkStealingPool();\n")])])]),e("h3",{attrs:{id:"关于fork-join异常处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于fork-join异常处理"}},[n._v("#")]),n._v(" 关于Fork/Join异常处理")]),n._v(" "),e("p",[n._v("Java的受检异常机制一直饱受诟病，所以在ForkJoinTask的invoke()、join()方法及其衍生方法中都没有像get()方法那样抛出个ExecutionException的受检异常。")]),n._v(" "),e("p",[n._v("所以你可以在ForkJoinTask中看到内部把受检异常转换成了运行时异常。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('static void rethrow(Throwable ex) {\n    if (ex != null)\n        ForkJoinTask.<RuntimeException>uncheckedThrow(ex);\n}\n\n@SuppressWarnings("unchecked")\nstatic <T extends Throwable> void uncheckedThrow(Throwable t) throws T {\n    throw (T)t; // rely on vacuous cast\n}\n')])])]),e("p",[n._v("关于Java你不知道的10件事中已经指出，JVM实际并不关心这个异常是受检异常还是运行时异常，受检异常这东西完全是给Java编译器用的:\n用于警告程序员这里有个异常没有处理。")]),n._v(" "),e("p",[n._v("但不可否认的是invoke、join()仍可能会抛出运行时异常，所以ForkJoinTask还提供了两个不提取结果和异常的方法quietlyInvoke()、quietlyJoin()，这两个方法允许你在所有任务完成后对结果和异常进行处理。")]),n._v(" "),e("p",[n._v("使用quitelyInvoke()和quietlyJoin()时可以配合isCompletedAbnormally()和isCompletedNormally()方法使用。")]),n._v(" "),e("h2",{attrs:{id:"一些fork-join例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一些fork-join例子"}},[n._v("#")]),n._v(" 一些Fork/Join例子")]),n._v(" "),e("h3",{attrs:{id:"采用fork-join来异步计算1-2-3-10000的结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#采用fork-join来异步计算1-2-3-10000的结果"}},[n._v("#")]),n._v(" 采用Fork/Join来异步计算1+2+3+…+10000的结果")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('public class Test {\n    static final class SumTask extends RecursiveTask<Integer> {\n        private static final long serialVersionUID = 1L;\n        \n        final int start; //开始计算的数\n        final int end; //最后计算的数\n        \n        SumTask(int start, int end) {\n            this.start = start;\n            this.end = end;\n        }\n\n        @Override\n        protected Integer compute() {\n            //如果计算量小于1000，那么分配一个线程执行if中的代码块，并返回执行结果\n            if(end - start < 1000) {\n                System.out.println(Thread.currentThread().getName() + " 开始执行: " + start + "-" + end);\n                int sum = 0;\n                for(int i = start; i <= end; i++)\n                    sum += i;\n                return sum;\n            }\n            //如果计算量大于1000，那么拆分为两个任务\n            SumTask task1 = new SumTask(start, (start + end) / 2);\n            SumTask task2 = new SumTask((start + end) / 2 + 1, end);\n            //执行任务\n            task1.fork();\n            task2.fork();\n            //获取任务执行的结果\n            return task1.join() + task2.join();\n        }\n    }\n    \n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        ForkJoinPool pool = new ForkJoinPool();\n        ForkJoinTask<Integer> task = new SumTask(1, 10000);\n        pool.submit(task);\n        System.out.println(task.get());\n    }\n}\n')])])]),e("ul",[e("li",[e("p",[n._v("执行结果")]),n._v(" "),e("p",[n._v("ForkJoinPool-1-worker-1 开始执行: 1-625\nForkJoinPool-1-worker-7 开始执行: 6251-6875\nForkJoinPool-1-worker-6 开始执行: 5626-6250\nForkJoinPool-1-worker-10 开始执行: 3751-4375\nForkJoinPool-1-worker-13 开始执行: 2501-3125\nForkJoinPool-1-worker-8 开始执行: 626-1250\nForkJoinPool-1-worker-11 开始执行: 5001-5625\nForkJoinPool-1-worker-3 开始执行: 7501-8125\nForkJoinPool-1-worker-14 开始执行: 1251-1875\nForkJoinPool-1-worker-4 开始执行: 9376-10000\nForkJoinPool-1-worker-8 开始执行: 8126-8750\nForkJoinPool-1-worker-0 开始执行: 1876-2500\nForkJoinPool-1-worker-12 开始执行: 4376-5000\nForkJoinPool-1-worker-5 开始执行: 8751-9375\nForkJoinPool-1-worker-7 开始执行: 6876-7500\nForkJoinPool-1-worker-1 开始执行: 3126-3750\n50005000")])])]),n._v(" "),e("h3",{attrs:{id:"实现斐波那契数列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现斐波那契数列"}},[n._v("#")]),n._v(" 实现斐波那契数列")]),n._v(" "),e("blockquote",[e("p",[n._v("斐波那契数列: 1、1、2、3、5、8、13、21、34、…… 公式 : F(1)=1，F(2)=1,\nF(n)=F(n-1)+F(n-2)(n>=3，n∈N*)")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('public static void main(String[] args) {\n    ForkJoinPool forkJoinPool = new ForkJoinPool(4); // 最大并发数4\n    Fibonacci fibonacci = new Fibonacci(20);\n    long startTime = System.currentTimeMillis();\n    Integer result = forkJoinPool.invoke(fibonacci);\n    long endTime = System.currentTimeMillis();\n    System.out.println("Fork/join sum: " + result + " in " + (endTime - startTime) + " ms.");\n}\n//以下为官方API文档示例\nstatic  class Fibonacci extends RecursiveTask<Integer> {\n    final int n;\n    Fibonacci(int n) {\n        this.n = n;\n    }\n    @Override\n    protected Integer compute() {\n        if (n <= 1) {\n            return n;\n        }\n        Fibonacci f1 = new Fibonacci(n - 1);\n        f1.fork(); \n        Fibonacci f2 = new Fibonacci(n - 2);\n        return f2.compute() + f1.join(); \n    }\n}\n')])])]),e("p",[n._v("当然你也可以两个任务都fork，要注意的是两个任务都fork的情况，必须按照f1.fork()，f2.fork()，\nf2.join()，f1.join()这样的顺序，不然有性能问题，详见上面注意事项中的说明。")]),n._v(" "),e("p",[n._v("官方API文档是这样写到的，所以平日用invokeAll就好了。invokeAll会把传入的任务的第一个交给当前线程来执行，其他的任务都fork加入工作队列，这样等于利用当前线程也执行任务了。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("{\n    // ...\n    Fibonacci f1 = new Fibonacci(n - 1);\n    Fibonacci f2 = new Fibonacci(n - 2);\n    invokeAll(f1,f2);\n    return f2.join() + f1.join();\n}\n\npublic static void invokeAll(ForkJoinTask<?>... tasks) {\n    Throwable ex = null;\n    int last = tasks.length - 1;\n    for (int i = last; i >= 0; --i) {\n        ForkJoinTask<?> t = tasks[i];\n        if (t == null) {\n            if (ex == null)\n                ex = new NullPointerException();\n        }\n        else if (i != 0)   //除了第一个都fork\n            t.fork();\n        else if (t.doInvoke() < NORMAL && ex == null)  //留一个自己执行\n            ex = t.getException();\n    }\n    for (int i = 1; i <= last; ++i) {\n        ForkJoinTask<?> t = tasks[i];\n        if (t != null) {\n            if (ex != null)\n                t.cancel(false);\n            else if (t.doJoin() < NORMAL)\n                ex = t.getException();\n        }\n    }\n    if (ex != null)\n        rethrow(ex);\n}\n")])])]),e("h2",{attrs:{id:"参考文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[n._v("#")]),n._v(" 参考文章")]),n._v(" "),e("ul",[e("li",[n._v("首先推荐阅读ForkJoinPool的作者Doug Lea的一篇文章《A Java Fork/Join Framework》"),e("a",{attrs:{href:"http://gee.cs.oswego.edu/dl/papers/fj.pdf",target:"_blank",rel:"noopener noreferrer"}},[n._v("英文原文地址在新窗口打开"),e("OutboundLink")],1)]),n._v(" "),e("li",[n._v("本文主要参考自泰迪的bagwell的https://www.jianshu.com/p/32a15ef2f1bf和https://www.jianshu.com/p/6a14d0b54b8d，在此基础上参考了如下文章")]),n._v(" "),e("li",[n._v("https://blog.csdn.net/u010841296/article/details/83963637")]),n._v(" "),e("li",[n._v("https://blog.csdn.net/Holmofy/article/details/82714665")]),n._v(" "),e("li",[n._v("https://blog.csdn.net/abc123lzf/article/details/82873181")]),n._v(" "),e("li",[n._v("https://blog.csdn.net/yinwenjie/article/details/71524140")]),n._v(" "),e("li",[n._v("https://blog.csdn.net/cowbin2012/article/details/89791757")])])])}),[],!1,null,null,null);e.default=t.exports}}]);