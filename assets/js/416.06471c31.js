(window.webpackJsonp=window.webpackJsonp||[]).push([[416],{748:function(e,t,r){"use strict";r.r(t);var a=r(4),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"行为型-观察者-observer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行为型-观察者-observer"}},[e._v("#")]),e._v(" 行为型 - 观察者(Observer)")]),e._v(" "),t("blockquote",[t("p",[e._v("观察者模式(observer pattern): 在对象之间定义一对多的依赖, 这样一来, 当一个对象改变状态, 依赖它的对象都会收到通知,\n并自动更新。")])]),e._v(" "),t("h2",{attrs:{id:"意图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[e._v("#")]),e._v(" 意图")]),e._v(" "),t("p",[e._v("定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。")]),e._v(" "),t("p",[e._v("主题(Subject)是被观察的对象，而其所有依赖者(Observer)称为观察者。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/7a3c6a30-c735-4edb-8115-337288a4f0f2.jpg",alt:"img"}})]),e._v(" "),t("h2",{attrs:{id:"类图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[e._v("#")]),e._v(" 类图")]),e._v(" "),t("p",[e._v("主题(Subject)具有注册和移除观察者、并通知所有观察者的功能，主题是通过维护一张观察者列表来实现这些操作的。")]),e._v(" "),t("p",[e._v("观察者(Observer)的注册功能需要调用主题的 registerObserver() 方法。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/0df5d84c-e7ca-4e3a-a688-bb8e68894467.png",alt:"img"}})]),e._v(" "),t("h2",{attrs:{id:"实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[e._v("#")]),e._v(" 实现")]),e._v(" "),t("p",[e._v("天气数据布告板会在天气信息发生改变时更新其内容，布告板有多个，并且在将来会继续增加。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/b1df9732-86ce-4d69-9f06-fba1db7b3b5a.jpg",alt:"img"}})]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public interface Subject {\n    void resisterObserver(Observer o);\n\n    void removeObserver(Observer o);\n\n    void notifyObserver();\n}\n\n\n\npublic class WeatherData implements Subject {\n    private List<Observer> observers;\n    private float temperature;\n    private float humidity;\n    private float pressure;\n\n    public WeatherData() {\n        observers = new ArrayList<>();\n    }\n\n    public void setMeasurements(float temperature, float humidity, float pressure) {\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.pressure = pressure;\n        notifyObserver();\n    }\n\n    @Override\n    public void resisterObserver(Observer o) {\n        observers.add(o);\n    }\n\n    @Override\n    public void removeObserver(Observer o) {\n        int i = observers.indexOf(o);\n        if (i >= 0) {\n            observers.remove(i);\n        }\n    }\n\n    @Override\n    public void notifyObserver() {\n        for (Observer o : observers) {\n            o.update(temperature, humidity, pressure);\n        }\n    }\n}\n\n\n\npublic interface Observer {\n    void update(float temp, float humidity, float pressure);\n}\n\n\n\npublic class StatisticsDisplay implements Observer {\n\n    public StatisticsDisplay(Subject weatherData) {\n        weatherData.resisterObserver(this);\n    }\n\n    @Override\n    public void update(float temp, float humidity, float pressure) {\n        System.out.println("StatisticsDisplay.update: " + temp + " " + humidity + " " + pressure);\n    }\n}\n\n\n\npublic class CurrentConditionsDisplay implements Observer {\n\n    public CurrentConditionsDisplay(Subject weatherData) {\n        weatherData.resisterObserver(this);\n    }\n\n    @Override\n    public void update(float temp, float humidity, float pressure) {\n        System.out.println("CurrentConditionsDisplay.update: " + temp + " " + humidity + " " + pressure);\n    }\n}\n\n\n\npublic class WeatherStation {\n    public static void main(String[] args) {\n        WeatherData weatherData = new WeatherData();\n        CurrentConditionsDisplay currentConditionsDisplay = new CurrentConditionsDisplay(weatherData);\n        StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);\n\n        weatherData.setMeasurements(0, 0, 0);\n        weatherData.setMeasurements(1, 1, 1);\n    }\n}\n\n\n\nCurrentConditionsDisplay.update: 0.0 0.0 0.0\nStatisticsDisplay.update: 0.0 0.0 0.0\nCurrentConditionsDisplay.update: 1.0 1.0 1.0\nStatisticsDisplay.update: 1.0 1.0 1.0\n')])])]),t("h2",{attrs:{id:"jdk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[e._v("#")]),e._v(" JDK")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("java.util.Observer在新窗口打开"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/util/EventListener.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("java.util.EventListener在新窗口打开"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionBindingListener.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("javax.servlet.http.HttpSessionBindingListener在新窗口打开"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/ReactiveX/RxJava",target:"_blank",rel:"noopener noreferrer"}},[e._v("RxJava在新窗口打开"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);