(window.webpackJsonp=window.webpackJsonp||[]).push([[303],{633:function(t,v,a){"use strict";a.r(v);var i=a(4),e=Object(i.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"♥代码质量保障知识体系详解♥"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#♥代码质量保障知识体系详解♥"}},[t._v("#")]),t._v(" ♥代码质量保障知识体系详解♥")]),t._v(" "),v("blockquote",[v("p",[t._v("本系列主要针对如何保障开发侧代码质量，包含单元测试及实现，以及常用的控制团队开发中代码质量的方式，比如代码风格，命名规范，静态代码检查等。")])]),t._v(" "),v("h3",{attrs:{id:"相关文章"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关文章"}},[t._v("#")]),t._v(" 相关文章")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B1. 开发之单元测试")]),t._v(" ：单元测试是从开发侧保证软件质量的第一步，本章将具体介绍单元测试相关的内容和工具，比如Junit，Mockito等。")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"/pages/dev-ut-unit-test"}},[t._v("单元测试：浅谈单元测试")]),t._v(" "),v("ul",[v("li",[t._v("单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。这是基础，所以围绕着单元测试，我从网上搜集和总结了相关的概念，以助你完善体系。")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"/pages/dev-ut-junit4"}},[t._v("单元测试：Junit4 详解")]),t._v(" "),v("ul",[v("li",[t._v("JUint是Java编程语言的单元测试框架，用于编写和运行可重复的自动化测试。本文主要针对Junit4要点进行梳理总结。")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"/pages/dev-ut-junit5"}},[t._v("单元测试：Junit5 详解")]),t._v(" "),v("ul",[v("li",[t._v("JUnit 5是JUnit的下一代。目标是为JVM上的开发人员端测试创建一个最新的基础。这包括专注于Java 8及更高版本，以及启用许多不同风格的测试。")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"/pages/dev-ut-mockito"}},[t._v("单元测试：Mockito 详解")]),t._v(" "),v("ul",[v("li",[t._v("Mock通常是指，在测试一个对象A时，我们构造一些假的对象来模拟与A之间的交互，而这些Mock对象的行为是我们事先设定且符合预期。通过这些Mock对象来测试A在正常逻辑，异常逻辑或压力情况下工作是否正常。而Mockito是最流行的Java mock框架之一。")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"/pages/dev-ut-junit-idea"}},[t._v("单元测试：IDEA下单元测试详解")]),t._v(" "),v("ul",[v("li",[t._v("工欲善其事必先利其器，我们在写单元测试一定要使用工具，这将能大幅度提升编码的效率。本文以IDEA为例，看看如何利用插件提升效率。")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"/pages/dev-ut-springboot2"}},[t._v("单元测试 - SpringBoot2+Mockito实战")]),t._v(" "),v("ul",[v("li",[t._v("在真实的开发中，我们通常是使用SpringBoot的，目前SpringBoot是v2.4.x的版本（SpringBoot 2.2.2.RELEASE之前默认是使用 JUnit4，之后版本默认使用Junit5）；所以我们写个基于SpringBoot2.4+H2的内存库的简单例子，同时加点必要的单元测试。")])])])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B2. 开发之代码质量")]),t._v(" ：项目的代码通常是一个团队共同完成的，要保障代码质量的首要前提就是统一代码的风格，命名规范，静态代码检查等等。")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"/pages/dev-qt-code-style"}},[t._v("代码质量 - 统一风格：统一代码格式化详解")]),t._v(" "),v("ul",[v("li",[t._v("项目的代码通常是一个团队共同完成的，要保障代码质量的首要前提就是统一代码的风格，本文将介绍常用的统一风格的措施之"),v("strong",[t._v("统一代码格式化")]),t._v(" 。")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"/pages/dev-qt-code-style-1"}},[t._v("代码质量 - 统一风格：统一命名规范详解")]),t._v(" "),v("ul",[v("li",[t._v("好的代码本身就是注释, 所以我们需要统一命名风格，本文将介绍常用的统一风格的措施之"),v("strong",[t._v("统一命名规范")]),t._v(" 。")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"/pages/dev-qt-code-style-2"}},[t._v("代码质量 - 统一风格：静态样式检查详解")]),t._v(" "),v("ul",[v("li",[t._v("统一样式检查规范里，最为常用的统一样式工具是checkstyle插件，本文将介绍常用的统一风格的措施之"),v("strong",[t._v("静态样式检查")]),t._v(" 。")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"/pages/dev-qt-sonarlint"}},[t._v("代码质量 - 代码质量管理: Sonarlint插件详解")]),t._v(" "),v("ul",[v("li",[t._v("在提交代码前，为提升代码质量还需要使用一些静态代码工具检查代码质量，最为常用的是Sonar；在本地IDE中可以配置Sonarlint插件进行检查。")])])]),t._v(" "),v("li",[v("a",{attrs:{href:"/pages/dev-qt-spotbugs"}},[t._v("代码质量 - 代码质量管理: SpotBugs插件详解")]),t._v(" "),v("ul",[v("li",[t._v("SpotBugs是Findbugs的继任者（Findbugs已经于2016年后不再维护），用于对代码进行静态分析，查找相关的漏洞；在本地IDE中可以配置SpotBugs插件进行检查。")])])])])])}),[],!1,null,null,null);v.default=e.exports}}]);