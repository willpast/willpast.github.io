(window.webpackJsonp=window.webpackJsonp||[]).push([[419],{752:function(n,e,r){"use strict";r.r(e);var t=r(4),s=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"行为型-解释器-interpreter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行为型-解释器-interpreter"}},[n._v("#")]),n._v(" 行为型 - 解释器(Interpreter)")]),n._v(" "),e("blockquote",[e("p",[n._v("解释器模式(Interpreter pattern): 使用解释器模式为语言创建解释器，通常由语言的语法和语法分析来定义。")])]),n._v(" "),e("h2",{attrs:{id:"意图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[n._v("#")]),n._v(" 意图")]),n._v(" "),e("p",[n._v("为语言创建解释器，通常由语言的语法和语法分析来定义。")]),n._v(" "),e("h2",{attrs:{id:"类图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[n._v("#")]),n._v(" 类图")]),n._v(" "),e("ul",[e("li",[n._v("TerminalExpression: 终结符表达式，每个终结符都需要一个 TerminalExpression")]),n._v(" "),e("li",[n._v("Context: 上下文，包含解释器之外的一些全局信息")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/794239e3-4baf-4aad-92df-f02f59b2a6fe.png",alt:"img"}})]),n._v(" "),e("h2",{attrs:{id:"实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[n._v("#")]),n._v(" 实现")]),n._v(" "),e("p",[n._v("以下是一个规则检验器实现，具有 and 和 or 规则，通过规则可以构建一颗解析树，用来检验一个文本是否满足解析树定义的规则。")]),n._v(" "),e("p",[n._v('例如一颗解析树为 D And (A Or (B C))，文本 "D A" 满足该解析树定义的规则。')]),n._v(" "),e("p",[n._v("这里的 Context 指的是 String。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('public abstract class Expression {\n    public abstract boolean interpret(String str);\n}\n\n\n\npublic class TerminalExpression extends Expression {\n\n    private String literal = null;\n\n    public TerminalExpression(String str) {\n        literal = str;\n    }\n\n    public boolean interpret(String str) {\n        StringTokenizer st = new StringTokenizer(str);\n        while (st.hasMoreTokens()) {\n            String test = st.nextToken();\n            if (test.equals(literal)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n\n\npublic class AndExpression extends Expression {\n\n    private Expression expression1 = null;\n    private Expression expression2 = null;\n\n    public AndExpression(Expression expression1, Expression expression2) {\n        this.expression1 = expression1;\n        this.expression2 = expression2;\n    }\n\n    public boolean interpret(String str) {\n        return expression1.interpret(str) && expression2.interpret(str);\n    }\n}\n\n\n\npublic class OrExpression extends Expression {\n    private Expression expression1 = null;\n    private Expression expression2 = null;\n\n    public OrExpression(Expression expression1, Expression expression2) {\n        this.expression1 = expression1;\n        this.expression2 = expression2;\n    }\n\n    public boolean interpret(String str) {\n        return expression1.interpret(str) || expression2.interpret(str);\n    }\n}\n\n\n\npublic class Client {\n\n    /**\n     * 构建解析树\n     */\n    public static Expression buildInterpreterTree() {\n        // Literal\n        Expression terminal1 = new TerminalExpression("A");\n        Expression terminal2 = new TerminalExpression("B");\n        Expression terminal3 = new TerminalExpression("C");\n        Expression terminal4 = new TerminalExpression("D");\n        // B C\n        Expression alternation1 = new OrExpression(terminal2, terminal3);\n        // A Or (B C)\n        Expression alternation2 = new OrExpression(terminal1, alternation1);\n        // D And (A Or (B C))\n        return new AndExpression(terminal4, alternation2);\n    }\n\n    public static void main(String[] args) {\n        Expression define = buildInterpreterTree();\n        String context1 = "D A";\n        String context2 = "A B";\n        System.out.println(define.interpret(context1));\n        System.out.println(define.interpret(context2));\n    }\n}\n\n\n\ntrue\nfalse\n')])])]),e("h2",{attrs:{id:"jdk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[n._v("#")]),n._v(" JDK")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("java.util.Pattern在新窗口打开"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/text/Normalizer.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("java.text.Normalizer在新窗口打开"),e("OutboundLink")],1)]),n._v(" "),e("li",[n._v("All subclasses of "),e("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/text/Format.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("java.text.Format在新窗口打开"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"http://docs.oracle.com/javaee/7/api/javax/el/ELResolver.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("javax.el.ELResolver在新窗口打开"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);