(window.webpackJsonp=window.webpackJsonp||[]).push([[412],{744:function(e,n,t){"use strict";t.r(n);var r=t(4),s=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"行为型-责任链-chain-of-responsibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#行为型-责任链-chain-of-responsibility"}},[e._v("#")]),e._v(" 行为型 - 责任链(Chain Of Responsibility)")]),e._v(" "),n("blockquote",[n("p",[e._v("责任链模式(Chain of responsibility pattern): 通过责任链模式, 你可以为某个请求创建一个对象链.\n每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象。")])]),e._v(" "),n("h2",{attrs:{id:"意图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[e._v("#")]),e._v(" 意图")]),e._v(" "),n("p",[e._v("使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。")]),e._v(" "),n("h2",{attrs:{id:"类图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[e._v("#")]),e._v(" 类图")]),e._v(" "),n("ul",[n("li",[e._v("Handler: 定义处理请求的接口，并且实现后继链(successor)")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/691f11eb-31a7-46be-9de1-61f433c4b3c7.png",alt:"img"}})]),e._v(" "),n("h2",{attrs:{id:"实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[e._v("#")]),e._v(" 实现")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('public abstract class Handler {\n    protected Handler successor;\n\n    public Handler(Handler successor) {\n        this.successor = successor;\n    }\n\n    protected abstract void handleRequest(Request request);\n}\n\n\n\npublic class ConcreteHandler1 extends Handler {\n    public ConcreteHandler1(Handler successor) {\n        super(successor);\n    }\n\n    @Override\n    protected void handleRequest(Request request) {\n        if (request.getType() == RequestType.type1) {\n            System.out.println(request.getName() + " is handle by ConcreteHandler1");\n            return;\n        }\n        if (successor != null) {\n            successor.handleRequest(request);\n        }\n    }\n}\n\n\n\npublic class ConcreteHandler2 extends Handler{\n    public ConcreteHandler2(Handler successor) {\n        super(successor);\n    }\n\n    @Override\n    protected void handleRequest(Request request) {\n        if (request.getType() == RequestType.type2) {\n            System.out.println(request.getName() + " is handle by ConcreteHandler2");\n            return;\n        }\n        if (successor != null) {\n            successor.handleRequest(request);\n        }\n    }\n}\n\n\n\npublic class Request {\n    private RequestType type;\n    private String name;\n\n    public Request(RequestType type, String name) {\n        this.type = type;\n        this.name = name;\n    }\n\n    public RequestType getType() {\n        return type;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\n\n\npublic enum RequestType {\n    type1, type2\n}\n\n\n\npublic class Client {\n    public static void main(String[] args) {\n        Handler handler1 = new ConcreteHandler1(null);\n        Handler handler2 = new ConcreteHandler2(handler1);\n        Request request1 = new Request(RequestType.type1, "request1");\n        handler2.handleRequest(request1);\n        Request request2 = new Request(RequestType.type2, "request2");\n        handler2.handleRequest(request2);\n    }\n}\n\n\n\nrequest1 is handle by ConcreteHandler1\nrequest2 is handle by ConcreteHandler2\n')])])]),n("h2",{attrs:{id:"jdk"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[e._v("#")]),e._v(" JDK")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html#log%28java.util.logging.Level,%20java.lang.String%29",target:"_blank",rel:"noopener noreferrer"}},[e._v("java.util.logging.Logger#log()在新窗口打开"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://commons.apache.org/proper/commons-chain/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apache Commons Chain在新窗口打开"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-",target:"_blank",rel:"noopener noreferrer"}},[e._v("javax.servlet.Filter#doFilter()在新窗口打开"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=s.exports}}]);