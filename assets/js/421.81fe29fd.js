(window.webpackJsonp=window.webpackJsonp||[]).push([[421],{753:function(e,n,a){"use strict";a.r(n);var r=a(4),t=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"行为型-中介者-mediator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#行为型-中介者-mediator"}},[e._v("#")]),e._v(" 行为型 - 中介者(Mediator)")]),e._v(" "),n("blockquote",[n("p",[e._v("中介者模式(Mediator pattern) : 使用中介者模式来集中相关对象之间复杂的沟通和控制方式。")])]),e._v(" "),n("h2",{attrs:{id:"意图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[e._v("#")]),e._v(" 意图")]),e._v(" "),n("p",[e._v("集中相关对象之间复杂的沟通和控制方式。")]),e._v(" "),n("h2",{attrs:{id:"类图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[e._v("#")]),e._v(" 类图")]),e._v(" "),n("ul",[n("li",[e._v("Mediator: 中介者，定义一个接口用于与各同事(Colleague)对象通信。")]),e._v(" "),n("li",[e._v("Colleague: 同事，相关对象")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/d0afdd23-c9a5-4d1c-9b3d-404bff3bd0d1.png",alt:"img"}})]),e._v(" "),n("h2",{attrs:{id:"实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[e._v("#")]),e._v(" 实现")]),e._v(" "),n("p",[e._v("Alarm(闹钟)、CoffeePot(咖啡壶)、Calendar(日历)、Sprinkler(喷头)是一组相关的对象，在某个对象的事件产生时需要去操作其它对象，形成了下面这种依赖结构:")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/82cfda3b-b53b-4c89-9fdb-26dd2db0cd02.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("使用中介者模式可以将复杂的依赖结构变成星形结构:")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/5359cbf5-5a79-4874-9b17-f23c53c2cb80.jpg",alt:"img"}})]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('public abstract class Colleague {\n    public abstract void onEvent(Mediator mediator);\n}\n\n\n\npublic class Alarm extends Colleague {\n\n    @Override\n    public void onEvent(Mediator mediator) {\n        mediator.doEvent("alarm");\n    }\n\n    public void doAlarm() {\n        System.out.println("doAlarm()");\n    }\n}\n\n\n\npublic class CoffeePot extends Colleague {\n    @Override\n    public void onEvent(Mediator mediator) {\n        mediator.doEvent("coffeePot");\n    }\n\n    public void doCoffeePot() {\n        System.out.println("doCoffeePot()");\n    }\n}\n\n\n\npublic class Calender extends Colleague {\n    @Override\n    public void onEvent(Mediator mediator) {\n        mediator.doEvent("calender");\n    }\n\n    public void doCalender() {\n        System.out.println("doCalender()");\n    }\n}\n\n\n\npublic class Sprinkler extends Colleague {\n    @Override\n    public void onEvent(Mediator mediator) {\n        mediator.doEvent("sprinkler");\n    }\n\n    public void doSprinkler() {\n        System.out.println("doSprinkler()");\n    }\n}\n\n\n\npublic abstract class Mediator {\n    public abstract void doEvent(String eventType);\n}\n\n\n\npublic class ConcreteMediator extends Mediator {\n    private Alarm alarm;\n    private CoffeePot coffeePot;\n    private Calender calender;\n    private Sprinkler sprinkler;\n\n    public ConcreteMediator(Alarm alarm, CoffeePot coffeePot, Calender calender, Sprinkler sprinkler) {\n        this.alarm = alarm;\n        this.coffeePot = coffeePot;\n        this.calender = calender;\n        this.sprinkler = sprinkler;\n    }\n\n    @Override\n    public void doEvent(String eventType) {\n        switch (eventType) {\n            case "alarm":\n                doAlarmEvent();\n                break;\n            case "coffeePot":\n                doCoffeePotEvent();\n                break;\n            case "calender":\n                doCalenderEvent();\n                break;\n            default:\n                doSprinklerEvent();\n        }\n    }\n\n    public void doAlarmEvent() {\n        alarm.doAlarm();\n        coffeePot.doCoffeePot();\n        calender.doCalender();\n        sprinkler.doSprinkler();\n    }\n\n    public void doCoffeePotEvent() {\n        // ...\n    }\n\n    public void doCalenderEvent() {\n        // ...\n    }\n\n    public void doSprinklerEvent() {\n        // ...\n    }\n}\n\n\n\npublic class Client {\n    public static void main(String[] args) {\n        Alarm alarm = new Alarm();\n        CoffeePot coffeePot = new CoffeePot();\n        Calender calender = new Calender();\n        Sprinkler sprinkler = new Sprinkler();\n        Mediator mediator = new ConcreteMediator(alarm, coffeePot, calender, sprinkler);\n        // 闹钟事件到达，调用中介者就可以操作相关对象\n        alarm.onEvent(mediator);\n    }\n}\n\n\n\ndoAlarm()\ndoCoffeePot()\ndoCalender()\ndoSprinkler()\n')])])]),n("h2",{attrs:{id:"jdk"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[e._v("#")]),e._v(" JDK")]),e._v(" "),n("ul",[n("li",[e._v("All scheduleXXX() methods of "),n("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/util/Timer.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("java.util.Timer在新窗口打开"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html#execute-java.lang.Runnable-",target:"_blank",rel:"noopener noreferrer"}},[e._v("java.util.concurrent.Executor#execute()在新窗口打开"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("submit() and invokeXXX() methods of "),n("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("java.util.concurrent.ExecutorService在新窗口打开"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("scheduleXXX() methods of "),n("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("java.util.concurrent.ScheduledExecutorService在新窗口打开"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-",target:"_blank",rel:"noopener noreferrer"}},[e._v("java.lang.reflect.Method#invoke()在新窗口打开"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=t.exports}}]);