(window.webpackJsonp=window.webpackJsonp||[]).push([[418],{750:function(n,t,e){"use strict";e.r(t);var a=e(4),r=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"行为型-状态-state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行为型-状态-state"}},[n._v("#")]),n._v(" 行为型 - 状态(State)")]),n._v(" "),t("blockquote",[t("p",[n._v("状态模式(State pattern): 允许对象在内部状态改变时改变它的行为, 对象看起来好象改了它的类。")])]),n._v(" "),t("h2",{attrs:{id:"意图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[n._v("#")]),n._v(" 意图")]),n._v(" "),t("p",[n._v("允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它所属的类。")]),n._v(" "),t("h2",{attrs:{id:"类图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[n._v("#")]),n._v(" 类图")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/c5085437-54df-4304-b62d-44b961711ba7.png",alt:"img"}})]),n._v(" "),t("h2",{attrs:{id:"实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[n._v("#")]),n._v(" 实现")]),n._v(" "),t("p",[n._v("糖果销售机有多种状态，每种状态下销售机有不同的行为，状态可以发生转移，使得销售机的行为也发生改变。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/396be981-3f2c-4fd9-8101-dbf9c841504b.jpg",alt:"img"}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('public interface State {\n    /**\n     * 投入 25 分钱\n     */\n    void insertQuarter();\n\n    /**\n     * 退回 25 分钱\n     */\n    void ejectQuarter();\n\n    /**\n     * 转动曲柄\n     */\n    void turnCrank();\n\n    /**\n     * 发放糖果\n     */\n    void dispense();\n}\n\n\n\npublic class HasQuarterState implements State {\n\n    private GumballMachine gumballMachine;\n\n    public HasQuarterState(GumballMachine gumballMachine) {\n        this.gumballMachine = gumballMachine;\n    }\n\n    @Override\n    public void insertQuarter() {\n        System.out.println("You can\'t insert another quarter");\n    }\n\n    @Override\n    public void ejectQuarter() {\n        System.out.println("Quarter returned");\n        gumballMachine.setState(gumballMachine.getNoQuarterState());\n    }\n\n    @Override\n    public void turnCrank() {\n        System.out.println("You turned...");\n        gumballMachine.setState(gumballMachine.getSoldState());\n    }\n\n    @Override\n    public void dispense() {\n        System.out.println("No gumball dispensed");\n    }\n}\n\n\n\npublic class NoQuarterState implements State {\n\n    GumballMachine gumballMachine;\n\n    public NoQuarterState(GumballMachine gumballMachine) {\n        this.gumballMachine = gumballMachine;\n    }\n\n    @Override\n    public void insertQuarter() {\n        System.out.println("You insert a quarter");\n        gumballMachine.setState(gumballMachine.getHasQuarterState());\n    }\n\n    @Override\n    public void ejectQuarter() {\n        System.out.println("You haven\'t insert a quarter");\n    }\n\n    @Override\n    public void turnCrank() {\n        System.out.println("You turned, but there\'s no quarter");\n    }\n\n    @Override\n    public void dispense() {\n        System.out.println("You need to pay first");\n    }\n}\n\n\n\npublic class SoldOutState implements State {\n\n    GumballMachine gumballMachine;\n\n    public SoldOutState(GumballMachine gumballMachine) {\n        this.gumballMachine = gumballMachine;\n    }\n\n    @Override\n    public void insertQuarter() {\n        System.out.println("You can\'t insert a quarter, the machine is sold out");\n    }\n\n    @Override\n    public void ejectQuarter() {\n        System.out.println("You can\'t eject, you haven\'t inserted a quarter yet");\n    }\n\n    @Override\n    public void turnCrank() {\n        System.out.println("You turned, but there are no gumballs");\n    }\n\n    @Override\n    public void dispense() {\n        System.out.println("No gumball dispensed");\n    }\n}\n\n\n\npublic class SoldState implements State {\n\n    GumballMachine gumballMachine;\n\n    public SoldState(GumballMachine gumballMachine) {\n        this.gumballMachine = gumballMachine;\n    }\n\n    @Override\n    public void insertQuarter() {\n        System.out.println("Please wait, we\'re already giving you a gumball");\n    }\n\n    @Override\n    public void ejectQuarter() {\n        System.out.println("Sorry, you already turned the crank");\n    }\n\n    @Override\n    public void turnCrank() {\n        System.out.println("Turning twice doesn\'t get you another gumball!");\n    }\n\n    @Override\n    public void dispense() {\n        gumballMachine.releaseBall();\n        if (gumballMachine.getCount() > 0) {\n            gumballMachine.setState(gumballMachine.getNoQuarterState());\n        } else {\n            System.out.println("Oops, out of gumballs");\n            gumballMachine.setState(gumballMachine.getSoldOutState());\n        }\n    }\n}\n\n\n\npublic class GumballMachine {\n\n    private State soldOutState;\n    private State noQuarterState;\n    private State hasQuarterState;\n    private State soldState;\n\n    private State state;\n    private int count = 0;\n\n    public GumballMachine(int numberGumballs) {\n        count = numberGumballs;\n        soldOutState = new SoldOutState(this);\n        noQuarterState = new NoQuarterState(this);\n        hasQuarterState = new HasQuarterState(this);\n        soldState = new SoldState(this);\n\n        if (numberGumballs > 0) {\n            state = noQuarterState;\n        } else {\n            state = soldOutState;\n        }\n    }\n\n    public void insertQuarter() {\n        state.insertQuarter();\n    }\n\n    public void ejectQuarter() {\n        state.ejectQuarter();\n    }\n\n    public void turnCrank() {\n        state.turnCrank();\n        state.dispense();\n    }\n\n    public void setState(State state) {\n        this.state = state;\n    }\n\n    public void releaseBall() {\n        System.out.println("A gumball comes rolling out the slot...");\n        if (count != 0) {\n            count -= 1;\n        }\n    }\n\n    public State getSoldOutState() {\n        return soldOutState;\n    }\n\n    public State getNoQuarterState() {\n        return noQuarterState;\n    }\n\n    public State getHasQuarterState() {\n        return hasQuarterState;\n    }\n\n    public State getSoldState() {\n        return soldState;\n    }\n\n    public int getCount() {\n        return count;\n    }\n}\n\n\n\npublic class Client {\n\n    public static void main(String[] args) {\n        GumballMachine gumballMachine = new GumballMachine(5);\n\n        gumballMachine.insertQuarter();\n        gumballMachine.turnCrank();\n\n        gumballMachine.insertQuarter();\n        gumballMachine.ejectQuarter();\n        gumballMachine.turnCrank();\n\n        gumballMachine.insertQuarter();\n        gumballMachine.turnCrank();\n        gumballMachine.insertQuarter();\n        gumballMachine.turnCrank();\n        gumballMachine.ejectQuarter();\n\n        gumballMachine.insertQuarter();\n        gumballMachine.insertQuarter();\n        gumballMachine.turnCrank();\n        gumballMachine.insertQuarter();\n        gumballMachine.turnCrank();\n        gumballMachine.insertQuarter();\n        gumballMachine.turnCrank();\n    }\n}\n\n\n\nYou insert a quarter\nYou turned...\nA gumball comes rolling out the slot...\nYou insert a quarter\nQuarter returned\nYou turned, but there\'s no quarter\nYou need to pay first\nYou insert a quarter\nYou turned...\nA gumball comes rolling out the slot...\nYou insert a quarter\nYou turned...\nA gumball comes rolling out the slot...\nYou haven\'t insert a quarter\nYou insert a quarter\nYou can\'t insert another quarter\nYou turned...\nA gumball comes rolling out the slot...\nYou insert a quarter\nYou turned...\nA gumball comes rolling out the slot...\nOops, out of gumballs\nYou can\'t insert a quarter, the machine is sold out\nYou turned, but there are no gumballs\nNo gumball dispensed\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);