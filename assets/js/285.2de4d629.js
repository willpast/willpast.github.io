(window.webpackJsonp=window.webpackJsonp||[]).push([[285],{616:function(t,a,e){"use strict";e.r(a);var s=e(4),v=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"es详解-原理-从图解构筑对es原理的初步认知"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es详解-原理-从图解构筑对es原理的初步认知"}},[t._v("#")]),t._v(" ES详解 - 原理：从图解构筑对ES原理的初步认知")]),t._v(" "),a("blockquote",[a("p",[t._v("在学习ElasticSearch原理时，我推荐你先通过官方博客中的一篇图解文章(虽然是基于2.x版本）来构筑对ES的初步认知（这种认识是体系上的快速认知）。")])]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("本文先自上而下，后自底向上的介绍ElasticSearch的底层工作原理，试图回答以下问题：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("为什么我的搜索 "),a("code",[t._v("*foo-bar*")]),t._v(" 无法匹配 "),a("code",[t._v("foo-bar")]),t._v(" ？")])]),t._v(" "),a("li",[a("p",[t._v("为什么增加更多的文件会压缩索引（Index）？")])]),t._v(" "),a("li",[a("p",[t._v("为什么ElasticSearch占用很多内存？")])])]),t._v(" "),a("p",[a("strong",[t._v("版本")])]),t._v(" "),a("p",[t._v("elasticsearch版本: elasticsearch-2.2.0")]),t._v(" "),a("h2",{attrs:{id:"图解elasticsearch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图解elasticsearch"}},[t._v("#")]),t._v(" 图解ElasticSearch")]),t._v(" "),a("ul",[a("li",[t._v("云上的集群")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-1.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[t._v("集群里的盒子")])]),t._v(" "),a("p",[t._v("云里面的每个白色正方形的盒子代表一个节点——Node。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-2.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[t._v("节点之间")])]),t._v(" "),a("p",[t._v("在一个或者多个节点直接，多个绿色小方块组合在一起形成一个ElasticSearch的索引。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-3.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[t._v("索引里的小方块")])]),t._v(" "),a("p",[t._v("在一个索引下，分布在多个节点里的绿色小方块称为分片——Shard。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-4.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[t._v("Shard＝Lucene Index")])]),t._v(" "),a("p",[t._v("一个ElasticSearch的Shard本质上是一个Lucene Index。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-5.png",alt:"img"}})]),t._v(" "),a("p",[t._v("Lucene是一个Full Text\n搜索库（也有很多其他形式的搜索库），ElasticSearch是建立在Lucene之上的。接下来的故事要说的大部分内容实际上是ElasticSearch如何基于Lucene工作的。")]),t._v(" "),a("h2",{attrs:{id:"图解lucene"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图解lucene"}},[t._v("#")]),t._v(" 图解Lucene")]),t._v(" "),a("h3",{attrs:{id:"segment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#segment"}},[t._v("#")]),t._v(" Segment")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Mini索引——segment")])])]),t._v(" "),a("p",[t._v("在Lucene里面有很多小的segment，我们可以把它们看成Lucene内部的mini-index。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-6.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Segment内部")]),t._v(" （有着许多数据结构）\n"),a("ul",[a("li",[t._v("Inverted Index")]),t._v(" "),a("li",[t._v("Stored Fields")]),t._v(" "),a("li",[t._v("Document Values")]),t._v(" "),a("li",[t._v("Cache")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-7.png",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"inverted-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inverted-index"}},[t._v("#")]),t._v(" Inverted Index")]),t._v(" "),a("p",[t._v("最最重要的Inverted Index")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-8.png",alt:"img"}})]),t._v(" "),a("p",[t._v("Inverted Index主要包括两部分：")]),t._v(" "),a("ul",[a("li",[t._v("一个有序的数据字典Dictionary（包括单词Term和它出现的频率）。")]),t._v(" "),a("li",[t._v("与单词Term对应的Postings（即存在这个单词的文件）。")])]),t._v(" "),a("p",[t._v("当我们搜索的时候，首先将搜索的内容分解，然后在字典里找到对应Term，从而查找到与搜索相关的文件内容。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-9.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("查询“the fury”")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-10.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("自动补全")]),t._v(" （AutoCompletion-Prefix）")])]),t._v(" "),a("p",[t._v("如果想要查找以字母“c”开头的字母，可以简单的通过二分查找（Binary Search）在Inverted\nIndex表中找到例如“choice”、“coming”这样的词（Term）。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-11.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("昂贵的查找")])])]),t._v(" "),a("p",[t._v("如果想要查找所有包含“our”字母的单词，那么系统会扫描整个Inverted Index，这是非常昂贵的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-12.png",alt:"img"}})]),t._v(" "),a("p",[t._v("在此种情况下，如果想要做优化，那么我们面对的问题是如何生成合适的Term。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("问题的转化")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-13.png",alt:"img"}})]),t._v(" "),a("p",[t._v("对于以上诸如此类的问题，我们可能会有几种可行的解决方案：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("* suffix -> xiffus *")])])]),t._v(" "),a("p",[t._v("如果我们想以后缀作为搜索条件，可以为Term做反向处理。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("(60.6384, 6.5017) -> u4u8gyykk")])])]),t._v(" "),a("p",[t._v("对于GEO位置信息，可以将它转换为GEO Hash。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("123 -> {1-hundreds, 12-tens, 123}")])])]),t._v(" "),a("p",[t._v("对于简单的数字，可以为它生成多重形式的Term。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("解决拼写错误")])])]),t._v(" "),a("p",[t._v("一个Python库 为单词生成了一个包含错误拼写信息的树形状态机，解决拼写错误的问题。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-14.png",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"stored-field字段查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stored-field字段查找"}},[t._v("#")]),t._v(" Stored Field字段查找")]),t._v(" "),a("p",[t._v("当我们想要查找包含某个特定标题内容的文件时，Inverted Index就不能很好的解决这个问题，所以Lucene提供了另外一种数据结构Stored\nFields来解决这个问题。本质上，Stored Fields是一个简单的键值对key-\nvalue。默认情况下，ElasticSearch会存储整个文件的JSON source。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-15.png",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"document-values为了排序-聚合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-values为了排序-聚合"}},[t._v("#")]),t._v(" Document Values为了排序，聚合")]),t._v(" "),a("p",[t._v("即使这样，我们发现以上结构仍然无法解决诸如：排序、聚合、facet，因为我们可能会要读取大量不需要的信息。")]),t._v(" "),a("p",[t._v("所以，另一种数据结构解决了此种问题：Document Values。这种结构本质上就是一个列式的存储，它高度优化了具有相同类型的数据的存储结构。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-16.png",alt:"img"}})]),t._v(" "),a("p",[t._v("为了提高效率，ElasticSearch可以将索引下某一个Document\nValue全部读取到内存中进行操作，这大大提升访问速度，但是也同时会消耗掉大量的内存空间。")]),t._v(" "),a("p",[t._v("总之，这些数据结构Inverted Index、Stored Fields、Document Values及其缓存，都在segment内部。")]),t._v(" "),a("h3",{attrs:{id:"搜索发生时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搜索发生时"}},[t._v("#")]),t._v(" 搜索发生时")]),t._v(" "),a("p",[t._v("搜索时，Lucene会搜索所有的segment然后将每个segment的搜索结果返回，最后合并呈现给客户。")]),t._v(" "),a("p",[t._v("Lucene的一些特性使得这个过程非常重要：")]),t._v(" "),a("ul",[a("li",[t._v("Segments是不可变的（immutable）\n"),a("ul",[a("li",[t._v("Delete? 当删除发生时，Lucene做的只是将其标志位置为删除，但是文件还是会在它原来的地方，不会发生改变")]),t._v(" "),a("li",[t._v("Update? 所以对于更新来说，本质上它做的工作是：先删除，然后重新索引（Re-index）")])])]),t._v(" "),a("li",[t._v("随处可见的压缩\n"),a("ul",[a("li",[t._v("Lucene非常擅长压缩数据，基本上所有教科书上的压缩方式，都能在Lucene中找到。")])])]),t._v(" "),a("li",[t._v("缓存所有的所有\n"),a("ul",[a("li",[t._v("Lucene也会将所有的信息做缓存，这大大提高了它的查询效率。")])])])]),t._v(" "),a("h3",{attrs:{id:"缓存的故事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存的故事"}},[t._v("#")]),t._v(" 缓存的故事")]),t._v(" "),a("p",[t._v("当ElasticSearch索引一个文件的时候，会为文件建立相应的缓存，并且会定期（每秒）刷新这些数据，然后这些文件就可以被搜索到。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-17.png",alt:"img"}})]),t._v(" "),a("p",[t._v("随着时间的增加，我们会有很多segments，")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-18.png",alt:"img"}})]),t._v(" "),a("p",[t._v("所以ElasticSearch会将这些segment合并，在这个过程中，segment会最终被删除掉")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-19.png",alt:"img"}})]),t._v(" "),a("p",[t._v("这就是为什么增加文件可能会使索引所占空间变小，它会引起merge，从而可能会有更多的压缩。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("举个栗子")])])]),t._v(" "),a("p",[t._v("有两个segment将会merge")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-20.png",alt:"img"}})]),t._v(" "),a("p",[t._v("这两个segment最终会被删除，然后合并成一个新的segment")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-21.png",alt:"img"}})]),t._v(" "),a("p",[t._v("这时这个新的segment在缓存中处于cold状态，但是大多数segment仍然保持不变，处于warm状态。")]),t._v(" "),a("p",[t._v("以上场景经常在Lucene Index内部发生的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-22.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"在shard中搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在shard中搜索"}},[t._v("#")]),t._v(" 在Shard中搜索")]),t._v(" "),a("p",[t._v("ElasticSearch从Shard中搜索的过程与Lucene Segment中搜索的过程类似。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-23.png",alt:"img"}})]),t._v(" "),a("p",[t._v("与在Lucene Segment中搜索不同的是，Shard可能是分布在不同Node上的，所以在搜索与返回结果时，所有的信息都会通过网络传输。")]),t._v(" "),a("p",[t._v("需要注意的是：")]),t._v(" "),a("p",[t._v("1次搜索查找2个shard ＝ 2次分别搜索shard")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-24.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("对于日志文件的处理")])])]),t._v(" "),a("p",[t._v("当我们想搜索特定日期产生的日志时，通过根据时间戳对日志文件进行分块与索引，会极大提高搜索效率。")]),t._v(" "),a("p",[t._v("当我们想要删除旧的数据时也非常方便，只需删除老的索引即可。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-25.png",alt:"img"}})]),t._v(" "),a("p",[t._v("在上种情况下，每个index有两个shards")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("如何Scale")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-26.png",alt:"img"}})]),t._v(" "),a("p",[t._v("shard不会进行更进一步的拆分，但是shard可能会被转移到不同节点上")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-27.png",alt:"img"}})]),t._v(" "),a("p",[t._v("所以，如果当集群节点压力增长到一定的程度，我们可能会考虑增加新的节点，这就会要求我们对所有数据进行重新索引，这是我们不太希望看到的，所以我们需要在规划的时候就考虑清楚，如何去平衡足够多的节点与不足节点之间的关系。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("节点分配与Shard优化")]),t._v(" "),a("ul",[a("li",[t._v("为更重要的数据索引节点，分配性能更好的机器")]),t._v(" "),a("li",[t._v("确保每个shard都有副本信息replica")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-28.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("路由Routing")])])]),t._v(" "),a("p",[t._v("每个节点，每个都存留一份路由表，所以当请求到任何一个节点时，ElasticSearch都有能力将请求转发到期望节点的shard进一步处理。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-29.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"一个真实的请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个真实的请求"}},[t._v("#")]),t._v(" 一个真实的请求")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-30.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Query")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-31.png",alt:"img"}})]),t._v(" "),a("p",[t._v("Query有一个类型filtered，以及一个multi_match的查询")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Aggregation")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-32.png",alt:"img"}})]),t._v(" "),a("p",[t._v("根据作者进行聚合，得到top10的hits的top10作者的信息")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("请求分发")])])]),t._v(" "),a("p",[t._v("这个请求可能被分发到集群里的任意一个节点")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-33.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("上帝节点")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-34.png",alt:"img"}})]),t._v(" "),a("p",[t._v("这时这个节点就成为当前请求的协调者（Coordinator），它决定： a) 根据索引信息，判断请求会被路由到哪个核心节点 b) 以及哪个副本是可用的 c)\n等等")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("路由")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-35.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("在真实搜索之前")])])]),t._v(" "),a("p",[t._v("ElasticSearch 会将Query转换成Lucene Query")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-36.png",alt:"img"}})]),t._v(" "),a("p",[t._v("然后在所有的segment中执行计算")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-37.png",alt:"img"}})]),t._v(" "),a("p",[t._v("对于Filter条件本身也会有缓存")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-38.png",alt:"img"}})]),t._v(" "),a("p",[t._v("但queries不会被缓存，所以如果相同的Query重复执行，应用程序自己需要做缓存")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-39.png",alt:"img"}})]),t._v(" "),a("p",[t._v("所以，")]),t._v(" "),a("p",[t._v("a) filters可以在任何时候使用 b) query只有在需要score的时候才使用")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("返回")])])]),t._v(" "),a("p",[t._v("搜索结束之后，结果会沿着下行的路径向上逐层返回。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-40.png",alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-41.png",alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-42.png",alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-43.png",alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/es-th-1-44.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"参考来源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考来源"}},[t._v("#")]),t._v(" 参考来源")]),t._v(" "),a("p",[t._v("SlideShare: Elasticsearch From the Bottom Up")]),t._v(" "),a("p",[t._v("Youtube: Elasticsearch from the bottom up")]),t._v(" "),a("p",[t._v("Wiki: Document-term matrix")]),t._v(" "),a("p",[t._v("Wiki: Search engine indexing")]),t._v(" "),a("p",[t._v("Skip list")]),t._v(" "),a("p",[t._v("Standford Edu: Faster postings list intersection via skip pointers")]),t._v(" "),a("p",[t._v("StackOverflow: how an search index works when querying many words?")]),t._v(" "),a("p",[t._v("StackOverflow: how does lucene calculate intersection of documents so fast?")]),t._v(" "),a("p",[t._v("Lucene and its magical indexes")]),t._v(" "),a("p",[t._v("misspellings 2.0c: A tool to detect misspellings")])])}),[],!1,null,null,null);a.default=v.exports}}]);