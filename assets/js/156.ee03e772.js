(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{487:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"【知识框架】"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#【知识框架】"}},[s._v("#")]),s._v(" 【知识框架】")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/ka-stack-queue.png",alt:"知识架构"}})]),s._v(" "),t("h2",{attrs:{id:"_1-栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-栈"}},[s._v("#")]),s._v(" 1 栈")]),s._v(" "),t("h3",{attrs:{id:"_1-1-栈的基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-栈的基本概念"}},[s._v("#")]),s._v(" 1.1 栈的基本概念")]),s._v(" "),t("h4",{attrs:{id:"_1-1-1-栈的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-栈的定义"}},[s._v("#")]),s._v(" 1.1.1 栈的定义")]),s._v(" "),t("p",[t("strong",[s._v("栈（Stack）")]),s._v("：是只允许在一端进行插入或删除的线性表。首先栈是一种线性表，但限定这种线性表只能在某一端进行插入和删除操作。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/stack.png",alt:"栈"}})]),s._v(" "),t("p",[t("strong",[s._v("栈顶（Top）")]),s._v("：线性表允许进行插入删除的那一端。")]),s._v(" "),t("p",[t("strong",[s._v("栈底（Bottom）")]),s._v("：固定的，不允许进行插入和删除的另一端。")]),s._v(" "),t("p",[t("strong",[s._v("空栈")]),s._v("：不含任何元素的空表。")]),s._v(" "),t("p",[s._v("栈又称为后进先出（Last In First Out）的线性表，简称"),t("strong",[s._v("LIFO")]),s._v("结构")]),s._v(" "),t("h4",{attrs:{id:"_1-1-2-栈的常见基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-栈的常见基本操作"}},[s._v("#")]),s._v(" 1.1.2 栈的常见基本操作")]),s._v(" "),t("ul",[t("li",[s._v("InitStack(&S)：初始化一个空栈S。")]),s._v(" "),t("li",[s._v("StackEmpty(S)：判断一个栈是否为空，若栈为空则返回true，否则返回false。")]),s._v(" "),t("li",[s._v("Push(&S, x)：进栈（栈的插入操作），若栈S未满，则将x加入使之成为新栈顶。")]),s._v(" "),t("li",[s._v("Pop(&S, &x)：出栈（栈的删除操作），若栈S非空，则弹出栈顶元素，并用x返回。")]),s._v(" "),t("li",[s._v("GetTop(S, &x)：读栈顶元素，若栈S非空，则用x返回栈顶元素。")]),s._v(" "),t("li",[s._v("DestroyStack(&S)：栈销毁，并释放S占用的存储空间（“&”表示引用调用）。")])]),s._v(" "),t("h3",{attrs:{id:"_1-2-栈的顺序存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-栈的顺序存储结构"}},[s._v("#")]),s._v(" 1.2 栈的顺序存储结构")]),s._v(" "),t("h4",{attrs:{id:"_1-2-1-栈的顺序存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-栈的顺序存储"}},[s._v("#")]),s._v(" 1.2.1 栈的顺序存储")]),s._v(" "),t("p",[s._v("采用顺序存储的栈称为顺序栈，它利用一组地址连续的存储单元存放自栈底到栈顶的数据元素，同时附设一个指针（top）指示当前栈顶元素的位置。\n若存储栈的长度为StackSize，则栈顶位置top必须小于StackSize。当栈存在一个元素时，top等于0，因此通常把空栈的判断条件定位top等于-1。\n栈的顺序存储结构可描述为：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("MAXSIZE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("  ")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义栈中元素的最大个数")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" ElemType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ElemType的类型根据实际情况而定，这里假定为int")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ElemType data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MAXSIZE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" top"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//用于栈顶指针")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("SqStack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("若现在有一个栈，StackSize是5，则栈的普通情况、空栈、满栈的情况分别如下图所示：\n"),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/sqstack.png",alt:"栈"}})]),s._v(" "),t("h4",{attrs:{id:"_1-2-2-顺序栈的基本算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-顺序栈的基本算法"}},[s._v("#")]),s._v(" 1.2.2 顺序栈的基本算法")]),s._v(" "),t("h5",{attrs:{id:"_1-2-2-1-初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-1-初始化"}},[s._v("#")]),s._v(" 1.2.2.1 初始化")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("InitStack")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqStack "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//初始化栈顶指针")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h5",{attrs:{id:"_1-2-2-2-判栈空"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-2-判栈空"}},[s._v("#")]),s._v(" 1.2.2.2 判栈空")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("bool "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("StackEmpty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqStack S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("top "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" true"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//栈空")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" false"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//不空")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h5",{attrs:{id:"_1-2-2-3-进栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-3-进栈"}},[s._v("#")]),s._v(" 1.2.2.3 进栈")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*插入元素e为新的栈顶元素*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqStack "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ElemType e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//满栈")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" MAXSIZE"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ERROR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//栈顶指针增加一")]),s._v("\n    S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将新插入元素赋值给栈顶空间")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h5",{attrs:{id:"_1-2-2-4-出栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-4-出栈"}},[s._v("#")]),s._v(" 1.2.2.4 出栈")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Pop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqStack "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ElemType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ERROR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将要删除的栈顶元素赋值给e")]),s._v("\n    S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//栈顶指针减一")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h5",{attrs:{id:"_1-2-2-5-读栈顶元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-5-读栈顶元素"}},[s._v("#")]),s._v(" 1.2.2.5 读栈顶元素")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*读栈顶元素*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("GetTop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqStack S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ElemType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//栈空")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ERROR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//记录栈顶元素")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h4",{attrs:{id:"_1-2-3-共享栈-两栈共享空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-共享栈-两栈共享空间"}},[s._v("#")]),s._v(" 1.2.3 共享栈（两栈共享空间）")]),s._v(" "),t("h5",{attrs:{id:"_1-2-3-1-共享栈概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-1-共享栈概念"}},[s._v("#")]),s._v(" 1.2.3.1 共享栈概念")]),s._v(" "),t("p",[s._v("利用栈底位置相对不变的特征，可让两个顺序栈共享一个一维数组空间，将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间延伸，如下图所示：\n"),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/sqdoublestack.png",alt:"共享栈"}})]),s._v(" "),t("p",[s._v("两个栈的栈顶指针都指向栈顶元素，top0=-1时0号栈为空，top1=MaxSize时1号栈为空；仅当两个栈顶指针相邻（top0+1=top1）时，判断为栈满。当0号栈进栈时top0先加1再赋值，1号栈进栈时top1先减一再赋值出栈时则刚好相反。")]),s._v(" "),t("p",[t("strong",[s._v("共享栈的存储结构")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*两栈共享存储结构*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("MAXSIZE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("  ")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义栈中元素的最大个数")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" ElemType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ElemType的类型根据实际情况而定，这里假定为int")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*两栈共享存储结构*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  ElemType data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MAXSIZE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" top0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//栈0栈顶指针")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" top1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//栈1栈顶指针")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("SqDoubleStack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h5",{attrs:{id:"_1-2-3-2-共享栈进栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-2-共享栈进栈"}},[s._v("#")]),s._v(" 1.2.3.2 共享栈进栈")]),s._v(" "),t("p",[s._v("对于两栈共享空间的push方法，我们除了要插入元素值参数外，还需要有一个判断是栈0还是栈1的栈号参数stackNumber。\n共享栈进栈的代码如下：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*插入元素e为新的栈顶元素*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqDoubleStack "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Elemtype e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" stackNumber"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top0"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//栈满")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ERROR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stackNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//栈0有元素进栈")]),s._v("\n        S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//若栈0则先top0+1后给数组元素赋值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("satckNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//栈1有元素进栈")]),s._v("\n        S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//若栈1则先top1-1后给数组元素赋值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h5",{attrs:{id:"_1-2-3-3-共享栈出栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-3-共享栈出栈"}},[s._v("#")]),s._v(" 1.2.3.3 共享栈出栈")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Pop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqDoubleStack "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ElemType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" stackNumber"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stackNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top0 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ERROR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//说明栈0已经是空栈，溢出")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top0"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将栈0的栈顶元素出栈，随后栈顶指针减1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stackNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" MAXSIZE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ERROR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//说明栈1是空栈，溢出")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top1"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将栈1的栈顶元素出栈，随后栈顶指针加1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h3",{attrs:{id:"_1-3-栈的链式存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-栈的链式存储结构"}},[s._v("#")]),s._v(" 1.3 栈的链式存储结构")]),s._v(" "),t("h4",{attrs:{id:"_1-3-1-链栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-链栈"}},[s._v("#")]),s._v(" 1.3.1 链栈")]),s._v(" "),t("p",[s._v("采用链式存储的栈称为"),t("strong",[s._v("链栈")]),s._v("，链栈的优点是便于多个栈共享存储空间和提高其效率，且不存在栈满上溢的情况。通常采用单链表实现，并规定所有操作都是在单链表的表头进行的。这里规定链栈没有头节点，Lhead指向栈顶元素，如下图所示：\n"),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/linkstack.png",alt:"链栈"}}),s._v("\n对于空栈来说，链表原定义是头指针指向空，那么链栈的空其实就是top=NULL的时候。")]),s._v(" "),t("p",[s._v("链栈的存储结构代码如下：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*栈的链式存储结构*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*构造节点*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StackNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ElemType data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StackNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("StackNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("LinkStackPrt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*构造链栈*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkStack")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    LinkStackPrt top"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("LinkStack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h4",{attrs:{id:"_1-3-2-链栈的基本算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-链栈的基本算法"}},[s._v("#")]),s._v(" 1.3.2 链栈的基本算法")]),s._v(" "),t("h5",{attrs:{id:"_1-2-3-1-链栈的进栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-1-链栈的进栈"}},[s._v("#")]),s._v(" 1.2.3.1 链栈的进栈")]),s._v(" "),t("p",[s._v("对于链栈的进栈push操作，假设元素值为e的新节点是s，top为栈顶指针。")]),s._v(" "),t("p",[s._v("代码如下：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*插入元素e为新的栈顶元素*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkStack "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ElemType e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    LinkStackPrt p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkStackPrt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("malloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("StackNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    p"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    p"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//把当前的栈顶元素赋值给新节点的直接后继")]),s._v("\n    S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将新的结点S赋值给栈顶指针")]),s._v("\n    S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h5",{attrs:{id:"_1-2-3-2-链栈的出栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-2-链栈的出栈"}},[s._v("#")]),s._v(" 1.2.3.2 链栈的出栈")]),s._v(" "),t("p",[s._v("链栈的出栈pop操作，也是很简单的三句操作。假设变量p用来存储要删除的栈顶结点，将栈顶指针下移以为，最后释放p即可。\n代码如下：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Pop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkStack "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ElemType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    LinkStackPtr p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("StackEmpty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("S"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ERROR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将栈顶结点赋值给p")]),s._v("\n    S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("top"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使得栈顶指针下移一位，指向后一结点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//释放结点p")]),s._v("\n    S"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h4",{attrs:{id:"_1-3-3-性能分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-性能分析"}},[s._v("#")]),s._v(" 1.3.3 性能分析")]),s._v(" "),t("p",[s._v("链栈的进栈push和出栈pop操作都很简单，时间复杂度均为O(1)。")]),s._v(" "),t("p",[s._v("对比一下顺序栈与链栈,它们在时间复杂度上是一样的,均为O(1)。对于空间性能,顺序栈需要事先确定一个固定的长度,可能会存在内存空间浪费的问题,但它的优势是存取时定位很方便,而链栈则要求每个元素都有指针域,这同时也增加了一些内存开销,但对于栈的长度无限制。所以它们的区别和线性表中讨论的一样,如果栈的使用过程中元素变化不可预料,有时很小,有时非常大,那么最好是用链栈,反之,如果它的变化在可控范围内,建议使用顺序栈会更好一些。")]),s._v(" "),t("h2",{attrs:{id:"_2-队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-队列"}},[s._v("#")]),s._v(" 2 队列")]),s._v(" "),t("h3",{attrs:{id:"_2-1-队列的基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-队列的基本概念"}},[s._v("#")]),s._v(" 2.1 队列的基本概念")]),s._v(" "),t("h4",{attrs:{id:"_2-1-1-队列的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-队列的定义"}},[s._v("#")]),s._v(" 2.1.1 队列的定义")]),s._v(" "),t("p",[t("strong",[s._v("队列（queue）"),t("strong",[s._v("是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。\n队列是一种先进先出（First In First Out）的线性表，简称")]),s._v("FIFO")]),s._v("。允许插入的一端称为"),t("strong",[s._v("队尾")]),s._v("，允许删除的一端称为"),t("strong",[s._v("队头")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/queue.png",alt:"队列"}})]),s._v(" "),t("p",[s._v("队头（Front）：允许删除的一端，又称队首。")]),s._v(" "),t("p",[s._v("队尾（Rear）：允许插入的一端。")]),s._v(" "),t("p",[s._v("空队列：不包含任何元素的空表。")]),s._v(" "),t("h4",{attrs:{id:"_2-1-2-队列的常见基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-队列的常见基本操作"}},[s._v("#")]),s._v(" 2.1.2 队列的常见基本操作")]),s._v(" "),t("p",[s._v("InitQueue(&Q)：初始化队列，构造一个空队列Q。")]),s._v(" "),t("p",[s._v("QueueEmpty(Q)：判队列空，若队列Q为空返回true，否则返回false。")]),s._v(" "),t("p",[s._v("EnQueue(&Q, x)：入队，若队列Q未满，将x加入，使之成为新的队尾。")]),s._v(" "),t("p",[s._v("DeQueue(&Q, &x)：出队，若队列Q非空，删除队头元素，并用x返回。")]),s._v(" "),t("p",[s._v("GetHead(Q, &x)：读队头元素，若队列Q非空，则将队头元素赋值给x。")]),s._v(" "),t("h3",{attrs:{id:"_2-2-队列的顺序存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-队列的顺序存储结构"}},[s._v("#")]),s._v(" 2.2 队列的顺序存储结构")]),s._v(" "),t("p",[s._v("队列的顺序实现是指分配一块连续的存储单元存放队列中的元素，并附设两个指针：队头指针 front指向队头元素，队尾指针 rear 指向队尾元素的下一个位置。")]),s._v(" "),t("h4",{attrs:{id:"_2-2-1-顺序队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-顺序队列"}},[s._v("#")]),s._v(" 2.2.1 顺序队列")]),s._v(" "),t("p",[s._v("队列的顺序存储结构可描述为:")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("MAXSIZE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("  ")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义队列中元素的最大个数")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  ElemType data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MAXSIZE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//存放队列元素")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" front"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("rear"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("SqQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("初始状态（队空条件）：Q->front == Q->rear == 0。")]),s._v(" "),t("p",[s._v("进队操作：队不满时，先送值到队尾元素，再将队尾指针加1。")]),s._v(" "),t("p",[s._v("出队操作：队不空时，先取队头元素值，再将队头指针加1。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/queue.png",alt:"队列"}})]),s._v(" "),t("p",[s._v("如图d，队列出现“上溢出”，然而却又不是真正的溢出，所以是一种“假溢出”。")]),s._v(" "),t("h4",{attrs:{id:"_2-2-2-循环队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-循环队列"}},[s._v("#")]),s._v(" 2.2.2 循环队列")]),s._v(" "),t("p",[s._v("解决假溢出的方法就是后面满了，就再从头开始，也就是头尾相接的循环。我们把队列的这种头尾相接的顺序存储结构称为循环队列。")]),s._v(" "),t("p",[s._v("当队首指针Q->front = MAXSIZE-1后，再前进一个位置就自动到0，这可以利用除法取余运算（%）来实现。")]),s._v(" "),t("ul",[t("li",[s._v("初始时：Q->front = Q->rear=0。")]),s._v(" "),t("li",[s._v("队首指针进1：Q->front = (Q->front + 1) % MAXSIZE。")]),s._v(" "),t("li",[s._v("队尾指针进1：Q->rear = (Q->rear + 1) % MAXSIZE。")]),s._v(" "),t("li",[s._v("队列长度：(Q->rear - Q->front + MAXSIZE) % MAXSIZE。")])]),s._v(" "),t("p",[s._v("出队入队时，指针都按照顺时针方向前进1，如下图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/cqueue.png",alt:"循环队列"}})]),s._v(" "),t("p",[s._v("那么，循环队列队空和队满的判断条件是什么呢？")]),s._v(" "),t("p",[s._v("显然，队空的条件是 Q->front == Q->rear 。若入队元素的速度快于出队元素的速度，则队尾指针很快就会赶上队首指针，如图( d1 ）所示，此时可以看出队满时也有 Q ->front == Q -> rear 。\n为了区分队空还是队满的情况，有三种处理方式：")]),s._v(" "),t("p",[s._v("（1）牺牲一个单元来区分队空和队满，入队时少用一个队列单元，这是种较为普遍的做法，约定以“队头指针在队尾指针的下一位置作为队满的标志”，如图 ( d2 ）所示。")]),s._v(" "),t("ul",[t("li",[s._v("队满条件： (Q->rear + 1)%Maxsize == Q->front")]),s._v(" "),t("li",[s._v("队空条件仍： Q->front == Q->rear")]),s._v(" "),t("li",[s._v("队列中元素的个数： (Q->rear - Q ->front + Maxsize)% Maxsize")])]),s._v(" "),t("p",[s._v("（2）类型中增设表示元素个数的数据成员。这样，队空的条件为 Q->size == O ；队满的条件为 Q->size == Maxsize 。这两种情况都有 Q->front == Q->rear")]),s._v(" "),t("p",[s._v("（3）类型中增设tag 数据成员，以区分是队满还是队空。tag 等于0时，若因删除导致 Q->front == Q->rear ，则为队空；tag 等于 1 时，若因插入导致 Q ->front == Q->rear ，则为队满。")]),s._v(" "),t("p",[t("strong",[s._v("我们重点讨论第一种方法")])]),s._v(" "),t("h4",{attrs:{id:"_2-2-3-循环队列常见基本算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-循环队列常见基本算法"}},[s._v("#")]),s._v(" 2.2.3 循环队列常见基本算法")]),s._v(" "),t("h5",{attrs:{id:"_2-2-3-1-循环队列的顺序存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-1-循环队列的顺序存储结构"}},[s._v("#")]),s._v(" 2.2.3.1 循环队列的顺序存储结构")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" ElemType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ElemType的类型根据实际情况而定，这里假定为int")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("MAXSIZE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("  ")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义元素的最大个数")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*循环队列的顺序存储结构*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ElemType data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MAXSIZE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" front"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//头指针")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" rear"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//尾指针,若队列不空，指向队列尾元素的下一个位置")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("SqQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h5",{attrs:{id:"_2-2-3-2-循环队列的初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-2-循环队列的初始化"}},[s._v("#")]),s._v(" 2.2.3.2 循环队列的初始化")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*初始化一个空队列Q*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("InitQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqQueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h5",{attrs:{id:"_2-2-3-3-循环队列判队空"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-3-循环队列判队空"}},[s._v("#")]),s._v(" 2.2.3.3 循环队列判队空")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*判队空*/")]),s._v("\nbool "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isEmpty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqQueue Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("front"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" true"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" false"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h5",{attrs:{id:"_2-2-3-4-求循环队列长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-4-求循环队列长度"}},[s._v("#")]),s._v(" 2.2.3.4 求循环队列长度")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*返回Q的元素个数，也就是队列的当前长度*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("QueueLength")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqQueue Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("front "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" MAXSIZE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" MAXSIZE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h5",{attrs:{id:"_2-2-3-5-循环队列入队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-5-循环队列入队"}},[s._v("#")]),s._v(" 2.2.3.5 循环队列入队")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*若队列未满，则插入元素e为Q新的队尾元素*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("EnQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqQueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ElemType e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" MAXSIZE "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ERROR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//队满")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将元素e赋值给队尾")]),s._v("\n    Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" MAXSIZE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//rear指针向后移一位置，若到最后则转到数组头部")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h5",{attrs:{id:"_2-2-3-6-循环队列出队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-6-循环队列出队"}},[s._v("#")]),s._v(" 2.2.3.6 循环队列出队")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*若队列不空，则删除Q中队头元素，用e返回其值*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("DeQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SqQueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ElemType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isEmpty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" REEOR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//队列空的判断")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将队头元素赋值给e")]),s._v("\n    Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" MAXSIZE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//front指针向后移一位置，若到最后则转到数组头部")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"_2-3-队列的链式存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-队列的链式存储结构"}},[s._v("#")]),s._v(" 2.3 队列的链式存储结构")]),s._v(" "),t("h4",{attrs:{id:"_2-3-1-链队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-链队列"}},[s._v("#")]),s._v(" 2.3.1 链队列")]),s._v(" "),t("p",[s._v("队列的链式存储结构表示为"),t("strong",[s._v("链队列")]),s._v("，它实际上是一个同时带有队头指针和队尾指针的单链表，只不过它只能尾进头出而已。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/linkqueue.png",alt:"链队列"}})]),s._v(" "),t("p",[s._v("空队列时，front和real都指向头结点。")]),s._v(" "),t("p",[t("strong",[s._v("链队列存储类型")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*链式队列结点*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  ElemType data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("LinkNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*链式队列*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  LinkNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("front"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("rear"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//队列的队头和队尾指针")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("LinkQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h4",{attrs:{id:"_2-3-2-链队列常见基本算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-链队列常见基本算法"}},[s._v("#")]),s._v(" 2.3.2 链队列常见基本算法")]),s._v(" "),t("h5",{attrs:{id:"_2-3-2-1-链队列初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-1-链队列初始化"}},[s._v("#")]),s._v(" 2.3.2.1 链队列初始化")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("InitQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkQueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("malloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//建立头结点")]),s._v("\n  Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//初始为空")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h5",{attrs:{id:"_2-3-2-2-链队列入队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-2-链队列入队"}},[s._v("#")]),s._v(" 2.3.2.2 链队列入队")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/enqueue.png",alt:"链队列入队"}})]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("Status "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("EnQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkQueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ElemType e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  LinkNode s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("malloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//把拥有元素e新结点s赋值给原队尾结点的后继")]),s._v("\n  Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//把当前的s设置为新的队尾结点")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h5",{attrs:{id:"_2-3-2-3-链队列出队"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-3-链队列出队"}},[s._v("#")]),s._v(" 2.3.2.3 链队列出队")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/dequeue.png",alt:"链队列出队"}})]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*若队列不空，删除Q的队头元素，用e返回其值，并返回OK，否则返回ERROR*/")]),s._v("\nStatus "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("DeQueue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkQueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Elemtype "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  LinkNode p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ERROR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将欲删除的队头结点暂存给p")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将欲删除的队头结点的值赋值给e")]),s._v("\n  Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将原队头结点的后继赋值给头结点后继")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//若删除的队头是队尾，则删除后将rear指向头结点")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rear "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Q"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("front"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("h3",{attrs:{id:"_2-4-双端队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-双端队列"}},[s._v("#")]),s._v(" 2.4 双端队列")]),s._v(" "),t("h4",{attrs:{id:"_2-4-1-定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-定义"}},[s._v("#")]),s._v(" 2.4.1 定义")]),s._v(" "),t("p",[s._v("双端队列是指允许两端都可以进行入队和出队操作的队列，如下图所示。其元素的逻辑结构仍是线性结构。将队列的两端分别称为前端和后端，两端都可以入队和出队。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/dqueue.png",alt:"双端队列"}})]),s._v(" "),t("p",[s._v("在双端队列进队时，前端进的元素排列在队列中后端进的元素的前面，后端进的元素排列在队列中前端进的元素的后面。在双端队列出队时，无论是前端还是后端出队，先出的元素排列在后出的元素的前面。")]),s._v(" "),t("h4",{attrs:{id:"_2-4-2-特殊的双端队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-特殊的双端队列"}},[s._v("#")]),s._v(" 2.4.2 特殊的双端队列")]),s._v(" "),t("p",[s._v("在实际使用中，根据使用场景的不同，存在某些特殊的双端队列。")]),s._v(" "),t("p",[t("strong",[s._v("输出受限的双端队列")]),s._v("：允许在一端进行插入和删除， 但在另一端只允许插入的双端队列称为输出受限的双端队列，如下图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/dqueue2.png",alt:"输出受限的双端队列"}})]),s._v(" "),t("p",[t("strong",[s._v("输入受限的双端队列")]),s._v("：允许在一端进行插入和删除，但在另一端只允许删除的双端队列称为输入受限的双端队列，如下图所示。若限定双端队列从某个端点插入的元素只能从该端点删除，则该双端队列就蜕变为两个栈底相邻接的栈。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ds_algo/dqueue3.png",alt:"输出受限的双端队列"}})]),s._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/Real_Fool_/article/details/115044709",target:"_blank",rel:"noopener noreferrer"}},[s._v("数据结构知识详细梳理"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);