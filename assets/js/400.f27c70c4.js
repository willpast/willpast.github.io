(window.webpackJsonp=window.webpackJsonp||[]).push([[400],{733:function(t,e,n){"use strict";n.r(e);var c=n(4),r=Object(c.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"创建型-简单工厂-simple-factory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建型-简单工厂-simple-factory"}},[t._v("#")]),t._v(" 创建型 - 简单工厂(Simple Factory)")]),t._v(" "),e("blockquote",[e("p",[t._v("本文主要分析设计模式 - 简单工厂(Simple\nFactory)，它把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化，这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。")])]),t._v(" "),e("ul",[e("li",[t._v("创建型 - 简单工厂(Simple Factory)\n"),e("ul",[e("li",[t._v("意图")]),t._v(" "),e("li",[t._v("类图")]),t._v(" "),e("li",[t._v("实现")]),t._v(" "),e("li",[t._v("参考")]),t._v(" "),e("li",[t._v("总结")])])])]),t._v(" "),e("h2",{attrs:{id:"意图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[t._v("#")]),t._v(" 意图")]),t._v(" "),e("p",[t._v("在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。")]),t._v(" "),e("h2",{attrs:{id:"类图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[t._v("#")]),t._v(" 类图")]),t._v(" "),e("p",[t._v("简单工厂不是设计模式，更像是一种编程习惯。它把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。")]),t._v(" "),e("p",[t._v("这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。因为客户类往往有多个，如果不使用简单工厂，所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/c79da808-0f28-4a36-bc04-33ccc5b83c13.png",alt:"img"}})]),t._v(" "),e("h2",{attrs:{id:"实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public interface Product {\n}\n\n\n\npublic class ConcreteProduct implements Product {\n}\n\n\n\npublic class ConcreteProduct1 implements Product {\n}\n\n\n\npublic class ConcreteProduct2 implements Product {\n}\n")])])]),e("p",[t._v("以下的 Client 类中包含了实例化的代码，这是一种错误的实现，如果在客户类中存在实例化代码，就需要将代码放到简单工厂中。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public class Client {\n    public static void main(String[] args) {\n        int type = 1;\n        Product product;\n        if (type == 1) {\n            product = new ConcreteProduct1();\n        } else if (type == 2) {\n            product = new ConcreteProduct2();\n        } else {\n            product = new ConcreteProduct();\n        }\n        // do something with the product\n    }\n}\n")])])]),e("p",[t._v("以下的 SimpleFactory 是简单工厂实现，它被所有需要进行实例化的客户类调用。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public class SimpleFactory {\n    public Product createProduct(int type) {\n        if (type == 1) {\n            return new ConcreteProduct1();\n        } else if (type == 2) {\n            return new ConcreteProduct2();\n        }\n        return new ConcreteProduct();\n    }\n}\n\n\n\npublic class Client {\n    public static void main(String[] args) {\n        SimpleFactory simpleFactory = new SimpleFactory();\n        Product product = simpleFactory.createProduct(1);\n        // do something with the product\n    }\n}\n")])])]),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("ul",[e("li",[t._v("简单工厂(Simple Factory) https://www.jianshu.com/p/a9f397c4ff98")]),t._v(" "),e("li",[t._v("简单工厂模式(SimpleFactoryPattern)- 最易懂的设计模式解析 https://www.jianshu.com/p/e55fbddc071c")])]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("blockquote",[e("p",[t._v("知识点的东西在上面参考文章中写的非常详细，读完之后问自己下面几个问题，直到可以流利的回答。")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("使用的场景?")])]),t._v(" "),e("li",[e("p",[t._v("本质是什么?")])]),t._v(" "),e("li",[e("p",[t._v("它解决了什么问题?")])]),t._v(" "),e("li",[e("p",[t._v("它体现了设计模式中什么原则?")])]),t._v(" "),e("li",[e("p",[t._v("存在的缺陷?")])]),t._v(" "),e("li",[e("p",[t._v("你认为与它相关的设计模式有哪些? 它们之间的区别有哪些?")])]),t._v(" "),e("li",[e("p",[t._v("*开源架构中哪些使用了这一模式?")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);