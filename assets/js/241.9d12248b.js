(window.webpackJsonp=window.webpackJsonp||[]).push([[241],{573:function(v,t,_){"use strict";_.r(t);var s=_(4),e=Object(s.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"redis进阶-高可用-哨兵机制-redis-sentinel-详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis进阶-高可用-哨兵机制-redis-sentinel-详解"}},[v._v("#")]),v._v(" Redis进阶 - 高可用：哨兵机制（Redis Sentinel）详解")]),v._v(" "),t("blockquote",[t("p",[v._v("在上文主从复制的基础上，如果注节点出现故障该怎么办呢？ 在 Redis\n主从集群中，哨兵机制是实现主从库自动切换的关键机制，它有效地解决了主从复制模式下故障转移的问题。")])]),v._v(" "),t("h2",{attrs:{id:"哨兵机制-redis-sentinel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哨兵机制-redis-sentinel"}},[v._v("#")]),v._v(" 哨兵机制（Redis Sentinel）")]),v._v(" "),t("blockquote",[t("p",[v._v("Redis Sentinel，即Redis哨兵，在Redis 2.8版本开始引入。哨兵的核心功能是主节点的自动故障转移。")])]),v._v(" "),t("p",[v._v("下图是一个典型的哨兵集群监控的逻辑图：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/db-redis-sen-1.png",alt:"img"}})]),v._v(" "),t("p",[v._v("哨兵实现了什么功能呢？下面是Redis官方文档的描述：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("监控（Monitoring）")]),v._v(" ：哨兵会不断地检查主节点和从节点是否运作正常。")]),v._v(" "),t("li",[t("strong",[v._v("自动故障转移（Automatic failover）")]),v._v(" ：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。")]),v._v(" "),t("li",[t("strong",[v._v("配置提供者（Configuration provider）")]),v._v(" ：客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。")]),v._v(" "),t("li",[t("strong",[v._v("通知（Notification）")]),v._v(" ：哨兵可以将故障转移的结果发送给客户端。")])]),v._v(" "),t("p",[v._v("其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移；而配置提供者和通知功能，则需要在与客户端的交互中才能体现。")]),v._v(" "),t("h3",{attrs:{id:"哨兵集群的组建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哨兵集群的组建"}},[v._v("#")]),v._v(" 哨兵集群的组建")]),v._v(" "),t("blockquote",[t("p",[v._v("上图中哨兵集群是如何组件的呢？哨兵实例之间可以相互发现，要归功于 Redis 提供的 pub/sub 机制，也就是发布 / 订阅机制。")])]),v._v(" "),t("p",[v._v("在主从集群中，主库上有一个名为"),t("code",[v._v("__sentinel__:hello")]),v._v("的频道，不同哨兵就是通过它来相互发现，实现互相通信的。在下图中，哨兵 1 把自己的\nIP（172.16.19.3）和端口（26579）发布到"),t("code",[v._v("__sentinel__:hello")]),v._v("频道上，哨兵 2 和 3 订阅了该频道。那么此时，哨兵 2\n和 3 就可以从这个频道直接获取哨兵 1 的 IP 地址和端口号。然后，哨兵 2、3 可以和哨兵 1 建立网络连接。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/db-redis-sen-6.jpg",alt:"img"}})]),v._v(" "),t("p",[v._v("通过这个方式，哨兵 2 和 3\n也可以建立网络连接，这样一来，哨兵集群就形成了。它们相互间可以通过网络连接进行通信，比如说对主库有没有下线这件事儿进行判断和协商。")]),v._v(" "),t("h3",{attrs:{id:"哨兵监控redis库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哨兵监控redis库"}},[v._v("#")]),v._v(" 哨兵监控Redis库")]),v._v(" "),t("blockquote",[t("p",[v._v("哨兵监控什么呢？怎么监控呢？")])]),v._v(" "),t("p",[v._v("这是由哨兵向主库发送 INFO 命令来完成的。就像下图所示，哨兵 2 给主库发送 INFO\n命令，主库接受到这个命令后，就会把从库列表返回给哨兵。接着，哨兵就可以根据从库列表中的连接信息，和每个从库建立连接，并在这个连接上持续地对从库进行监控。哨兵\n1 和 3 可以通过相同的方法和从库建立连接。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/db-redis-sen-7.jpg",alt:"img"}})]),v._v(" "),t("h3",{attrs:{id:"主库下线的判定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主库下线的判定"}},[v._v("#")]),v._v(" 主库下线的判定")]),v._v(" "),t("blockquote",[t("p",[v._v("哨兵如何判断主库已经下线了呢？")])]),v._v(" "),t("p",[v._v("首先要理解两个概念："),t("strong",[v._v("主观下线")]),v._v(" 和"),t("strong",[v._v("客观下线")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("主观下线")]),v._v(" ：任何一个哨兵都是可以监控探测，并作出Redis节点下线的判断；")]),v._v(" "),t("li",[t("strong",[v._v("客观下线")]),v._v(" ：有哨兵集群共同决定Redis节点是否下线；")])]),v._v(" "),t("p",[v._v("当某个哨兵（如下图中的哨兵2）判断主库“主观下线”后，就会给其他哨兵发送 "),t("code",[v._v("is-master-down-by-addr")]),v._v("\n命令。接着，其他哨兵会根据自己和主库的连接情况，做出 Y 或 N 的响应，Y 相当于赞成票，N 相当于反对票。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/db-redis-sen-2.jpg",alt:"img"}})]),v._v(" "),t("p",[v._v("如果赞成票数（这里是2）是大于等于哨兵配置文件中的 "),t("code",[v._v("quorum")]),v._v(" 配置项（比如这里如果是quorum=2）, 则可以判定"),t("strong",[v._v("主库客观下线")]),v._v(" 了。")]),v._v(" "),t("h3",{attrs:{id:"哨兵集群的选举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哨兵集群的选举"}},[v._v("#")]),v._v(" 哨兵集群的选举")]),v._v(" "),t("blockquote",[t("p",[v._v("判断完主库下线后，由哪个哨兵节点来执行主从切换呢？这里就需要哨兵集群的选举机制了。")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("为什么必然会出现选举/共识机制")]),v._v(" ？")])]),v._v(" "),t("p",[v._v("为了避免哨兵的单点情况发生，所以需要一个哨兵的分布式集群。作为分布式集群，必然涉及共识问题（即选举问题）；同时故障的转移和通知都只需要一个主的哨兵节点就可以了。")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("哨兵的选举机制是什么样的")]),v._v(" ？")])]),v._v(" "),t("p",[v._v("哨兵的选举机制其实很简单，就是一个Raft选举算法： "),t("strong",[v._v("选举的票数大于等于num(sentinels)/2+1时，将成为领导者，如果没有超过，继续选举")])]),v._v(" "),t("p",[v._v("Raft算法你可以参看这篇文章[分布式算法 - Raft算法](/md/algorithm/alg-domain-distribute-x-\nraft.html)")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("任何一个想成为 Leader 的哨兵，要满足两个条件")]),v._v(" ：\n"),t("ul",[t("li",[v._v("第一，拿到半数以上的赞成票；")]),v._v(" "),t("li",[v._v("第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值。")])])])]),v._v(" "),t("p",[v._v("以 3 个哨兵为例，假设此时的 quorum 设置为 2，那么，任何一个想成为 Leader 的哨兵只要拿到 2 张赞成票，就可以了。")]),v._v(" "),t("p",[v._v("更进一步理解")]),v._v(" "),t("p",[v._v("这里很多人会搞混 "),t("strong",[v._v("判定客观下线")]),v._v(" 和 "),t("strong",[v._v("是否能够主从切换（用到选举机制）")]),v._v(" 两个概念，我们再看一个例子。")]),v._v(" "),t("p",[v._v("Redis 1主4从，5个哨兵，哨兵配置quorum为2，如果3个哨兵故障，当主库宕机时，哨兵能否判断主库“客观下线”？能否自动切换？")]),v._v(" "),t("p",[v._v("经过实际测试：")]),v._v(" "),t("p",[v._v("1、哨兵集群可以判定主库“主观下线”。由于quorum=2，所以当一个哨兵判断主库“主观下线”后，询问另外一个哨兵后也会得到同样的结果，2个哨兵都判定“主观下线”，达到了quorum的值，因此，"),t("strong",[v._v("哨兵集群可以判定主库为“客观下线”")]),v._v("\n。")]),v._v(" "),t("p",[v._v("2、"),t("strong",[v._v("但哨兵不能完成主从切换")]),v._v("\n。哨兵标记主库“客观下线后”，在选举“哨兵领导者”时，一个哨兵必须拿到超过多数的选票(5/2+1=3票)。但目前只有2个哨兵活着，无论怎么投票，一个哨兵最多只能拿到2票，永远无法达到"),t("code",[v._v("N/2+1")]),v._v("选票的结果。")]),v._v(" "),t("h3",{attrs:{id:"新主库的选出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新主库的选出"}},[v._v("#")]),v._v(" 新主库的选出")]),v._v(" "),t("blockquote",[t("p",[v._v("主库既然判定客观下线了，那么如何从剩余的从库中选择一个新的主库呢？")])]),v._v(" "),t("ul",[t("li",[v._v("过滤掉不健康的（下线或断线），没有回复过哨兵ping响应的从节点")]),v._v(" "),t("li",[v._v("选择"),t("code",[v._v("salve-priority")]),v._v("从节点优先级最高（redis.conf）的")]),v._v(" "),t("li",[v._v("选择复制偏移量最大，只复制最完整的从节点")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/db-redis-sen-3.jpg",alt:"img"}})]),v._v(" "),t("h3",{attrs:{id:"故障的转移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#故障的转移"}},[v._v("#")]),v._v(" 故障的转移")]),v._v(" "),t("blockquote",[t("p",[v._v("新的主库选择出来后，就可以开始进行故障的转移了。")])]),v._v(" "),t("p",[v._v("假设根据我们一开始的图：（我们假设：判断主库客观下线了，同时选出"),t("code",[v._v("sentinel 3")]),v._v("是哨兵leader）")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/db-redis-sen-1.png",alt:"img"}})]),v._v(" "),t("p",[t("strong",[v._v("故障转移流程如下")]),v._v(" ：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/db-redis-sen-4.png",alt:"img"}})]),v._v(" "),t("ul",[t("li",[v._v("将slave-1脱离原从节点（PS: 5.0 中应该是"),t("code",[v._v("replicaof no one")]),v._v(")，升级主节点，")]),v._v(" "),t("li",[v._v("将从节点slave-2指向新的主节点")]),v._v(" "),t("li",[v._v("通知客户端主节点已更换")]),v._v(" "),t("li",[v._v("将原主节点（oldMaster）变成从节点，指向新的主节点")])]),v._v(" "),t("p",[t("strong",[v._v("转移之后")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/db-redis-sen-5.png",alt:"img"}})]),v._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[v._v("#")]),v._v(" 参考文章")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("https://time.geekbang.org/column/article/275337")])]),v._v(" "),t("li",[t("p",[v._v("https://time.geekbang.org/column/article/274483")])]),v._v(" "),t("li",[t("p",[v._v("https://www.cnblogs.com/andy6/p/10829929.html")])]),v._v(" "),t("li",[t("p",[v._v("https://www.cnblogs.com/kismetv/p/9609938.html")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);