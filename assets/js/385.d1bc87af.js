(window.webpackJsonp=window.webpackJsonp||[]).push([[385],{717:function(v,t,_){"use strict";_.r(t);var a=_(4),e=Object(a.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[v._v("#")])]),v._v(" "),t("blockquote",[t("p",[v._v("Google 出品的 《"),t("a",{attrs:{href:"https://google.github.io/styleguide/javaguide.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("Google Java Code Style在新窗口打开"),t("OutboundLink")],1),v._v("》，由"),t("a",{attrs:{href:"https://github.com/fantasticmao",target:"_blank",rel:"noopener noreferrer"}},[v._v("fantasticmao在新窗口打开"),t("OutboundLink")],1),v._v("翻译，对应"),t("a",{attrs:{href:"https://github.com/fantasticmao/google-java-style-guide-zh_cn",target:"_blank",rel:"noopener noreferrer"}},[v._v("github仓库在新窗口打开"),t("OutboundLink")],1),v._v("。")])]),v._v(" "),t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[v._v("#")]),v._v(" 简介")]),v._v(" "),t("p",[v._v("本文档是 Google Java 语言编程规范的 "),t("strong",[v._v("完整")]),v._v(" 定义。一个 Java 源文件当且仅当遵守本规范时，才可被描述为 Google 风格。")]),v._v(" "),t("p",[v._v("与其它编程规范指南类似，本文档讨论的不仅涉及代码对齐的美观问题，同时还包含其它类型约定和编码规范。然而，本文档侧重于讨论我们普遍遵循的 "),t("strong",[v._v("硬性规定")]),v._v("\n，也避免提供那些无法明确执行的建议。")]),v._v(" "),t("h3",{attrs:{id:"术语说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#术语说明"}},[v._v("#")]),v._v(" 术语说明")]),v._v(" "),t("p",[v._v("在本文档中，除非另有说明：")]),v._v(" "),t("ol",[t("li",[t("em",[v._v("class")]),v._v(" 类 表示 "),t("em",[v._v("ordinary class")]),v._v(" 普通的类、 "),t("em",[v._v("enum class")]),v._v(" 枚举类、 "),t("em",[v._v("interface")]),v._v(" 接口或 "),t("em",[v._v("annotation")]),v._v(" 注解类型。")]),v._v(" "),t("li",[t("em",[v._v("member")]),v._v(" 成员 表示 "),t("em",[v._v("nested class")]),v._v(" 嵌套类、 "),t("em",[v._v("field")]),v._v(" 字段、 "),t("em",[v._v("method")]),v._v(" 方法或 "),t("em",[v._v("constructor")]),v._v(" 者构造方法，即除初始化方法和注释之外，类的所有最顶层内容。")]),v._v(" "),t("li",[t("em",[v._v("comment")]),v._v(" 注释 表示 "),t("em",[v._v("implementation comments")]),v._v(" 实现注释。我们不使用术语 "),t("em",[v._v("documentation comments")]),v._v(" ，而是使用（在 Java 中）更通用的术语 "),t("em",[v._v("Javadoc")]),v._v(" 。")])]),v._v(" "),t("p",[v._v("其它出现在本文档中的术语将另作说明。")]),v._v(" "),t("h3",{attrs:{id:"指南说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指南说明"}},[v._v("#")]),v._v(" 指南说明")]),v._v(" "),t("p",[v._v("本文档中的示例代是 "),t("strong",[v._v("不规范")]),v._v(" 的。也就是说，虽然示例代码是属于 Google\n风格，但并不意味着这是编写优雅代码的唯一方式。示例中代码的风格不应被作为执行的准则。")]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"源文件准则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#源文件准则"}},[v._v("#")]),v._v(" 源文件准则")]),v._v(" "),t("h3",{attrs:{id:"文件名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件名"}},[v._v("#")]),v._v(" 文件名")]),v._v(" "),t("p",[v._v("源文件的名称包含了区分大小写的（并且是 唯一 的）顶级类的类名和 "),t("code",[v._v(".java")]),v._v(" 扩展名组成。")]),v._v(" "),t("h3",{attrs:{id:"文件编码-utf-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件编码-utf-8"}},[v._v("#")]),v._v(" 文件编码：UTF-8")]),v._v(" "),t("p",[v._v("源文件使用 "),t("strong",[v._v("UTF-8")]),v._v(" 编码。")]),v._v(" "),t("h3",{attrs:{id:"特殊字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[v._v("#")]),v._v(" 特殊字符")]),v._v(" "),t("h4",{attrs:{id:"空格字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空格字符"}},[v._v("#")]),v._v(" 空格字符")]),v._v(" "),t("p",[v._v("除了换行符，"),t("strong",[v._v("ASCII 水平空格字符（0x20）")]),v._v(" 是源文件中唯一允许出现的空格字符，这意味着：")]),v._v(" "),t("ol",[t("li",[v._v("字符串和字符字面量中的所有非空格字符都要进行转义。")]),v._v(" "),t("li",[v._v("不允许使用制表符缩进。")])]),v._v(" "),t("h4",{attrs:{id:"特殊转义序列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊转义序列"}},[v._v("#")]),v._v(" 特殊转义序列")]),v._v(" "),t("p",[v._v("对于任何含有\n"),t("a",{attrs:{href:"http://docs.oracle.com/javase/tutorial/java/data/characters.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("特殊转义序列在新窗口打开"),t("OutboundLink")],1),v._v("（\n"),t("code",[v._v("\\b")]),v._v("、"),t("code",[v._v("\\t")]),v._v("、"),t("code",[v._v("\\n")]),v._v("、"),t("code",[v._v("\\f")]),v._v("、"),t("code",[v._v("\\r")]),v._v("、"),t("code",[v._v('\\"')]),v._v("、"),t("code",[v._v("\\'")]),v._v(" 和 "),t("code",[v._v("\\\\")]),v._v(" ）的字符，推荐使用这些转义序列，而不是对应的八进制（例如 "),t("code",[v._v("\\012")]),v._v("\n）或者 Unicode（例如 "),t("code",[v._v("\\u000a")]),v._v(" ）转义字符。")]),v._v(" "),t("h4",{attrs:{id:"非-ascii-字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非-ascii-字符"}},[v._v("#")]),v._v(" 非 ASCII 字符")]),v._v(" "),t("p",[v._v("对剩余的非 ASCII 字符，取决于 "),t("strong",[v._v("更容易阅读和理解")]),v._v(" 的方式，选择 Unicode 字符（例如 "),t("code",[v._v("∞")]),v._v(" ）或等价的 Unicode 转义字符（例如\n"),t("code",[v._v("\\u221e")]),v._v(" ），并且强烈反对在字符串和注释之外使用 Unicode 转义字符。")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("提示")]),v._v(" ：在使用 Unicode 转义字符的情况下，或者偶尔使用实际的 Unicode 字符时，添加解释性的注释是非常有帮助的。")])]),v._v(" "),t("p",[v._v("例如：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("Example")]),v._v(" "),t("th",[v._v("Discussion")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("code",[v._v('String unitAbbrev = "μs";')])]),v._v(" "),t("td",[v._v("最好：没有注释也十分清晰")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v('String unitAbbrev = "\\u03bcs"; // "μs"')])]),v._v(" "),t("td",[v._v("允许：但没理由这么做")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v('String unitAbbrev = "\\u03bcs"; // Greek letter mu, "s"')])]),v._v(" "),t("td",[v._v("允许：但比较笨拙和易出错")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v('String unitAbbrev = "\\u03bcs";')])]),v._v(" "),t("td",[v._v("较差：可读性太差")])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("return '\\ufeff' + content; // byte order mark")])]),v._v(" "),t("td",[v._v("很好：转义字符用于非打印字符时，注释是非常有必要的")])])])]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("提示")]),v._v(" ：不要担心因为一些程序可能不能正确地处理非 ASCII 字符，而使你的代码可读性变差。如果真的发生这种情况，那程序会直接 "),t("strong",[v._v("报错")]),v._v("\n，并需要被 "),t("strong",[v._v("修复")]),v._v(" 。")])]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"源文件结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#源文件结构"}},[v._v("#")]),v._v(" 源文件结构")]),v._v(" "),t("p",[v._v("源文件按以下 "),t("strong",[v._v("顺序")]),v._v(" 包括：")]),v._v(" "),t("ol",[t("li",[v._v("License 或者 Copyright（如果需要的话）")]),v._v(" "),t("li",[v._v("Package 语句")]),v._v(" "),t("li",[v._v("Import 语句")]),v._v(" "),t("li",[v._v("有且只有一个的顶级 Class")])]),v._v(" "),t("p",[v._v("以上每个部分间隔 "),t("strong",[v._v("一个空行")]),v._v(" 。")]),v._v(" "),t("h3",{attrs:{id:"license-或者-copyright-信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#license-或者-copyright-信息"}},[v._v("#")]),v._v(" License 或者 Copyright 信息")]),v._v(" "),t("p",[v._v("如果文件中包含许可证和版权信息，应当至于此处。")]),v._v(" "),t("h3",{attrs:{id:"package-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#package-语句"}},[v._v("#")]),v._v(" Package 语句")]),v._v(" "),t("p",[v._v("Package 语句不允许换行。单行字符限制（ 列限制：100 章节）不适用于 Package 语句。")]),v._v(" "),t("h3",{attrs:{id:"import-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import-语句"}},[v._v("#")]),v._v(" Import 语句")]),v._v(" "),t("h4",{attrs:{id:"不允许通配符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不允许通配符"}},[v._v("#")]),v._v(" 不允许通配符")]),v._v(" "),t("p",[t("strong",[v._v("不允许")]),v._v(" 使用静态或者其它形式的 "),t("strong",[v._v("通配符导入")]),v._v(" 。")]),v._v(" "),t("h4",{attrs:{id:"不允许换行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不允许换行"}},[v._v("#")]),v._v(" 不允许换行")]),v._v(" "),t("p",[v._v("Import 语句 "),t("strong",[v._v("不允许")]),v._v(" 换行。单行字符限制（ 列限制：100 章节）不适用于 Import 语句。")]),v._v(" "),t("h4",{attrs:{id:"顺序和间隔"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序和间隔"}},[v._v("#")]),v._v(" 顺序和间隔")]),v._v(" "),t("p",[v._v("Import 语句应按以下方式排序：")]),v._v(" "),t("ol",[t("li",[v._v("所有静态导入归一组。")]),v._v(" "),t("li",[v._v("所有非静态导入归一组。")])]),v._v(" "),t("p",[v._v("如果同时存在静态导入和非静态导入，则应使用空行分隔它们。除此之外，在 Import 语句中不允许使用其它空行。")]),v._v(" "),t("p",[v._v("每组中的 Import 语句以 ASCII 编码顺序先后出现。（"),t("strong",[v._v("注意")]),v._v(" ：因为 "),t("code",[v._v(".")]),v._v(" 符号的 ASCII 编码排在 "),t("code",[v._v(";")]),v._v("\n符号之前，所以这与单纯的按 ASCII 编码排序略有不同。）")]),v._v(" "),t("h4",{attrs:{id:"不允许类的静态导入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不允许类的静态导入"}},[v._v("#")]),v._v(" 不允许类的静态导入")]),v._v(" "),t("p",[v._v("静态内部类以常规方式导入，而不是使用静态导入。")]),v._v(" "),t("h3",{attrs:{id:"class-定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-定义"}},[v._v("#")]),v._v(" Class 定义")]),v._v(" "),t("h4",{attrs:{id:"有且仅有一个顶级类的声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有且仅有一个顶级类的声明"}},[v._v("#")]),v._v(" 有且仅有一个顶级类的声明")]),v._v(" "),t("p",[v._v("每个顶级类都定义在它们的源文件中。")]),v._v(" "),t("h4",{attrs:{id:"类内容顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类内容顺序"}},[v._v("#")]),v._v(" 类内容顺序")]),v._v(" "),t("p",[v._v("类的成员和初始化方法的顺序对代码可读性有着很重要的影响。然而，对此并没有一个统一正确的标准：不同的类可能有不同的排序内容的方式。")]),v._v(" "),t("p",[v._v("重要的是，每个类都应该使用该类的维护者可以解释清楚的 "),t("strong",[v._v("逻辑排序")]),v._v("\n。例如，新的方法不是习惯性地添加到类的最后，因为「按时间顺序添加」并不是一种逻辑顺序。")]),v._v(" "),t("h5",{attrs:{id:"方法重载-不应被分离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法重载-不应被分离"}},[v._v("#")]),v._v(" 方法重载：不应被分离")]),v._v(" "),t("p",[v._v("当一个类拥有多个构造方法或者多个同名方法时，它们应该按顺序出现，中间没有其它代码（甚至是私有成员）。")]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"格式化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#格式化"}},[v._v("#")]),v._v(" 格式化")]),v._v(" "),t("p",[t("strong",[v._v("术语说明")]),v._v(" ： "),t("em",[v._v("block-like construct")]),v._v(" 块状结构 指类或者普通方法或者构造方法的主体。注意，在后续 数组初始化\n章节中，任何数组的初始化可以选择被认为是一个块状结构。")]),v._v(" "),t("h3",{attrs:{id:"花括号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#花括号"}},[v._v("#")]),v._v(" 花括号")]),v._v(" "),t("h4",{attrs:{id:"花括号在被需要的地方使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#花括号在被需要的地方使用"}},[v._v("#")]),v._v(" 花括号在被需要的地方使用")]),v._v(" "),t("p",[v._v("花括号被使用于 "),t("code",[v._v("if")]),v._v("、"),t("code",[v._v("else")]),v._v("、"),t("code",[v._v("for")]),v._v("、"),t("code",[v._v("do")]),v._v("、"),t("code",[v._v("while")]),v._v(" 语句，即使它们的语句主体是空或者仅包含一条语句。")]),v._v(" "),t("h4",{attrs:{id:"非空语句块-k-r-风格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非空语句块-k-r-风格"}},[v._v("#")]),v._v(" 非空语句块：K & R 风格")]),v._v(" "),t("p",[v._v("对于非空语句块和块状结构，花括号的使用方式遵循 Kernighan & Ritchie 风格（[Egyptian\nbrackets在新窗口打开](http://www.codinghorror.com/blog/2012/07/new-programming-\njargon.html)）：")]),v._v(" "),t("ul",[t("li",[v._v("左花括号之前不能换行。")]),v._v(" "),t("li",[v._v("左花括号之后换行。")]),v._v(" "),t("li",[v._v("右花括号之前换行。")]),v._v(" "),t("li",[v._v("仅在右花括号结束一条语句或者方法 / 构造方法 / 类的主体时，右花括号之后才换行。例如 "),t("code",[v._v("else")]),v._v(" 和逗号之后的花括号不能换行。")])]),v._v(" "),t("p",[v._v("例如：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("return () -> {\n  while (condition()) {\n    method();\n  }\n};\n\nreturn new MyClass() {\n  @Override public void method() {\n    if (condition()) {\n      try {\n\tsomething();\n      } catch (ProblemException e) {\n\trecover();\n      }\n    } else if (otherCondition()) {\n      somethingElse();\n    } else {\n      lastThing();\n    }\n  }\n};\n")])])]),t("p",[v._v("关于枚举类的一些特殊情况，将在 枚举类 章节说明。")]),v._v(" "),t("h4",{attrs:{id:"空语句块-可以简洁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空语句块-可以简洁"}},[v._v("#")]),v._v(" 空语句块：可以简洁")]),v._v(" "),t("p",[v._v("一个空的语句块或者块状结构可以遵循 K & R 风格（正如在 非空语句块 章节所中描述的）。或者，当它不是 "),t("em",[v._v("multi-block statement")]),v._v("\n多块语句（一个包含多块的语句，例如："),t("code",[v._v("if / else")]),v._v("、"),t("code",[v._v("try / catch / finally")]),v._v("\n）一部分的时候，可以在左花括号开始之后立即使用右花括号结束，"),t("code",[v._v("{}")]),v._v(" 之中不包含任何字符或者换行符。")]),v._v(" "),t("p",[v._v("例如：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("// This is acceptable\nvoid doNothing() {}\n\n// This is equally acceptable\nvoid doNothingElse() {\n}\n\n\n\n// This is not acceptable: No concise empty blocks in a multi-block statement\ntry {\n  doSomething();\n} catch (Exception e) {}\n")])])]),t("h3",{attrs:{id:"块缩进-2-个空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#块缩进-2-个空格"}},[v._v("#")]),v._v(" 块缩进：+2 个空格")]),v._v(" "),t("p",[v._v("每当新写一个语句块或者块状结构时，增加 2 个空格的缩进。当语句块结束时，返回至上一级别的缩进。语句块的缩进规则适用于所有代码和注释。（代码示例请见\n非空语句块：K & R 风格 章节）")]),v._v(" "),t("h3",{attrs:{id:"一条语句占一行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一条语句占一行"}},[v._v("#")]),v._v(" 一条语句占一行")]),v._v(" "),t("p",[v._v("每条语句的最后都有换行符。")]),v._v(" "),t("h3",{attrs:{id:"列限制-100"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列限制-100"}},[v._v("#")]),v._v(" 列限制：100")]),v._v(" "),t("p",[v._v("Java 代码的列限制为 100 个字符。这儿的「字符」意味着任意的 Unicode 码位。除非另有说明，任何超过此限制的代码行都必须被换行，正如在 换行\n章节中所描述的。")]),v._v(" "),t("blockquote",[t("p",[v._v("每个 Unicode 码位都算作一个字符，不论它显示得更宽或者更窄。例如，如果使用\n"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms",target:"_blank",rel:"noopener noreferrer"}},[v._v("全角字符在新窗口打开"),t("OutboundLink")],1),v._v("\n的话，为了遵守这条严格的要求，可以选择提前换行。")])]),v._v(" "),t("p",[v._v("特殊情况：")]),v._v(" "),t("ul",[t("li",[v._v("无法遵守列限制的代码行（例如 Javadoc 中的很长的 URL，或者 JSNI 中很长的方法引用）。")]),v._v(" "),t("li",[v._v("Package 语句和 Import 语句（请见 Package 语句 和 Import 语句 章节）。")]),v._v(" "),t("li",[v._v("注释中可能直接被复制粘贴执行的 Shell 命令。")])]),v._v(" "),t("h3",{attrs:{id:"换行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#换行"}},[v._v("#")]),v._v(" 换行")]),v._v(" "),t("p",[t("strong",[v._v("术语说明")]),v._v(" ：将原本可以合法写在一行的代码拆分成多行，这种行为称作 "),t("em",[v._v("line-wrapping")]),v._v(" 换行。")]),v._v(" "),t("p",[v._v("没有全面和明确的准则，可以准确描述每种场景下该如何进行换行。对于同一段代码，通常会有多种有效可行的换行方法。")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("注意")]),v._v(" ：换行的典型原因是为了避免代码超出了列数的限制，不过即使符合列限制的一行代码，也可以依据作者的决定而换行。")])]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("提示")]),v._v(" ：提取方法或者局部变量或许可以避免换行的问题。")])]),v._v(" "),t("h4",{attrs:{id:"在何处换行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在何处换行"}},[v._v("#")]),v._v(" 在何处换行")]),v._v(" "),t("p",[v._v("换行指令的主要内容是：倾向于在 "),t("strong",[v._v("较高语法级别")]),v._v(" 处中断一行代码。并且：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("当一行代码的中断发生在 "),t("em",[v._v("non-assignment")]),v._v(" 非赋值运算符时，需要在该运算符之前换行。（注意这与其它语言的 Google 编程风格不同，例如 C++ 和 JavaScript）")]),v._v(" "),t("ul",[t("li",[v._v("这条规则也适用于以下「类似操作符」的符号：\n"),t("ul",[t("li",[v._v("点分隔符（ "),t("code",[v._v(".")]),v._v(" ）")]),v._v(" "),t("li",[v._v("方法引用中的两个冒号（ "),t("code",[v._v("::")]),v._v(" ）")]),v._v(" "),t("li",[v._v("类型约束中的 & 符号（ "),t("code",[v._v("T <extends Foo Foo & Bar>")]),v._v(" ）")]),v._v(" "),t("li",[v._v("异常捕获中的 | 符号（ "),t("code",[v._v("catch (FooException | BarException e)")]),v._v(" ）")])])])])]),v._v(" "),t("li",[t("p",[v._v("当一行代码的中断发生在 "),t("em",[v._v("assignment")]),v._v(" 赋值运算符时，需要在该运算符之后换行，但在之前换行也可以接受。")]),v._v(" "),t("ul",[t("li",[v._v("这条规则也适用于 foreach 语句中「类似赋值操作符」的冒号。")])])]),v._v(" "),t("li",[t("p",[v._v("方法或者构造方法的名称紧随着与它相连的开括号 "),t("code",[v._v("(")]),v._v("。")])]),v._v(" "),t("li",[t("p",[v._v("逗号 "),t("code",[v._v(",")]),v._v(" 紧随着它之前的内容。")])]),v._v(" "),t("li",[t("p",[v._v("在 lambda 语句中，和箭头符号相邻的那行代码永远不会换行，除非 lambda 语句的主体仅是一个不带括号的表达式，并且能紧随着 lambda 语句的箭头立即出现的情况下。例如：")]),v._v(" "),t("p",[v._v("MyLambda<String, Long, Object> lambda =\n(String label, Long value, Object obj) -> {\n...\n};")])])]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("Predicate<String> predicate = str ->\n    longExpressionInvolving(str);\n")])])]),t("blockquote",[t("p",[t("strong",[v._v("注意")]),v._v(" ：换行的主要目的是为了拥有清晰的代码，总代码的行数 "),t("strong",[v._v("不必")]),v._v(" 是越少越好的。")])]),v._v(" "),t("h4",{attrs:{id:"换行缩进至少-4-个空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#换行缩进至少-4-个空格"}},[v._v("#")]),v._v(" 换行缩进至少 +4 个空格")]),v._v(" "),t("p",[v._v("进行换行时，第一行（在连续换行的多行代码中）之后的每行代码至少比之前的那行多缩进 +4 个空格。")]),v._v(" "),t("p",[v._v("当进行连续换行时，代码的缩进可以根据实际需要超过 +4 个空格。一般来说，当且仅当两行代码以平级的语法元素开头时，它们才会拥有相同级别的缩进。")]),v._v(" "),t("p",[v._v("在 水平对齐 章节中介绍了不建议使用数量不确定的空格来与上一行代码中的某些单词（token）对齐。")]),v._v(" "),t("h3",{attrs:{id:"空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空格"}},[v._v("#")]),v._v(" 空格")]),v._v(" "),t("h4",{attrs:{id:"垂直空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垂直空格"}},[v._v("#")]),v._v(" 垂直空格")]),v._v(" "),t("p",[v._v("单个空行总是出现在以下情况中：")]),v._v(" "),t("ol",[t("li",[v._v("类中连续的成员或初始化方法之间，包括：字段、构造方法、方法、内部类、静态初始化代码块、实例初始化代码块。\n"),t("ul",[t("li",[t("strong",[v._v("特殊情况")]),v._v(" ：两个连续字段（它们之间没有其它代码）之间的空行是可选的。可以根据实际需要，用空行去创建字段之间的 "),t("em",[v._v("logical groupings")]),v._v(" 逻辑分组。")]),v._v(" "),t("li",[t("strong",[v._v("特殊情况")]),v._v(" ：枚举常量之间的空行在 枚举类 章节中介绍。")])])]),v._v(" "),t("li",[v._v("本文档其它章节中所要求的（例如 源文件结构 章节和 Import 语句 章节）")])]),v._v(" "),t("p",[v._v("单个空行也可以出现在任何需要提高代码可读性的地方，例如在将代码组织成一小块逻辑的语句之间。不鼓励也不反对将单个空行出现在类的第一个成员或初始化方法的之前，或者最后一个成员或初始化方法的之后。")]),v._v(" "),t("p",[v._v("多个连续的空行是允许的，但这不是本文档所要求的（或者是鼓励的）。")]),v._v(" "),t("h4",{attrs:{id:"水平空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#水平空格"}},[v._v("#")]),v._v(" 水平空格")]),v._v(" "),t("p",[v._v("除了编程语言或者编程规范的要求之外，除了在字面量、注释和 Javadoc 之外，单个 ASCII 空格 "),t("strong",[v._v("仅")]),v._v(" 在以下位置出现：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("分隔任何的保留关键字，例如 "),t("code",[v._v("if")]),v._v("、"),t("code",[v._v("for")]),v._v("、"),t("code",[v._v("catch")]),v._v(" ，与它们之后的开括号 "),t("code",[v._v("(")]),v._v("。")])]),v._v(" "),t("li",[t("p",[v._v("分隔任何的保留关键字，例如 "),t("code",[v._v("else")]),v._v("、"),t("code",[v._v("catch")]),v._v("，与它之前的右花括号 "),t("code",[v._v("}")]),v._v("。")])]),v._v(" "),t("li",[t("p",[v._v("任何的左花括号 "),t("code",[v._v("{")]),v._v(" 之前，除了以下两种特殊情况：")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("@SomeAnnotation({a, b})")]),v._v("（没有使用空格）")]),v._v(" "),t("li",[t("code",[v._v("String[][] x = "+v._s("foo")+";")]),v._v("（ "),t("code",[v._v("{{")]),v._v(" 之间不需要使用空格，请见往下的第 8 条规则）")])])]),v._v(" "),t("li",[t("p",[v._v("任何的二元或三元操作符的两侧。这条规则也适用于以下「类似操作符」的符号：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("类型约束中的 & 符："),t("code",[v._v("<T extends Foo & Bar>")])])]),v._v(" "),t("li",[t("p",[v._v("捕获多个异常中的 | 符："),t("code",[v._v("catch (FooException | BarException e)")])])]),v._v(" "),t("li",[t("p",[v._v("foreach 语句中的冒号（ "),t("code",[v._v(":")]),v._v(" ）")])]),v._v(" "),t("li",[t("p",[v._v("lambda 表达式中的箭头："),t("code",[v._v("(String str) -> str.length()")])])])])])]),v._v(" "),t("p",[v._v("但除了：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v(" * 方法引用中的两个冒号（ `::` ），写法类似于 `Object::toString`\n\n * 点分隔符（ `.` ），写法类似于 `Object.toString()`\n")])])]),t("ol",{attrs:{start:"5"}},[t("li",[t("p",[v._v("在 "),t("code",[v._v(",:;")]),v._v(" 符号或者类型转换的闭括号 "),t("code",[v._v(")")]),v._v(" 之后。")])]),v._v(" "),t("li",[t("p",[v._v("在行尾注释中开头的双斜杠（ "),t("code",[v._v("//")]),v._v(" ）两侧。此处多个空格也是允许的，但不是必须的。")])]),v._v(" "),t("li",[t("p",[v._v("在类型和变量的定义之间："),t("code",[v._v("List<String> list")]),v._v("。")])]),v._v(" "),t("li",[t("p",[v._v("在数组初始化的两个花括号的内侧。这条规则不是必须的。")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("new int[] {5, 6}")]),v._v(" 和 "),t("code",[v._v("new int[] { 5, 6 }")]),v._v(" 都是有效的")])])]),v._v(" "),t("li",[t("p",[v._v("在注解和 "),t("code",[v._v("[]")]),v._v(" 或 "),t("code",[v._v("...")]),v._v(" 之间。")])])]),v._v(" "),t("p",[v._v("这条规则不会被解释为要求或者禁止在行首或者行尾使用额外的空格，它只针对于行内的空格。")]),v._v(" "),t("h4",{attrs:{id:"水平对齐-从不要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#水平对齐-从不要求"}},[v._v("#")]),v._v(" 水平对齐：从不要求")]),v._v(" "),t("p",[t("strong",[v._v("术语说明")]),v._v(" ： "),t("em",[v._v("Horizontal alignment")]),v._v(" 水平对齐\n是为了使某些单词（token）出现在上一行代码中的另一些单词的正下方，从而在代码中添加额外的数量不确定的空格的做法。")]),v._v(" "),t("p",[v._v("这种做法是允许的，但在 Google 编程规范中却不是必须的。甚至不要求在已经水平对齐的地方继续保持水平对齐。")]),v._v(" "),t("p",[v._v("如下是一个首先未对齐，然后再对齐的例子：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("private int x; // this is fine\nprivate Color color; // this too\n\nprivate int   x;      // permitted, but future edits\nprivate Color color;  // may leave it unaligned\n")])])]),t("blockquote",[t("p",[t("strong",[v._v("提示")]),v._v("\n：水平对齐有助于阅读代码，但却难以日后维护。考虑这样一种情况：日后的改动需要调整一行代码，这个改动可能会破坏原本令人愉悦的代码格式，不过这种改动是\n"),t("strong",[v._v("允许")]),v._v("\n的。（IDE）通常会提示编码人员（也许是你自己）调整附近代码行中的空格，但这可能会触发一系列的代码格式化，于是这个一行代码的改动就导致了一个「范围爆炸」。在最坏的情况下，这可能会导致大量毫无意义的工作。在最好的情况下，这依然会混淆代码版本中的历史信息、减缓代码评审的速度、加速代码合并的冲突。")])]),v._v(" "),t("h3",{attrs:{id:"分组括号-推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组括号-推荐"}},[v._v("#")]),v._v(" 分组括号：推荐")]),v._v(" "),t("p",[v._v("只有当开发人员和评审人员都同意，没有分组括号时代码的阅读者不会想当然地错误理解，或者分组括号不会更有助于阅读代码的情况下，才可以省略可选的分组括号。假定每个阅读者都熟记整个\nJava 运算符的优先级是不合理的。")]),v._v(" "),t("h3",{attrs:{id:"特定结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特定结构"}},[v._v("#")]),v._v(" 特定结构")]),v._v(" "),t("h4",{attrs:{id:"枚举类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举类"}},[v._v("#")]),v._v(" 枚举类")]),v._v(" "),t("p",[v._v("每个枚举常量的逗号之后可以选择性地换行，同时也允许添加额外的空行（通常只有一个）。以下是一种可能的例子：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v('private enum Answer {\n  YES {\n    @Override public String toString() {\n      return "yes";\n    }\n  },\n\n  NO,\n  MAYBE\n}\n')])])]),t("p",[v._v("没有方法和注释的枚举常量可以写成数组初始化的方式（请见 数组初始化 章节）。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }\n")])])]),t("p",[v._v("由于枚举类也是类，因此所有对于类的格式化规则也适用于枚举类。")]),v._v(" "),t("h4",{attrs:{id:"变量声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[v._v("#")]),v._v(" 变量声明")]),v._v(" "),t("h5",{attrs:{id:"每次声明一个变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#每次声明一个变量"}},[v._v("#")]),v._v(" 每次声明一个变量")]),v._v(" "),t("p",[v._v("每次变量声明（字段或局部变量）只声明一个变量：例如 "),t("code",[v._v("int a, b;")]),v._v(" 形式的变量声明是不允许的。")]),v._v(" "),t("p",[t("strong",[v._v("特殊情况")]),v._v(" ：可以在 "),t("code",[v._v("for")]),v._v(" 循环的头部中声明多个变量。")]),v._v(" "),t("h5",{attrs:{id:"在需要时声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在需要时声明"}},[v._v("#")]),v._v(" 在需要时声明")]),v._v(" "),t("p",[v._v("局部变量 "),t("strong",[v._v("不是")]),v._v("\n习惯性地声明在它们所属的代码块或者块状结构的起始位置。相反地，局部变量声明在它们第一次被使用的地方（在合理范围之内），这样做是为了最小化局部变量的作用域。局部变量声明通常具有初始值，或者会在声明之后立即初始化。")]),v._v(" "),t("h4",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[v._v("#")]),v._v(" 数组")]),v._v(" "),t("h5",{attrs:{id:"数组初始化-可以写成块状结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组初始化-可以写成块状结构"}},[v._v("#")]),v._v(" 数组初始化：可以写成块状结构")]),v._v(" "),t("p",[v._v("任何数组的初始化可以选择写成「类似块状结构」的格式。例如，以下例子都是合法的（不全）：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("new int[] {           new int[] {\n  0, 1, 2, 3            0,\n}                       1,\n                        2,\nnew int[] {             3,\n  0, 1,               }\n  2, 3\n}                     new int[]\n                          {0, 1, 2, 3}\n")])])]),t("h5",{attrs:{id:"拒绝使用-c-语言式的声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拒绝使用-c-语言式的声明"}},[v._v("#")]),v._v(" 拒绝使用 C 语言式的声明")]),v._v(" "),t("p",[v._v("方括号是类型而非变量的一部分："),t("code",[v._v("String[] args")]),v._v(" 是合法的，"),t("code",[v._v("String args[]")]),v._v(" 是非法的。")]),v._v(" "),t("h4",{attrs:{id:"switch-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#switch-语句"}},[v._v("#")]),v._v(" switch 语句")]),v._v(" "),t("p",[t("strong",[v._v("术语说明")]),v._v(" ： switch 语句块的花括号内是一个或多个 "),t("em",[v._v("statement groups")]),v._v(" 语句组。每个语句组都包含了一个或多个 switch\n标签（ "),t("code",[v._v("case Foo:")]),v._v(" 或者 "),t("code",[v._v("default:")]),v._v(" ），switch\n标签之后跟随着一条或多条语句（或者，对于最后一个语句组，它可以包含零条或多条语句）。")]),v._v(" "),t("h5",{attrs:{id:"缩进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缩进"}},[v._v("#")]),v._v(" 缩进")]),v._v(" "),t("p",[v._v("和其它任何语句块一样，switch 语句块中的内容缩进 +2 个空格。")]),v._v(" "),t("p",[v._v("switch 标签之后会有一个换行，并增加 +2 个缩进级别，就好像是在开始一段新的代码块。之后的 switch\n标签返回到上一个缩进级别，好像是结束了一段代码块。")]),v._v(" "),t("h5",{attrs:{id:"匹配失败-需要注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配失败-需要注释"}},[v._v("#")]),v._v(" 匹配失败：需要注释")]),v._v(" "),t("p",[v._v("在 switch 语句块中，每个语句组会突然终止（使用 "),t("code",[v._v("break")]),v._v("、"),t("code",[v._v("continue")]),v._v("、"),t("code",[v._v("return")]),v._v("\n关键字、或者抛出异常），或者会有注释标记着程序可能会继续执行到下一个语句组。任何可以表达匹配失败意思的注释都是可行的（例如典型的 "),t("code",[v._v("// fall through")]),v._v(" ）。在最后一个语句组中，这个特殊的注释不是必须的。例如：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("switch (input) {\n  case 1:\n  case 2:\n    prepareOneOrTwo();\n    // fall through\n  case 3:\n    handleOneTwoOrThree();\n    break;\n  default:\n    handleLargeNumber(input);\n}\n")])])]),t("p",[v._v("注意在 "),t("code",[v._v("case 1:")]),v._v(" 之后不需要注释，只有在语句组之后才需要使用注释。")]),v._v(" "),t("h5",{attrs:{id:"default-分支是必须的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#default-分支是必须的"}},[v._v("#")]),v._v(" default 分支是必须的")]),v._v(" "),t("p",[v._v("每个 switch 语句都包含了一个 "),t("code",[v._v("default")]),v._v(" 语句组，即使它不包含任何代码。")]),v._v(" "),t("p",[t("strong",[v._v("特殊情况")]),v._v(" ：如果 "),t("code",[v._v("enum")]),v._v(" 类型的 switch 语句明确包含了覆盖所有可能性的枚举值，那么它可以省略 "),t("code",[v._v("default")]),v._v("\n语句组。如果遗漏了任何情况，IDE 和静态分析工具可以发出警告。")]),v._v(" "),t("h4",{attrs:{id:"注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[v._v("#")]),v._v(" 注解")]),v._v(" "),t("p",[v._v("用于类、方法和构造方法的注解出现在文档之后，并且每个注解都写在它们所属的行上（这意味着，每个注解占用一行）。这些注解所占用的行不构成换行（请见 换行\n章节），因此缩进级别不会增加。例如：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("@Override\n@Nullable\npublic String getNameIfPresent() { ... }\n")])])]),t("p",[t("strong",[v._v("特殊情况")]),v._v(" ：一个单独的没有参数的注解可以相反地和方法签名的第一行一起出现，例如：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("@Override public int hashCode() { ... }\n")])])]),t("p",[v._v("用于字段的注解也出现在文档之后，但这种情况下，多个注解（可能会有参数）可以写在同一行上。例如：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("@Partial @Mock DataLoader loader;\n")])])]),t("p",[v._v("用于参数、局部变量和类型的注解没有特定的格式化规则。")]),v._v(" "),t("h4",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[v._v("#")]),v._v(" 注释")]),v._v(" "),t("p",[v._v("本章节介绍 "),t("em",[v._v("implementation comments")]),v._v(" 实现注释。Javadoc 将在 Javadoc 章节单独介绍。")]),v._v(" "),t("p",[v._v("任何换行符之前都可以有任意数量的跟随着实现注释的空格。这样的注释使该行成为非空白的。")]),v._v(" "),t("h5",{attrs:{id:"注释块样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释块样式"}},[v._v("#")]),v._v(" 注释块样式")]),v._v(" "),t("p",[v._v("注释块与它周围的代码拥有相同的缩进级别。注释块可以是 "),t("code",[v._v("/* ... */")]),v._v(" 样式或 "),t("code",[v._v("// ...")]),v._v(" 样式。对于多行注释 "),t("code",[v._v("/* ... */")]),v._v("，后续的行中必须以 "),t("code",[v._v("*")]),v._v(" 开头并且与上一行中的 "),t("code",[v._v("*")]),v._v(" 保持对齐。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("/*\n * This is          // And so           /* Or you can\n * okay.            // is this.          * even do this. */\n */\n")])])]),t("p",[v._v("注释不会被包含在由星号或者其它字符绘制的框中。")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("提示")]),v._v(" ：当写多行注释的时候，如果你希望能为了在必要的时候重新包装每行代码而自动格式化（段落样式），那么应使用 "),t("code",[v._v("/* ... */")]),v._v("\n样式。大多数格式化程序不会重新包装 "),t("code",[v._v("// ...")]),v._v(" 样式中的注释块。")])]),v._v(" "),t("h4",{attrs:{id:"修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[v._v("#")]),v._v(" 修饰符")]),v._v(" "),t("p",[v._v("类和成员如果存在修饰符的话，应以 Java 语言规范建议的顺序出现：")]),v._v(" "),t("p",[t("code",[v._v("public protected private abstract default static final transient volatile synchronized native strictfp")])]),v._v(" "),t("h4",{attrs:{id:"数字字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数字字面量"}},[v._v("#")]),v._v(" 数字字面量")]),v._v(" "),t("p",[t("code",[v._v("long")]),v._v(" 数值的整数字面量会使用大写的 "),t("code",[v._v("L")]),v._v(" 后缀，永远不要使用小写（避免与数字 "),t("code",[v._v("1")]),v._v(" 混淆）。例如，使用 "),t("code",[v._v("3000000000L")]),v._v(" 而不是\n"),t("code",[v._v("3000000000l")]),v._v("。")]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"命名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名"}},[v._v("#")]),v._v(" 命名")]),v._v(" "),t("h3",{attrs:{id:"适用于所有标识符的通用规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适用于所有标识符的通用规则"}},[v._v("#")]),v._v(" 适用于所有标识符的通用规则")]),v._v(" "),t("p",[v._v("标识符只允许使用 ASCII 字母和数字，并且在少数情况中可以使用下划线。因此，每个有效的标识符都可以由正则表达式 "),t("code",[v._v("\\w+")]),v._v(" 匹配。")]),v._v(" "),t("p",[v._v("在 Google 风格中，"),t("strong",[v._v("不")]),v._v(" 会使用特殊的前缀或后缀，例如，这些命名不是 Google 风格的："),t("code",[v._v("name_")]),v._v("、"),t("code",[v._v("mName")]),v._v("、"),t("code",[v._v("s_name")]),v._v(" 和\n"),t("code",[v._v("kName")]),v._v("。")]),v._v(" "),t("h3",{attrs:{id:"各种类型的标识符的规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各种类型的标识符的规则"}},[v._v("#")]),v._v(" 各种类型的标识符的规则")]),v._v(" "),t("h4",{attrs:{id:"包名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包名"}},[v._v("#")]),v._v(" 包名")]),v._v(" "),t("p",[v._v("包名全是小写的，连续的单词只需要简单地串联在一起（不使用下划线）。例如，使用 "),t("code",[v._v("com.example.deepspace")]),v._v("，而不是\n"),t("code",[v._v("com.example.deepSpace")]),v._v(" 或者 "),t("code",[v._v("com.example.deep_space")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"类名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类名"}},[v._v("#")]),v._v(" 类名")]),v._v(" "),t("p",[v._v("类名以 大骆峰 方式编写。")]),v._v(" "),t("p",[v._v("类名通常是名词或者名词短语。例如 "),t("code",[v._v("Character")]),v._v(" 或者 "),t("code",[v._v("ImmutableList")]),v._v("。接口名可能也是名词或名词短语（例如 "),t("code",[v._v("List")]),v._v("\n），但有时候也可能是形容词或形容词短语（例如 "),t("code",[v._v("Readable")]),v._v(" ）。")]),v._v(" "),t("p",[v._v("注解类型的命名没有特定的规则或者完善的约定。")]),v._v(" "),t("p",[v._v("测试类以被测试类的名称开头，并且以 "),t("code",[v._v("Test")]),v._v(" 结尾。例如 "),t("code",[v._v("HashTest")]),v._v(" 或者 "),t("code",[v._v("HashIntegrationTest")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"方法名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法名"}},[v._v("#")]),v._v(" 方法名")]),v._v(" "),t("p",[v._v("方法名以 小骆峰 方式编写。")]),v._v(" "),t("p",[v._v("方法名通常是动词或者动词短语。例如 "),t("code",[v._v("sendMessage")]),v._v(" 或者 "),t("code",[v._v("stop")]),v._v("。")]),v._v(" "),t("p",[v._v("下划线可能为了分离命名上的逻辑组件，而出现在 Junit 测试方法名中，每个组件都以 小骆峰 方式编写。一个典型的模式是\n"),t("code",[v._v("<methodUnderTest>_<state>")]),v._v("，例如 "),t("code",[v._v("pop_emptyStack")]),v._v("。测试方法的命名没有一种唯一正确的方式。")]),v._v(" "),t("h4",{attrs:{id:"常量名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量名"}},[v._v("#")]),v._v(" 常量名")]),v._v(" "),t("p",[v._v("常量使用 "),t("code",[v._v("CONSTANT_CASE")]),v._v(" 的格式命名：全大写，单词之间以下划线分隔。但常量究竟意味着什么？")]),v._v(" "),t("p",[v._v("常量是 static final 修饰的字段，常量的内容是深不可变的（deeply\nimmutable)，并且常量的方法是没有副作用的。这包括了原始类型、字符串、不可变类型、不可变类型的不可变集合。如果实例的任何外在状态是可变的，那它就不属于常量。仅仅保证实例引用的不可变属性是不够的。例如：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v('// Constants\nstatic final int NUMBER = 5;\nstatic final ImmutableList<String> NAMES = ImmutableList.of("Ed", "Ann");\nstatic final ImmutableMap<String, Integer> AGES = ImmutableMap.of("Ed", 35, "Ann", 32);\nstatic final Joiner COMMA_JOINER = Joiner.on(\',\'); // because Joiner is immutable\nstatic final SomeMutableType[] EMPTY_ARRAY = {};\nenum SomeEnum { ENUM_CONSTANT }\n\n// Not constants\nstatic String nonFinal = "non-final";\nfinal String nonStatic = "non-static";\nstatic final Set<String> mutableCollection = new HashSet<String>();\nstatic final ImmutableSet<SomeMutableType> mutableElements = ImmutableSet.of(mutable);\nstatic final ImmutableMap<String, SomeMutableType> mutableValues =\n    ImmutableMap.of("Ed", mutableInstance, "Ann", mutableInstance2);\nstatic final Logger logger = Logger.getLogger(MyClass.getName());\nstatic final String[] nonEmptyArray = {"these", "can", "change"};\n')])])]),t("p",[v._v("常量名通常是名词或者名词短语。")]),v._v(" "),t("h4",{attrs:{id:"非常量字段名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非常量字段名"}},[v._v("#")]),v._v(" 非常量字段名")]),v._v(" "),t("p",[v._v("非常量字段名（静态或者其它形式）以 小骆峰 方式编写。")]),v._v(" "),t("p",[v._v("非常量字段名通常是名词或者名词短语。例如："),t("code",[v._v("computedValues")]),v._v(" 或者 "),t("code",[v._v("index")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"参数名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数名"}},[v._v("#")]),v._v(" 参数名")]),v._v(" "),t("p",[v._v("参数名以 小骆峰 方式编写。")]),v._v(" "),t("p",[v._v("public 方法中应该避免使用一个字符的参数名。")]),v._v(" "),t("h4",{attrs:{id:"局部变量名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#局部变量名"}},[v._v("#")]),v._v(" 局部变量名")]),v._v(" "),t("p",[v._v("局部变量名以 小骆峰 方式编写。")]),v._v(" "),t("p",[v._v("即使是 final 和不可变的，局部变量也不被认为是常量，并且不应该以常量的风格命名。")]),v._v(" "),t("h4",{attrs:{id:"类型变量名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型变量名"}},[v._v("#")]),v._v(" 类型变量名")]),v._v(" "),t("p",[v._v("类型变量名以如下两者之一方式编写：")]),v._v(" "),t("ul",[t("li",[v._v("一个大写字母，可选地跟随着一个数字（例如 "),t("code",[v._v("E")]),v._v("，"),t("code",[v._v("T")]),v._v("，"),t("code",[v._v("X")]),v._v("，"),t("code",[v._v("T2")]),v._v(" ）。")]),v._v(" "),t("li",[v._v("以类名的方式命名（请见 类名 章节），跟随着大写字母 T（例如："),t("code",[v._v("RequestT")]),v._v("，"),t("code",[v._v("FooBarT")]),v._v(" ）。")])]),v._v(" "),t("h3",{attrs:{id:"骆驼峰形式-定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#骆驼峰形式-定义"}},[v._v("#")]),v._v(" 骆驼峰形式：定义")]),v._v(" "),t("p",[v._v("有时候会有多种合理的方式用于将英语短语转换为驼峰形式，例如当英语短语里出现首字母缩略词或者不寻常结构的单词（例如「iOS」和「IPv6」）时。为了提高代码的可预测性，\nGoogle 编程风格指定了以下（近乎）明确的方案。")]),v._v(" "),t("p",[v._v("从命名的文字构成开始：")]),v._v(" "),t("ol",[t("li",[v._v("将短语转换为纯 ASCII 编码，并且删除任何的撇号。例如，「Müller's algorithm」可以转换为「Muellers algorithm」。")]),v._v(" "),t("li",[v._v("以空格和任何剩余的标点符号（通常是连字符），将短语划分为单词。\n"),t("ul",[t("li",[v._v("推荐：如果任何单词在普遍用法中已经具有常规的驼峰形式，那就将它分解成它的组成部分（例如，将「AdWords」变成「ad words」）。注意例如「iOS」之类的单词本身并不是驼峰形式。它违反了一些约定，因此这条规则并不适用。")])])]),v._v(" "),t("li",[v._v("现在将所有内容转换为小写（包括首字母缩略词），然后只将以下内容的第一个字符转换为大写：\n"),t("ul",[t("li",[v._v("... 每个单词，用于产生大驼峰形式，或者")]),v._v(" "),t("li",[v._v("... 除了第一个以外的每个单词，用于产生小驼峰形式")])])]),v._v(" "),t("li",[v._v("最后，将所有单词合并为一个标识符。")])]),v._v(" "),t("p",[v._v("注意，原始单词的大小写几乎完全被忽略。例如：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("Prose form")]),v._v(" "),t("th",[v._v("Correct")]),v._v(" "),t("th",[v._v("Incorrect")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v('"XML HTTP request"')]),v._v(" "),t("td",[t("code",[v._v("XmlHttpRequest")])]),v._v(" "),t("td",[t("code",[v._v("XMLHTTPRequest")])])]),v._v(" "),t("tr",[t("td",[v._v('"new customer ID"')]),v._v(" "),t("td",[t("code",[v._v("newCustomerId")])]),v._v(" "),t("td",[t("code",[v._v("newCustomerID")])])]),v._v(" "),t("tr",[t("td",[v._v('"inner stopwatch"')]),v._v(" "),t("td",[t("code",[v._v("innerStopwatch")])]),v._v(" "),t("td",[t("code",[v._v("innerStopWatch")])])]),v._v(" "),t("tr",[t("td",[v._v('"supports IPv6 on iOS?"')]),v._v(" "),t("td",[v._v("supportsIpv6OnIos")]),v._v(" "),t("td",[v._v("supportsIPv6OnIOS")])]),v._v(" "),t("tr",[t("td",[v._v('"YouTube importer"')]),v._v(" "),t("td",[v._v("YouTubeImporter")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("YoutubeImporter*")]),v._v(" "),t("td"),v._v(" "),t("td")])])]),v._v(" "),t("ul",[t("li",[v._v("表示可以接受，但不推荐的。")])]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("注意")]),v._v(" ：一些带连字符的单词在英语中含糊不清的：例如「nonempty」和「non-empty」都是正确的，所以方法名\n"),t("code",[v._v("checkNonempty")]),v._v(" 和 "),t("code",[v._v("checkNonEmpty")]),v._v(" 也都是正确的。")])]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"编程实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编程实践"}},[v._v("#")]),v._v(" 编程实践")]),v._v(" "),t("h3",{attrs:{id:"override-总是使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#override-总是使用"}},[v._v("#")]),v._v(" "),t("code",[v._v("@Override")]),v._v("：总是使用")]),v._v(" "),t("p",[v._v("只要是合法的，方法总会被标记 "),t("code",[v._v("@Override")]),v._v("\n注解。这包括了一个类的方法重写了父类的方法、一个类的方法实现了接口的方法、一个接口的方法重新定义了父接口的方法。")]),v._v(" "),t("p",[t("strong",[v._v("特殊情况")]),v._v(" ：当父类方法是 "),t("code",[v._v("@Deprecated")]),v._v(" 的时候，"),t("code",[v._v("@Override")]),v._v(" 可以省略。")]),v._v(" "),t("h3",{attrs:{id:"捕获异常-不能忽略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#捕获异常-不能忽略"}},[v._v("#")]),v._v(" 捕获异常：不能忽略")]),v._v(" "),t("p",[v._v("除非另有说明，对捕获的异常不做任何响应是很少正确的。（典型的响应是打印日志，或者如果打印日志是「不可能」的，就重新抛出一个作为\n"),t("code",[v._v("AssertionError")]),v._v(" 的异常。）")]),v._v(" "),t("p",[v._v("当对 catch 语句块中的任何内容不做处理确实是合适的时候，应该在注释中说明正当的理由。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("try {\n  int i = Integer.parseInt(response);\n  return handleNumericResponse(i);\n} catch (NumberFormatException ok) {\n  // it's not numeric; that's fine, just continue\n}\nreturn handleTextResponse(response);\n")])])]),t("p",[t("strong",[v._v("特殊情况")]),v._v(" ：在测试代码中，如果捕获的异常名称是 "),t("code",[v._v("expected")]),v._v("\n或者以此为开头，那么它可以不加注释地被忽略。以下是一个很常见的惯用语法，用于确认被测试的代码确实抛出了预期类型的异常，所以此处的注释是不必要的。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("try {\n  emptyStack.pop();\n  fail();\n} catch (NoSuchElementException expected) {\n}\n")])])]),t("h3",{attrs:{id:"静态成员-限定使用类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态成员-限定使用类"}},[v._v("#")]),v._v(" 静态成员：限定使用类")]),v._v(" "),t("p",[v._v("当对静态类的成员的引用必须是有所限定的时候，那它是以该类的名称作为限定，而不是该类的类型的引用或者表达式。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("Foo aFoo = ...;\nFoo.aStaticMethod(); // good\naFoo.aStaticMethod(); // bad\nsomethingThatYieldsAFoo().aStaticMethod(); // very bad\n")])])]),t("h3",{attrs:{id:"finalizers-禁用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#finalizers-禁用"}},[v._v("#")]),v._v(" Finalizers：禁用")]),v._v(" "),t("p",[v._v("重写 "),t("code",[v._v("Object.finalize")]),v._v(" 方法是 "),t("strong",[v._v("非常罕见")]),v._v(" 的。")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("提示")]),v._v(" ：禁止这么做。如果你真的需要，请先仔细阅读和理解 "),t("a",{attrs:{href:"http://books.google.com/books?isbn=8131726592",target:"_blank",rel:"noopener noreferrer"}},[v._v("《Effective\nJava》第七章在新窗口打开"),t("OutboundLink")],1),v._v(" —— 避免使用\nFinalizer，然后禁止这么做。")])]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"javadoc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javadoc"}},[v._v("#")]),v._v(" Javadoc")]),v._v(" "),t("h3",{attrs:{id:"格式化-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#格式化-2"}},[v._v("#")]),v._v(" 格式化")]),v._v(" "),t("h4",{attrs:{id:"一般形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一般形式"}},[v._v("#")]),v._v(" 一般形式")]),v._v(" "),t("p",[v._v("Javadoc 语句块的基本格式如这个例子所示：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("/**\n * Multiple lines of Javadoc text are written here,\n * wrapped normally...\n */\npublic int method(String p1) { ... }\n")])])]),t("p",[v._v("... 或者如这个单行例子所示：")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("/** An especially short bit of Javadoc. */\n")])])]),t("p",[v._v("基本格式总是可以接受的。当整个 Javadoc 语句块（包括注释标记）可以写在一行的时候，单行格式可以被替换。注意这仅适用于没有类似于 "),t("code",[v._v("@return")]),v._v("\n之类块标签的情况。")]),v._v(" "),t("h4",{attrs:{id:"段落"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#段落"}},[v._v("#")]),v._v(" 段落")]),v._v(" "),t("p",[v._v("一个空行 -- 这意味着，仅包含用于对齐的前导星号（*）的行 --\n会出现在段落之间，和块标签组（如果有的话）之前。除了第一个以外的每个段落，在第一个单词之前有一个 "),t("code",[v._v("<p>")]),v._v(" 标签，标签与单词之间没有空格。")]),v._v(" "),t("h4",{attrs:{id:"块标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#块标签"}},[v._v("#")]),v._v(" 块标签")]),v._v(" "),t("p",[v._v("使用到的任何标准「块标签」按以下的顺序出现\n"),t("code",[v._v("@param")]),v._v("、"),t("code",[v._v("@return")]),v._v("、"),t("code",[v._v("@throws")]),v._v("、"),t("code",[v._v("@deprecated")]),v._v("，并且这四种类型的块标签不会与空的描述一起出现。当块标签不能写在一行的时候，后续的行从\n"),t("code",[v._v("@")]),v._v(" 的位置缩进四个（或者更多）空格。")]),v._v(" "),t("h3",{attrs:{id:"摘要片段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#摘要片段"}},[v._v("#")]),v._v(" 摘要片段")]),v._v(" "),t("p",[v._v("每个 Javadoc 语句块以一个简短的 "),t("strong",[v._v("摘要片段")]),v._v(" 开头。这个片段非常重要：它是在某些情况下唯一可以出现的文本，例如在类和方法的索引中。")]),v._v(" "),t("p",[v._v("这是一个片段 -- 是名词短语或者动词短语，而不是一个完整的句子。它 "),t("strong",[v._v("不")]),v._v(" 以 "),t("code",[v._v("A {@code Foo} is a...")]),v._v(" 或者 "),t("code",[v._v("This method returns...")]),v._v(" 开头，也不会形成例如 "),t("code",[v._v("Save the record.")]),v._v("\n这样的祈使句。然而，这个片段是用大写字母书写的并且会有标签符号，就好像它是个完整的句子。")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("提示")]),v._v(" ：一个常见的错误是用以下形式编写简单的 Javadoc "),t("code",[v._v("/** @return the customer ID */")]),v._v("。这是不正确的，并且应该被修正为 "),t("code",[v._v("/** Returns the customer ID. */")]),v._v("。")])]),v._v(" "),t("h3",{attrs:{id:"在何处使用-javadoc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在何处使用-javadoc"}},[v._v("#")]),v._v(" 在何处使用 Javadoc")]),v._v(" "),t("p",[v._v("至少，Javadoc 应该出现在每个 "),t("code",[v._v("public")]),v._v(" 类，和这个类的每个 "),t("code",[v._v("public")]),v._v(" 或者 "),t("code",[v._v("protected")]),v._v(" 成员，但除了以下提及的几个例外。")]),v._v(" "),t("p",[v._v("额外的 Javadoc 内容也可以出现，正如在 非必需的 Javadoc 章节中所描述的。")]),v._v(" "),t("h4",{attrs:{id:"特殊情况-自解释的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊情况-自解释的方法"}},[v._v("#")]),v._v(" 特殊情况：自解释的方法")]),v._v(" "),t("p",[v._v("对于类似 "),t("code",[v._v("getFoo")]),v._v(" 之类的「简单、明显」的方法，Javadoc 是可选的，在这种情况下，除了「Returns the\nfoo」也确实真的没什么值得好说了。")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("重要")]),v._v(" ：引用这个特殊情况来证明省略典型的阅读者可能需要知道的相关信息是不合适的。例如，对于名为 "),t("code",[v._v("getCanonicalName")]),v._v("\n的方法，一个典型的阅读者可能不知道术语「canonical name」是什么意思，所以不要省略它的文档（以它只会说 "),t("code",[v._v("/** Returns the canonical name. */")]),v._v(" 的理由）。")])]),v._v(" "),t("h4",{attrs:{id:"特殊情况-重写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊情况-重写"}},[v._v("#")]),v._v(" 特殊情况：重写")]),v._v(" "),t("p",[v._v("Javadoc 不会总是出现在一个重写了父类方法的方法中。")]),v._v(" "),t("h4",{attrs:{id:"非必需的-javadoc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非必需的-javadoc"}},[v._v("#")]),v._v(" 非必需的 Javadoc")]),v._v(" "),t("p",[v._v("其它的类和成员根据实际需要或者期望来编写 Javadoc。")]),v._v(" "),t("p",[v._v("每当使用实现注释来定义一个类或者成员的总体目的或者行为的时候，这个注释改为用 Javadoc 来编写（使用 "),t("code",[v._v("/**")]),v._v(" ）。")]),v._v(" "),t("p",[v._v("非必需的 Javadoc 内容不是严格要求遵守 段落 章节、块标签 章节以及 摘要片段 章节的格式化规则，尽管这当然是推荐的。")])])}),[],!1,null,null,null);t.default=e.exports}}]);