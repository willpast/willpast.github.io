(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{494:function(t,a,r){"use strict";r.r(a);var v=r(4),e=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"♥常见排序算法知识体系导读♥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#♥常见排序算法知识体系导读♥"}},[t._v("#")]),t._v(" ♥常见排序算法知识体系导读♥")]),t._v(" "),a("h2",{attrs:{id:"知识体系文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识体系文章"}},[t._v("#")]),t._v(" 知识体系文章")]),t._v(" "),a("p",[a("em",[t._v("知识体系系统性梳理")])]),t._v(" "),a("blockquote",[a("p",[t._v("八大排序，三大查找是《数据结构》当中非常基础的知识点，常见的八大排序算法，他们之间关系如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/alg-sort-overview.png",alt:"img"}})]),t._v(" "),a("p",[t._v("各算法性能比较：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/alg-sort-overview-1.png",alt:"img"}})]),t._v(" "),a("p",[a("em",[t._v("相关文章")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("A. 常见排序概要")]),t._v(" ：重点理解几个排序之间的对比，时间和空间复杂度，以及应用。PS：越简单越要提高认知效率，做到战略上藐视战术上重视。")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/pages/alg-sort-overview"}},[t._v("排序 - Overview")])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("B. 常见排序详解")]),t._v(" ：具体分析各种排序及其复杂度，查漏补缺；在综合复杂度及稳定性情况下，通常"),a("code",[t._v("希尔")]),t._v(", "),a("code",[t._v("快排")]),t._v("和 "),a("code",[t._v("归并")]),t._v("需要重点掌握。")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/pages/alg-sort-bubble"}},[t._v("排序 - 冒泡排序(Bubble Sort)")]),t._v(" "),a("ul",[a("li",[t._v("它是一种较简单的排序算法。它会遍历若干次要排序的数列，每次遍历时，它都会从前往后依次的比较相邻两个数的大小；如果前者比后者大，则交换它们的位置。这样，一次遍历之后，最大的元素就在数列的末尾！ 采用相同的方法再次遍历时，第二大的元素就被排列在最大元素之前。重复此操作，直到整个数列都有序为止")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"/pages/alg-sort-fast"}},[t._v("排序 - 快速排序(Quick Sort)")]),t._v(" "),a("ul",[a("li",[t._v("它的基本思想是: 选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"/pages/alg-sort-insert"}},[t._v("排序 - 插入排序(Insertion Sort)")]),t._v(" "),a("ul",[a("li",[t._v("直接插入排序(Straight Insertion Sort)的基本思想是: 把n个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复n-1次可完成排序过程。")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"/pages/alg-sort-shell"}},[t._v("排序 - Shell排序(Shell Sort)")]),t._v(" "),a("ul",[a("li",[t._v("希尔排序实质上是一种分组插入方法。它的基本思想是: 对于n个待排序的数列，取一个小于n的整数gap(gap被称为步长)将待排序元素分成若干个组子序列，所有距离为gap的倍数的记录放在同一个组中；然后，对各组内的元素进行直接插入排序。 这一趟排序完成之后，每一个组的元素都是有序的。然后减小gap的值，并重复执行上述的分组和排序。重复这样的操作，当gap=1时，整个数列就是有序的。")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"/pages/alg-sort-select"}},[t._v("排序 - 选择排序(Selection sort)")]),t._v(" "),a("ul",[a("li",[t._v("它的基本思想是: 首先在未排序的数列中找到最小(or最大)元素，然后将其存放到数列的起始位置；接着，再从剩余未排序的元素中继续寻找最小(or最大)元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"/pages/alg-sort-heap"}},[t._v("排序 - 堆排序(Heap Sort)")]),t._v(" "),a("ul",[a("li",[t._v("堆排序是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"/pages/alg-sort-merge"}},[t._v("排序 - 归并排序(Merge Sort)")]),t._v(" "),a("ul",[a("li",[t._v('将两个的有序数列合并成一个有序数列，我们称之为"归并"。归并排序(Merge Sort)就是利用归并思想对数列进行排序。')])])]),t._v(" "),a("li",[a("a",{attrs:{href:"/pages/alg-sort-bucket"}},[t._v("排序 - 桶排序(Bucket Sort)")]),t._v(" "),a("ul",[a("li",[t._v("桶排序(Bucket Sort)的原理很简单，将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"/pages/alg-sort-radix"}},[t._v("排序 - 基数排序(Radix Sort)")]),t._v(" "),a("ul",[a("li",[t._v("它的基本思想是: 将整数按位数切割成不同的数字，然后按每个位数分别比较。具体做法是: 将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列")])])])]),t._v(" "),a("h2",{attrs:{id:"学习推荐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习推荐"}},[t._v("#")]),t._v(" 学习推荐")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("学习排序 - "),a("a",{attrs:{href:"https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("动画展示排序在新窗口打开"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("整体性比较好系列 - "),a("a",{attrs:{href:"https://www.cnblogs.com/skywang12345/p/3603935.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("@skywang12345在新窗口打开"),a("OutboundLink")],1)])])]),t._v(" "),a("h2",{attrs:{id:"不同情况下排序选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同情况下排序选择"}},[t._v("#")]),t._v(" 不同情况下排序选择")]),t._v(" "),a("p",[t._v("在不同的情形下，排序速度前三名也不尽相同:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("排序场景")]),t._v(" "),a("th",[t._v("排序效率")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Random")]),t._v(" "),a("td",[t._v("希尔>快排>归并")])]),t._v(" "),a("tr",[a("td",[t._v("Few unique")]),t._v(" "),a("td",[t._v("快排>希尔>归并")])]),t._v(" "),a("tr",[a("td",[t._v("Reversed")]),t._v(" "),a("td",[t._v("快排>希尔>归并")])]),t._v(" "),a("tr",[a("td",[t._v("Almost sorted")]),t._v(" "),a("td",[t._v("插入排序>基数排序>快排>希尔>归并")])])])]),t._v(" "),a("p",[t._v("总结来看: 快速排序和希尔排序在排序速度上表现是比较优秀的,而归并排序稍微次之.")]),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("ul",[a("li",[t._v("https://www.cnblogs.com/hokky/p/8529042.html")]),t._v(" "),a("li",[t._v("https://www.cnblogs.com/skywang12345/p/3603935.html")])])])}),[],!1,null,null,null);a.default=e.exports}}]);