(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{409:function(t,a,e){"use strict";e.r(a);var s=e(4),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java-io-设计模式-装饰者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-io-设计模式-装饰者模式"}},[t._v("#")]),t._v(" Java IO - 设计模式(装饰者模式)")]),t._v(" "),a("blockquote",[a("p",[t._v("Java I/O 使用了装饰者模式来实现。")])]),t._v(" "),a("h2",{attrs:{id:"_1-装饰者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-装饰者模式"}},[t._v("#")]),t._v(" 1. 装饰者模式")]),t._v(" "),a("p",[t._v("请参考"),a("a",{attrs:{href:"https://pdai.tech/md/dev-spec/pattern/12_decorator.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("装饰者模式详解"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("装饰者(Decorator)和具体组件(ConcreteComponent)都继承自组件(Component)，具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/image-20220830203657281.png",alt:"image-20220830203657281"}})]),t._v(" "),a("h2",{attrs:{id:"_2-io-装饰者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-io-装饰者模式"}},[t._v("#")]),t._v(" 2. IO 装饰者模式")]),t._v(" "),a("p",[t._v("以 InputStream 为例，")]),t._v(" "),a("ul",[a("li",[t._v("InputStream 是抽象组件；")]),t._v(" "),a("li",[t._v("FileInputStream 是 InputStream 的子类，属于具体组件，提供了字节流的输入操作；")]),t._v(" "),a("li",[t._v("FilterInputStream 属于抽象装饰者，装饰者用于装饰组件，为组件提供额外的功能。例如 BufferedInputStream 为 FileInputStream 提供缓存的功能。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/image-20220830203804788.png",alt:"image-20220830203804788"}})]),t._v(" "),a("p",[t._v("实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一层 BufferedInputStream 对象即可。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),t._v(" fileInputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filePath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),t._v(" bufferedInputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fileInputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("DataInputStream 装饰者提供了对更多数据类型进行输入的操作，比如 int、double 等基本类型。")]),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://pdai.tech/md/java/io/java-io-basic-design-pattern.html",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Java IO - 设计模式(装饰者模式)")]),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);