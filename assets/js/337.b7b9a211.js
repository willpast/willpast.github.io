(window.webpackJsonp=window.webpackJsonp||[]).push([[337],{666:function(s,a,n){"use strict";n.r(a);var e=n(4),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"常见重构技巧-去除多余的if-else"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见重构技巧-去除多余的if-else"}},[s._v("#")]),s._v(" 常见重构技巧 - 去除多余的if else")]),s._v(" "),a("blockquote",[a("p",[s._v("最为常见的是代码中使用很多的if/else，或者switch/case；如何重构呢？方法特别多，本文带你学习其中的技巧。")])]),s._v(" "),a("h2",{attrs:{id:"出现if-else和switch-case的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#出现if-else和switch-case的场景"}},[s._v("#")]),s._v(" 出现if/else和switch/case的场景")]),s._v(" "),a("p",[s._v("通常业务代码会包含这样的逻辑：每种条件下会有不同的处理逻辑。比如两个数a和b之间可以通过不同的操作符（+，-，*，/）进行计算，初学者通常会这么写：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    public int calculate(int a, int b, String operator) {\n        int result = Integer.MIN_VALUE;\n     \n        if ("add".equals(operator)) {\n            result = a + b;\n        } else if ("multiply".equals(operator)) {\n            result = a * b;\n        } else if ("divide".equals(operator)) {\n            result = a / b;\n        } else if ("subtract".equals(operator)) {\n            result = a - b;\n        }\n        return result;\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("或者用switch/case：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    public int calculateUsingSwitch(int a, int b, String operator) {\n        switch (operator) {\n        case "add":\n            result = a + b;\n            break;\n        // other cases    \n        }\n        return result;\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("这种最基础的代码如何重构呢？")]),s._v(" "),a("h2",{attrs:{id:"重构思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重构思路"}},[s._v("#")]),s._v(" 重构思路")]),s._v(" "),a("blockquote",[a("p",[s._v("有非常多的重构方法来解决这个问题,\n这里会列举很多方法，在实际应用中可能会根据场景进行一些调整；另外不要纠结这些例子中显而易见的缺陷（比如没用常量，没考虑多线程等等），而是把重心放在学习其中的思路上。")])]),s._v(" "),a("h3",{attrs:{id:"方式一-工厂类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式一-工厂类"}},[s._v("#")]),s._v(" 方式一 - 工厂类")]),s._v(" "),a("ul",[a("li",[s._v("定义一个操作接口")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    public interface Operation {\n        int apply(int a, int b);\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("实现操作， 这里只以add为例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    public class Addition implements Operation {\n        @Override\n        public int apply(int a, int b) {\n            return a + b;\n        }\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ul",[a("li",[s._v("实现操作工厂")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    public class OperatorFactory {\n        static Map<String, Operation> operationMap = new HashMap<>();\n        static {\n            operationMap.put("add", new Addition());\n            operationMap.put("divide", new Division());\n            // more operators\n        }\n     \n        public static Optional<Operation> getOperation(String operator) {\n            return Optional.ofNullable(operationMap.get(operator));\n        }\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("ul",[a("li",[s._v("在Calculator中调用")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    public int calculateUsingFactory(int a, int b, String operator) {\n        Operation targetOperation = OperatorFactory\n          .getOperation(operator)\n          .orElseThrow(() -> new IllegalArgumentException("Invalid Operator"));\n        return targetOperation.apply(a, b);\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("对于上面为什么方法名是"),a("code",[s._v("apply")]),s._v(","),a("code",[s._v("Optional")]),s._v("怎么用? 请参考这篇：")]),s._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/md/java/java8/java8-stream.html"}},[s._v("Java 8 - 函数编程(lambda表达式)")]),s._v(" "),a("ul",[a("li",[s._v("Lambda 表达式的特点?")]),s._v(" "),a("li",[s._v("Lambda 表达式使用和Stream下的接口?")]),s._v(" "),a("li",[s._v("函数接口定义和使用，四大内置函数接口Consumer，Function，Supplier, Predicate.")]),s._v(" "),a("li",[s._v("Comparator排序为例贯穿所有知识点。")])])],1),s._v(" "),a("li",[a("RouterLink",{attrs:{to:"/md/java/java8/java8-optional.html"}},[s._v("Java 8 - Optional类深度解析")]),s._v(" "),a("ul",[a("li",[s._v("Optional类的意义?")]),s._v(" "),a("li",[s._v("Optional类有哪些常用的方法?")]),s._v(" "),a("li",[s._v("Optional举例贯穿所有知识点")]),s._v(" "),a("li",[s._v("如何解决多重类嵌套Null值判断?")])])],1)]),s._v(" "),a("h3",{attrs:{id:"方式二-枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式二-枚举"}},[s._v("#")]),s._v(" 方式二 - 枚举")]),s._v(" "),a("blockquote",[a("p",[s._v("枚举适合类型固定，可枚举的情况，比如这的操作符; 同时枚举中是可以提供方法实现的，这就是我们可以通过枚举进行重构的原因。")])]),s._v(" "),a("ul",[a("li",[s._v("定义操作符枚举")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    public enum Operator {\n        ADD {\n            @Override\n            public int apply(int a, int b) {\n                return a + b;\n            }\n        },\n        // other operators\n        \n        public abstract int apply(int a, int b);\n    \n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("ul",[a("li",[s._v("在Calculator中调用")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    public int calculate(int a, int b, Operator operator) {\n        return operator.apply(a, b);\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("写个测试用例测试下：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    @Test\n    public void whenCalculateUsingEnumOperator_thenReturnCorrectResult() {\n        Calculator calculator = new Calculator();\n        int result = calculator.calculate(3, 4, Operator.valueOf("ADD"));\n        assertEquals(7, result);\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("看是否很简单?")]),s._v(" "),a("h3",{attrs:{id:"方法三-命令模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法三-命令模式"}},[s._v("#")]),s._v(" 方法三 - 命令模式")]),s._v(" "),a("blockquote",[a("p",[s._v("命令模式也是非常常用的重构方式， 把每个操作符当作一个Command。")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("首先让我们回顾下什么是命令模式")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("看这篇文章："),a("RouterLink",{attrs:{to:"/md/dev-spec/pattern/18_command.html"}},[s._v("行为型 - 命令模式(Command)")])],1),s._v(" "),a("ul",[a("li",[s._v('命令模式(Command pattern): 将"请求"封闭成对象, 以便使用不同的请求,队列或者日志来参数化其他对象. 命令模式也支持可撤销的操作。\n'),a("ul",[a("li",[s._v("Command: 命令")]),s._v(" "),a("li",[s._v("Receiver: 命令接收者，也就是命令真正的执行者")]),s._v(" "),a("li",[s._v("Invoker: 通过它来调用命令")]),s._v(" "),a("li",[s._v("Client: 可以设置命令与命令的接收者")])])])])])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/ae1b27b8-bc13-42e7-ac12-a2242e125499.png",alt:"img"}})]),s._v(" "),a("ul",[a("li",[s._v("Command接口")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    public interface Command {\n        Integer execute();\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("实现Command")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    public class AddCommand implements Command {\n        // Instance variables\n     \n        public AddCommand(int a, int b) {\n            this.a = a;\n            this.b = b;\n        }\n     \n        @Override\n        public Integer execute() {\n            return a + b;\n        }\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("ul",[a("li",[s._v("在Calculator中调用")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    public int calculate(Command command) {\n        return command.execute();\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("测试用例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    @Test\n    public void whenCalculateUsingCommand_thenReturnCorrectResult() {\n        Calculator calculator = new Calculator();\n        int result = calculator.calculate(new AddCommand(3, 7));\n        assertEquals(10, result);\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("注意，这里"),a("code",[s._v("new AddCommand(3, 7)")]),s._v("仍然没有解决动态获取操作符问题，所以通常来说可以结合简单工厂模式来调用：")]),s._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/md/dev-spec/pattern/3_simple_factory.html"}},[s._v("创建型 - 简单工厂(Simple Factory)")]),s._v(" "),a("ul",[a("li",[s._v("简单工厂(Simple Factory)，它把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化，这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类")])])],1)]),s._v(" "),a("h3",{attrs:{id:"方法四-规则引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法四-规则引擎"}},[s._v("#")]),s._v(" 方法四 - 规则引擎")]),s._v(" "),a("blockquote",[a("p",[s._v("规则引擎适合规则很多且可能动态变化的情况，在先要搞清楚一点Java OOP，即类的抽象：")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("这里可以抽象出哪些类？// 头脑中需要有这种自动转化")]),s._v(" "),a("ul",[a("li",[s._v("规则Rule\n"),a("ul",[a("li",[s._v("规则接口")]),s._v(" "),a("li",[s._v("具体规则的泛化实现")])])]),s._v(" "),a("li",[s._v("表达式Expression\n"),a("ul",[a("li",[s._v("操作符")]),s._v(" "),a("li",[s._v("操作数")])])]),s._v(" "),a("li",[s._v("规则引擎")])])]),s._v(" "),a("li",[a("p",[s._v("定义规则")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    public interface Rule {\n        boolean evaluate(Expression expression);\n        Result getResult();\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("Add 规则")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    public class AddRule implements Rule {\n        @Override\n        public boolean evaluate(Expression expression) {\n            boolean evalResult = false;\n            if (expression.getOperator() == Operator.ADD) {\n                this.result = expression.getX() + expression.getY();\n                evalResult = true;\n            }\n            return evalResult;\n        }    \n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("ul",[a("li",[s._v("表达式")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    public class Expression {\n        private Integer x;\n        private Integer y;\n        private Operator operator;        \n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ul",[a("li",[s._v("规则引擎")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    public class RuleEngine {\n        private static List<Rule> rules = new ArrayList<>();\n     \n        static {\n            rules.add(new AddRule());\n        }\n     \n        public Result process(Expression expression) {\n            Rule rule = rules\n              .stream()\n              .filter(r -> r.evaluate(expression))\n              .findFirst()\n              .orElseThrow(() -> new IllegalArgumentException("Expression does not matches any Rule"));\n            return rule.getResult();\n        }\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("ul",[a("li",[s._v("测试用例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    @Test\n    public void whenNumbersGivenToRuleEngine_thenReturnCorrectResult() {\n        Expression expression = new Expression(5, 5, Operator.ADD);\n        RuleEngine engine = new RuleEngine();\n        Result result = engine.process(expression);\n     \n        assertNotNull(result);\n        assertEquals(10, result.getValue());\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"方法五-策略模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法五-策略模式"}},[s._v("#")]),s._v(" 方法五 - 策略模式")]),s._v(" "),a("blockquote",[a("p",[s._v("策略模式比命令模式更为常用，而且在实际业务逻辑开发中需要注入一定的（比如通过Spring的"),a("code",[s._v("@Autowired")]),s._v("来注入bean），这时通过策略模式可以巧妙的重构")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("什么是策略模式？")]),s._v(" "),a("ul",[a("li",[s._v("我们再复习下："),a("RouterLink",{attrs:{to:"/md/dev-spec/pattern/16_strategy.html"}},[s._v("行为型 - 策略(Strategy)")])],1),s._v(" "),a("li",[s._v("策略模式(strategy pattern): 定义了算法族, 分别封闭起来, 让它们之间可以互相替换, 此模式让算法的变化独立于使用算法的客户\n"),a("ul",[a("li",[s._v("Strategy 接口定义了一个算法族，它们都具有 behavior() 方法。")]),s._v(" "),a("li",[s._v("Context 是使用到该算法族的类，其中的 doSomething() 方法会调用 behavior()，setStrategy(in Strategy) 方法可以动态地改变 strategy 对象，也就是说能动态地改变 Context 所使用的算法。")])])])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/1fc969e4-0e7c-441b-b53c-01950d2f2be5.png",alt:"img"}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Spring中需要注入资源重构？")])])]),s._v(" "),a("blockquote",[a("p",[s._v("如果是在实现业务逻辑需要注入框架中资源呢？比如通过Spring的"),a("code",[s._v("@Autowired")]),s._v("来注入bean。可以这样实现：")])]),s._v(" "),a("ul",[a("li",[s._v("操作 // 很巧妙")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    public interface Opt {\n        int apply(int a, int b);\n    }\n    \n    @Component(value = "addOpt")\n    public class AddOpt implements Opt {\n        @Autowired\n        xxxAddResource resource; // 这里通过Spring框架注入了资源\n    \n        @Override\n        public int apply(int a, int b) {\n           return resource.process(a, b);\n        }\n    }\n    \n    @Component(value = "devideOpt")\n    public class devideOpt implements Opt {\n        @Autowired\n        xxxDivResource resource; // 这里通过Spring框架注入了资源\n    \n        @Override\n        public int apply(int a, int b) {\n           return resource.process(a, b);\n        }\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("ul",[a("li",[s._v("策略")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    @Component\n    public class OptStrategyContext{\n     \n    \n        private Map<String, Opt> strategyMap = new ConcurrentHashMap<>();\n     \n        @Autowired\n        public OptStrategyContext(Map<String, TalkService> strategyMap) {\n            this.strategyMap.clear();\n            this.strategyMap.putAll(strategyMap);\n        }\n     \n        public int apply(Sting opt, int a, int b) {\n            return strategyMap.get(opt).apply(a, b);\n        }\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("上述代码在实现中非常常见。")]),s._v(" "),a("h2",{attrs:{id:"一些反思"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些反思"}},[s._v("#")]),s._v(" 一些反思")]),s._v(" "),a("blockquote",[a("p",[s._v("最怕的是刚学会成语，就什么地方都想用成语。")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("真的要这么重构吗？")]),s._v(" "),a("ul",[a("li",[s._v("在实际开发中，切记"),a("code",[s._v("最怕的是刚学会成语，就什么地方都想用成语")]),s._v("; 很多时候不是考虑是否是最佳实现，而是折中（通常是业务和代价的折中，开发和维护的折中...），在适当的时候做适当的重构。")]),s._v(" "),a("li",[s._v("很多时候，让团队可持续性的维护代码便是最佳；")]),s._v(" "),a("li",[s._v("重构后会生成很多类，一个简单业务搞这么复杂？所以你需要权衡")])])])]),s._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),a("ul",[a("li",[s._v("https://www.baeldung.com/java-replace-if-statements")])])])}),[],!1,null,null,null);a.default=t.exports}}]);