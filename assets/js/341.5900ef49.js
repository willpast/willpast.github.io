(window.webpackJsonp=window.webpackJsonp||[]).push([[341],{674:function(a,r,t){"use strict";t.r(r);var v=t(4),_=Object(v.a)({},(function(){var a=this,r=a._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"♥架构-知识体系详解♥"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#♥架构-知识体系详解♥"}},[a._v("#")]),a._v(" ♥架构 - 知识体系详解♥")]),a._v(" "),r("h2",{attrs:{id:"如何学习架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何学习架构"}},[a._v("#")]),a._v(" 如何学习架构")]),a._v(" "),r("ul",[r("li",[a._v("包含如何学习架构?")])]),a._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/arch-x-overview-learn2.png",alt:"img"}})]),a._v(" "),r("h3",{attrs:{id:"基础到方法论"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础到方法论"}},[a._v("#")]),a._v(" 基础到方法论")]),a._v(" "),r("blockquote",[r("p",[a._v("包括架构的概述，特点，目标，本质以及方法论等")])]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/pages/arch-basic"}},[a._v("架构 - 架构基础: 特点,本质...")]),a._v(" "),r("ul",[r("li",[a._v("本节总结下架构相关的基础知识：概述，特点，目标，本质...")])])])]),a._v(" "),r("h3",{attrs:{id:"如何理解架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何理解架构"}},[a._v("#")]),a._v(" 如何理解架构")]),a._v(" "),r("blockquote",[r("p",[a._v("理解架构，包括架构的视角，架构的演进，服务化演进，架构的核心要素")])]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/pages/arch-view"}},[a._v("架构 - 理解构架的视角")]),a._v(" "),r("ul",[r("li",[a._v("在学习架构时，我认为首先要理清楚架构的视角，"),r("strong",[a._v("因为你所认知的架构和别人所说的架构可能是两码事")]),a._v(" 。对于不同职位的视角是不一样的，比如开发而言他更多的看到的是开发架构；对售前人员，他可能更多的看到的是业务架构；对于运维人员，他看到的可能是运维架构；而对于技术支持和部署人员，他更多的看到的网络和物理架构。")])])]),a._v(" "),r("li",[r("a",{attrs:{href:"/pages/arch-view-2"}},[a._v("架构 - 理解构架的分层")]),a._v(" "),r("ul",[r("li",[a._v("技术框架（technological Framework）是整个或部分技术系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法。于开发者而言，实际工作从通常采用的是分层模型，由于其重要性，这里独立一个章节，总结经典的"),r("strong",[a._v("七层逻辑架构")]),a._v(" 。")])])]),a._v(" "),r("li",[r("a",{attrs:{href:"/pages/arch-evolution"}},[a._v("架构 - 理解架构的演进")]),a._v(" "),r("ul",[r("li",[a._v("在学习架构时，"),r("strong",[a._v("第一步不要去学习框架，而是要学习架构的演进")]),a._v(" 。强烈推荐李智慧老师的《大型网站技术架构》，这本书翻起来很快，对构筑你自己的体系很有帮助，本文的内容来源于它，在此基础上拓展了下。")])])]),a._v(" "),r("li",[r("a",{attrs:{href:"/pages/arch-service"}},[a._v("架构 - 理解架构的服务演化")]),a._v(" "),r("ul",[r("li",[a._v("Kubernetes、Service Mesh 和 Serverless应该是最近比较火的了，而上文主要从"),r("strong",[a._v("逻辑架构角度")]),a._v(" 分析了架构演进，本文将从"),r("strong",[a._v("服务演化")]),a._v(" 和"),r("strong",[a._v("容器编排化")]),a._v(" 的角度帮你增强对架构演进的认识。")])])]),a._v(" "),r("li",[r("a",{attrs:{href:"/pages/arch-pattern"}},[a._v("架构 - 理解架构的模式1")]),a._v(" "),r("ul",[r("li",[a._v("架构演进中有很多知识点，总体上可以归结为以下模式，"),r("strong",[a._v("这里说的模式本质是架构中技术点的抽象")]),a._v(" 。强烈推荐李智慧老师的《大型网站技术架构》，本文的内容也是来源于它，在此基础上拓展了下。")])])]),a._v(" "),r("li",[r("a",{attrs:{href:"/pages/arch-pattern-2"}},[a._v("架构 - 理解架构的模式2")]),a._v(" "),r("ul",[r("li",[a._v("本文整理自"),r("a",{attrs:{href:"https://www.cnblogs.com/lovecindywang/p/9670356.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("朱晔的互联网架构实践心得在新窗口打开"),r("OutboundLink")],1),a._v(", 他是结合了 "),r("strong",[a._v("微软给出的云架构的一些模式")]),a._v(" 的基础上加入他自己的理解来总结互联网架构中具体的一些模式。我在此基础上进行了些微小的调整。")])])]),a._v(" "),r("li",[r("a",{attrs:{href:"/pages/arch-core-metrics"}},[a._v("架构 - 理解架构的核心要素")]),a._v(" "),r("ul",[r("li",[a._v("一般来说软件架构需要关注"),r("strong",[a._v("性能、可用性、伸缩性、扩展性和安全性这5个架构要素")]),a._v(" 。")])])])]),a._v(" "),r("h3",{attrs:{id:"架构高并发和高可用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#架构高并发和高可用"}},[a._v("#")]),a._v(" 架构高并发和高可用")]),a._v(" "),r("blockquote",[r("p",[a._v("架构高并发和高可用技术点主要包含如下方面。")])]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/pages/arch-cache"}},[a._v("架构之高并发：缓存")]),a._v(" "),r("ul",[r("li",[r("strong",[a._v("高并发实现的三板斧：缓存，限流和降级")]),a._v(" 。缓存在高并发系统中有者极其广阔的应用，需要重点掌握，本文重点介绍下缓存及其实现。")])])]),a._v(" "),r("li",[r("a",{attrs:{href:"/pages/arch-ratelimit"}},[a._v("架构之高并发：限流")]),a._v(" "),r("ul",[r("li",[a._v("每个系统都有服务的上线，所以当流量超过服务极限能力时，系统可能会出现卡死、崩溃的情况，所以就有了降级和限流。限流其实就是：当高并发或者瞬时高并发时，为了保证系统的稳定性、可用性，系统以牺牲部分请求为代价或者延迟处理请求为代价，保证系统整体服务可用。")])])]),a._v(" "),r("li",[r("a",{attrs:{href:"/pages/arch-reduce"}},[a._v("架构之高并发：降级和熔断")]),a._v(" "),r("ul",[r("li",[a._v("在高并发环境下，"),r("strong",[a._v("服务之间的依赖关系导致调用失败，解决的方式通常是: 限流- >熔断->隔离->降级, 其目的是防止雪崩效应")]),a._v("。")])])]),a._v(" "),r("li",[r("a",{attrs:{href:"/pages/arch-loadbalance"}},[a._v("架构之高可用：负载均衡")]),a._v(" "),r("ul",[r("li",[a._v("负载均衡（Load Balance），意思是将负载（工作任务，访问请求）进行平衡、分摊到多个操作单元（服务器，组件）上进行执行。是解决高性能，单点故障（高可用），扩展性（水平伸缩）的终极解决方案。")])])]),a._v(" "),r("li",[r("a",{attrs:{href:"/pages/arch-backup"}},[a._v("架构之高可用：容灾备份,故障转移")]),a._v(" "),r("ul",[r("li",[a._v("容灾技术是系统的高可用性技术的一个组成部分，容灾系统更加强调处理外界环境对系统的影响，特别是灾难性事件对整个IT节点的影响，提供节点级别的系统恢复功能。故障转移（failover），即当活动的服务或应用意外终止时，快速启用"),r("strong",[a._v("冗余")]),a._v(" 或备用的服务器、系统、硬件或者网络接替它们工作。故障恢复是在计划内或计划外中断解决后"),r("strong",[a._v("切换回主站点")]),a._v(" 的过程。")])])])]),a._v(" "),r("h3",{attrs:{id:"架构的安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#架构的安全"}},[a._v("#")]),a._v(" 架构的安全")]),a._v(" "),r("blockquote",[r("p",[a._v("此外还需要关注下架构的安全。")])]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/pages/arch-security"}},[a._v("架构 - 保障架构安全")]),a._v(" "),r("ul",[r("li",[a._v("本文对架构安全知识点梳理。")])])])])])}),[],!1,null,null,null);r.default=_.exports}}]);