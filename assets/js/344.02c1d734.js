(window.webpackJsonp=window.webpackJsonp||[]).push([[344],{675:function(t,v,r){"use strict";r.r(v);var a=r(4),_=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"架构-理解构架的分层"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#架构-理解构架的分层"}},[t._v("#")]),t._v(" 架构 - 理解构架的分层")]),t._v(" "),v("blockquote",[v("p",[t._v("技术框架（technological\nFramework）是整个或部分技术系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法。于开发者而言，实际工作从通常采用的是分层模型，这里独立一个章节，总结经典的"),v("strong",[t._v("七层逻辑架构")]),t._v("\n。")])]),t._v(" "),v("h2",{attrs:{id:"架构技术视角回顾"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#架构技术视角回顾"}},[t._v("#")]),t._v(" 架构技术视角回顾")]),t._v(" "),v("blockquote",[v("p",[t._v("上个章节"),v("RouterLink",{attrs:{to:"/pages/arch-view.html#应用技术架构"}},[t._v("架构 - 理解构架的视角")]),t._v("中已经站在不同角色视角理解了架构，我们再回顾下技术架构。")],1)]),t._v(" "),v("p",[t._v("技术框架（technological\nFramework）是整个或部分技术系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，技术框架是可被技术开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。")]),t._v(" "),v("p",[t._v("从技术层面描述，主要是分层模型，例如持久层、数据层、逻辑层、应用层、表现层等，然后每层使用什么技术框架，例如Spring、hibernate、ioc、MVC、成熟的类库、中间件、WebService等，分别说明，要求这些技术能够将整个系统的主要实现概括。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/arch-x-view-2.png",alt:"img"}})]),t._v(" "),v("h2",{attrs:{id:"分层下看架构技术点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分层下看架构技术点"}},[t._v("#")]),t._v(" 分层下看架构技术点")]),t._v(" "),v("blockquote",[v("p",[t._v("于开发者而言，实际工作从通常采用的是分层模型，总结下经典的"),v("strong",[t._v("七层逻辑架构")]),t._v(" 。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/arch-x-overview-layer2.jpg",alt:"img"}})]),t._v(" "),v("p",[t._v("以上采用"),v("strong",[t._v("七层逻辑架构")]),t._v(" ，第一层客户层，第二层前端优化层，第三层应用层，第四层服务层，第五层数据存储层，第六层大数据存储层，第七层大数据处理层。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("客户层")]),t._v(" ：减少Http请求数，浏览器缓存，启用压缩，Js异步，减少Cookie传输；")]),t._v(" "),v("li",[v("strong",[t._v("前端层")]),t._v(" ：DNS负载均衡，CDN本地加速，反向代理服务；")]),t._v(" "),v("li",[v("strong",[t._v("应用层")]),t._v(" ：业务拆分；负载均衡，分级管理，应用缓存，服务集群，快速失败，异步调用，服务降级，消息队列，幂等设计等。")]),t._v(" "),v("li",[v("strong",[t._v("服务层")]),t._v(" ：提供公用服务，比如用户服务，订单服务，支付服务等；")]),t._v(" "),v("li",[v("strong",[t._v("数据层")]),t._v(" ：分布式, 数据库集群，读写分离，NOSQL集群，文件系统集群；分布式缓存；冗余备份（冷，热备[同步，异步]，温备），失效转移（确认，转移，恢复）。CAP理论，一致性算法。")]),t._v(" "),v("li",[v("strong",[t._v("大数据存储层")]),t._v(" ：支持应用层和服务层的日志数据收集，关系数据库和NOSQL数据库的结构化和半结构化数据收集；")]),t._v(" "),v("li",[v("strong",[t._v("大数据处理层")]),t._v(" ：通过Mapreduce进行离线数据分析或Storm实时数据分析，并将处理后的数据存入关系型数据库。（实际使用中，离线数据和实时数据会按照业务要求进行分类处理，并存入不同的数据库中，供应用层或服务层使用）。")])])])}),[],!1,null,null,null);v.default=_.exports}}]);