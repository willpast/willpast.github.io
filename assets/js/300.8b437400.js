(window.webpackJsonp=window.webpackJsonp||[]).push([[300],{631:function(a,t,n){"use strict";n.r(t);var s=n(4),e=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),t("blockquote",[t("p",[a._v("JSON应用非常广泛，对于Java常用的JSON库要完全掌握; 其中考虑到FastJson代码质量，漏洞，坑等等，应该尽量避免使用。")])]),a._v(" "),t("h2",{attrs:{id:"json简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json简介"}},[a._v("#")]),a._v(" JSON简介")]),a._v(" "),t("h3",{attrs:{id:"json是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json是什么"}},[a._v("#")]),a._v(" JSON是什么")]),a._v(" "),t("ul",[t("li",[a._v("JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）")]),a._v(" "),t("li",[a._v("JSON 是轻量级的文本数据交换格式")]),a._v(" "),t("li",[a._v("JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。")]),a._v(" "),t("li",[a._v("JSON 具有自我描述性，更易理解")])]),a._v(" "),t("h3",{attrs:{id:"结构与类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构与类型"}},[a._v("#")]),a._v(" 结构与类型")]),a._v(" "),t("ul",[t("li",[a._v("只有两种结构：对象内的键值对集合结构和数组，对象用{}表示、内部是”key”:”value”，数组用[]表示，不同值用逗号分开")]),a._v(" "),t("li",[a._v("基本数值有7个： false / null / true / object / array / number / string")]),a._v(" "),t("li",[a._v("再加上结构可以嵌套，进而可以用来表达复杂的数据")])]),a._v(" "),t("p",[a._v("一个简单实例")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('{\n   "Image": {\n       "Width":  800,\n       "Height": 600,\n       "Title":  "View from 15th Floor",\n       "Thumbnail": {\n           "Url":    "http://www.example.com/image/481989943",\n           "Height": 125,\n           "Width":  "100"\n       },\n       "IDs": [116, 943, 234, 38793]\n     }\n}\n')])])]),t("h3",{attrs:{id:"json优秀资源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json优秀资源"}},[a._v("#")]),a._v(" JSON优秀资源")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/burningtree/awesome-json",target:"_blank",rel:"noopener noreferrer"}},[a._v("awesome-json在新窗口打开"),t("OutboundLink")],1)])]),a._v(" "),t("h3",{attrs:{id:"json在线解析工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json在线解析工具"}},[a._v("#")]),a._v(" JSON在线解析工具")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://c.runoob.com/front-end/53",target:"_blank",rel:"noopener noreferrer"}},[a._v("JSON 在线解析在新窗口打开"),t("OutboundLink")],1)])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-package-json-3.png",alt:"img"}})]),a._v(" "),t("h2",{attrs:{id:"json类库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json类库"}},[a._v("#")]),a._v(" JSON类库")]),a._v(" "),t("p",[a._v("Java中并没有内置JSON的解析，因此使用JSON需要借助第三方类库。")]),a._v(" "),t("p",[a._v("下面是几个常用的 JSON 解析类库：")]),a._v(" "),t("ul",[t("li",[a._v("FastJson: 阿里巴巴开发的 JSON 库，性能优秀。")]),a._v(" "),t("li",[a._v("Jackson: 社区十分活跃且更新速度很快。")]),a._v(" "),t("li",[a._v("Gson: 谷歌开发的 JSON 库，功能十分全面。")])]),a._v(" "),t("h3",{attrs:{id:"性能测试对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能测试对比"}},[a._v("#")]),a._v(" 性能测试对比")]),a._v(" "),t("p",[a._v("从下面的测试结果可以看出，序列化次数比较小的时候，Gson性能最好，当不断增加的时候到了100000，Gson明细弱于Jackson和FastJson，\n这时候FastJson性能是真的牛，另外还可以看到不管数量少还是多，Jackson一直表现优异。而那个Json-lib可以直接忽略。")]),a._v(" "),t("ul",[t("li",[a._v("JSON序列化性能")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-package-json-1.png",alt:"img"}})]),a._v(" "),t("ul",[t("li",[a._v("JSON反序列化性能")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-package-json-2.png",alt:"img"}})]),a._v(" "),t("p",[a._v("更多请参考：\n"),t("a",{attrs:{href:"https://www.xncoding.com/2018/01/09/java/jsons.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java几种常用JSON库性能比较在新窗口打开"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"fastjson"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fastjson"}},[a._v("#")]),a._v(" FastJson")]),a._v(" "),t("p",[a._v("先泼一盆冷水，个人非常不推荐使用FastJson, 为什么？")]),a._v(" "),t("ul",[t("li",[a._v("FastJson 源码质量较低")]),a._v(" "),t("li",[a._v("FastJson Bug、漏洞较多")]),a._v(" "),t("li",[a._v("FastJson 牺牲多数场景下的稳定性而提高的效率")])]),a._v(" "),t("h3",{attrs:{id:"fastjson-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fastjson-简介"}},[a._v("#")]),a._v(" Fastjson 简介")]),a._v(" "),t("p",[a._v("Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。")]),a._v(" "),t("p",[a._v("Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/alibaba/fastjson",target:"_blank",rel:"noopener noreferrer"}},[a._v("Fastjson Github在新窗口打开"),t("OutboundLink")],1),a._v(" 看这里")]),a._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/alibaba/fastjson/wiki/Quick-Start-CN",target:"_blank",rel:"noopener noreferrer"}},[a._v("Fastjson 中文 Wiki在新窗口打开"),t("OutboundLink")],1)])]),a._v(" "),t("h3",{attrs:{id:"fastjson-特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fastjson-特性"}},[a._v("#")]),a._v(" Fastjson 特性")]),a._v(" "),t("ul",[t("li",[a._v("提供服务器端、安卓客户端两种解析工具，性能表现较好。")]),a._v(" "),t("li",[a._v("提供了 toJSONString() 和 parseObject() 方法来将 Java 对象与 JSON 相互转换。调用toJSONString方 法即可将对象转换成 JSON 字符串，parseObject 方法则反过来将 JSON 字符串转换成对象。")]),a._v(" "),t("li",[a._v("允许转换预先存在的无法修改的对象（只有class、无源代码）。")]),a._v(" "),t("li",[a._v("Java泛型的广泛支持。")]),a._v(" "),t("li",[a._v("允许对象的自定义表示、允许自定义序列化类。")]),a._v(" "),t("li",[a._v("支持任意复杂对象（具有深厚的继承层次和广泛使用的泛型类型）。")])]),a._v(" "),t("h3",{attrs:{id:"下载和使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#下载和使用"}},[a._v("#")]),a._v(" 下载和使用")]),a._v(" "),t("p",[a._v("你可以在 maven\n中央仓库中直接下载："),t("a",{attrs:{href:"http://repo1.maven.org/maven2/com/alibaba/fastjson/",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://repo1.maven.org/maven2/com/alibaba/fastjson/"),t("OutboundLink")],1),t("a",{attrs:{href:"http://repo1.maven.org/maven2/com/alibaba/fastjson/",target:"_blank",rel:"noopener noreferrer"}},[a._v("在新窗口打开"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("配置 maven 依赖:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>x.x.x</version>\n</dependency>\n")])])]),t("p",[a._v("其中 x.x.x 是版本号，根据需要使用特定版本，建议使用最新版本。")]),a._v(" "),t("h3",{attrs:{id:"序列化一个对象成json字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列化一个对象成json字符串"}},[a._v("#")]),a._v(" 序列化一个对象成JSON字符串")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('User user = new User();\nuser.setName("校长");\nuser.setAge(3);\nuser.setSalary(new BigDecimal("123456789.0123"));\nString jsonString = JSON.toJSONString(user);\nSystem.out.println(jsonString);\n// 输出 {"age":3,"name":"校长","old":false,"salary":123456789.0123}\n')])])]),t("h3",{attrs:{id:"反序列化一个json字符串成java对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反序列化一个json字符串成java对象"}},[a._v("#")]),a._v(" 反序列化一个JSON字符串成Java对象")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('String jsonString = "{\\"age\\":3,\\"birthdate\\":1496738822842,\\"name\\":\\"校长\\",\\"old\\":true,\\"salary\\":123456789.0123}";\n User u = JSON.parseObject(jsonString ,User.class);\n System.out.println(u.getName());\n // 输出 校长\n\nString jsonStringArray = "[{\\"age\\":3,\\"birthdate\\":1496738822842,\\"name\\":\\"校长\\",\\"old\\":true,\\"salary\\":123456789.0123}]";\nList<User> userList = JSON.parseArray(jsonStringArray, User.class);\nSystem.out.println(userList.size());\n// 输出 1\n')])])]),t("h3",{attrs:{id:"对于日期的处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对于日期的处理"}},[a._v("#")]),a._v(" 对于日期的处理")]),a._v(" "),t("p",[a._v("默认序列化Date输出使用”yyyy-MM-dd HH:mm:ss”格式，可以用UseISO8601DateFormat特性换成”yyyy-MM-\ndd’T’HH:mm:ss”格式。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('JSON.defaultTimeZone = TimeZone.getTimeZone("Asia/Shanghai");\nJSON.defaultLocale = Locale.US;\n        \npublic static class Model {\n    @JSONField(format = "MMM dd, yyyy h:mm:ss aa")\n    private java.util.Date date;\n\n    public java.util.Date getDate() {\n        return date;\n    }\n\n    public void setDate(java.util.Date date) {\n        this.date = date;\n    }\n\n    @JSONField(format = "MMM-dd-yyyy h:mm:ss aa")\n    public java.sql.Date date2;\n}\n')])])]),t("h3",{attrs:{id:"bean和数组转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean和数组转换"}},[a._v("#")]),a._v(" Bean和数组转换")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/alibaba/fastjson/wiki/BeanToArray_cn",target:"_blank",rel:"noopener noreferrer"}},[a._v("官方例子 - BeanToArray_cn在新窗口打开"),t("OutboundLink")],1)])]),a._v(" "),t("h3",{attrs:{id:"设置字段名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置字段名"}},[a._v("#")]),a._v(" 设置字段名")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public class A {\n    @JSONField(name="ID")\n    private int id;\n\n    public int getId() {return id;}\n    public void setId(int value) {this.id = id;}\n}\n')])])]),t("h3",{attrs:{id:"设置是否不序列化某字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置是否不序列化某字段"}},[a._v("#")]),a._v(" 设置是否不序列化某字段")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("public class A {\n    @JSONField(serialize=false)\n    public Date date;\n}\n\npublic class A {\n    @JSONField(deserialize=false)\n    public Date date;\n}\n")])])]),t("h3",{attrs:{id:"设置字段顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置字段顺序"}},[a._v("#")]),a._v(" 设置字段顺序")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("public static class VO {\n    @JSONField(ordinal = 3)\n    private int f0;\n\n    @JSONField(ordinal = 2)\n    private int f1;\n\n    @JSONField(ordinal = 1)\n    private int f2;\n}\n")])])]),t("h3",{attrs:{id:"自定义序列化和反序列化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义序列化和反序列化"}},[a._v("#")]),a._v(" 自定义序列化和反序列化")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/u010246789/article/details/52539576",target:"_blank",rel:"noopener noreferrer"}},[a._v("fastjson SerializerFeature详解在新窗口打开"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/alibaba/fastjson/wiki/ObjectDeserializer_cn",target:"_blank",rel:"noopener noreferrer"}},[a._v("ObjectDeserializer_cn在新窗口打开"),t("OutboundLink")],1)])]),a._v(" "),t("h3",{attrs:{id:"fastjson漏洞问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fastjson漏洞问题"}},[a._v("#")]),a._v(" FastJson漏洞问题")]),a._v(" "),t("blockquote",[t("p",[a._v("尽量使用最新版本。")])]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://blog.nsfocus.net/analysis-protection-fastjson-remote-code-execution-vulnerability/",target:"_blank",rel:"noopener noreferrer"}},[a._v("fastjson远程代码执行漏洞技术分析与防护方案在新窗口打开"),t("OutboundLink")],1)])]),a._v(" "),t("p",[a._v("好了，我要开喷了。")]),a._v(" "),t("p",[a._v("警告")]),a._v(" "),t("p",[a._v("远离FastJson这个库，老程序员都知道这里有多少坑:")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/alibaba/fastjson/issues",target:"_blank",rel:"noopener noreferrer"}},[a._v("alibaba/fastjson在新窗口打开"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.zhihu.com/question/44199956/answer/112224034",target:"_blank",rel:"noopener noreferrer"}},[a._v("fastjson这么快老外为啥还是热衷 jackson?在新窗口打开"),t("OutboundLink")],1)])]),a._v(" "),t("h2",{attrs:{id:"jackson"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jackson"}},[a._v("#")]),a._v(" JackSon")]),a._v(" "),t("h3",{attrs:{id:"jackson简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jackson简介"}},[a._v("#")]),a._v(" JackSon简介")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/FasterXML/jackson",target:"_blank",rel:"noopener noreferrer"}},[a._v("Jackson Github在新窗口打开"),t("OutboundLink")],1),a._v(" 看这里")]),a._v(" "),t("li",[t("a",{attrs:{href:"http://wiki.fasterxml.com/JacksonHome",target:"_blank",rel:"noopener noreferrer"}},[a._v("Jackson Wiki在新窗口打开"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/FasterXML/jackson-docs",target:"_blank",rel:"noopener noreferrer"}},[a._v("Jackson 文档在新窗口打开"),t("OutboundLink")],1)])]),a._v(" "),t("h3",{attrs:{id:"jackson组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jackson组件"}},[a._v("#")]),a._v(" Jackson组件")]),a._v(" "),t("h4",{attrs:{id:"_3个核心模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3个核心模块"}},[a._v("#")]),a._v(" 3个核心模块：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("Streaming")]),a._v(" : jackson-core jar，定义了底层的streaming API和实现了Json特性。")]),a._v(" "),t("li",[t("strong",[a._v("Annotations")]),a._v(" : jackson-annotations jar，包含了标准的Jackson注解。本文暂不介绍。")]),a._v(" "),t("li",[t("strong",[a._v("Databind")]),a._v(" : jackson-databind jar，实现了数据绑定和对象序列化，它依赖于streaming和annotations的包。")])]),a._v(" "),t("h4",{attrs:{id:"第三方数据类型模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三方数据类型模块"}},[a._v("#")]),a._v(" 第三方数据类型模块")]),a._v(" "),t("p",[a._v("这些扩展是插件式的Jackson模块，用ObjectMapper.registerModule()注册，并且通过添加serializers和deserializers以便Databind包（ObjectMapper\n/ ObjectReader / ObjectWriter）可以读写这些类型，来增加对各种常用的Java库的数据类型的支持。")]),a._v(" "),t("h4",{attrs:{id:"数据格式模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据格式模块"}},[a._v("#")]),a._v(" 数据格式模块")]),a._v(" "),t("p",[a._v("Jackson也有处理程序对JAX-RS标准实现者例如Jersey, RESTeasy,\nCXF等提供了数据格式支持。处理程序实现了MessageBodyReader和MessageBodyWriter，目前支持的数据格式包括JSON,\nSmile, XML, YAML和CBOR。")]),a._v(" "),t("p",[a._v("数据格式提供了除了Json之外的数据格式支持，它们绝大部分仅仅实现了streaming API\nabstractions，以便数据绑定组件可以按照原来的方式使用。另一些（几乎不需要）提供了databind标准功能来处理例如schemas。")]),a._v(" "),t("h3",{attrs:{id:"jackson的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jackson的使用"}},[a._v("#")]),a._v(" Jackson的使用")]),a._v(" "),t("p",[a._v("引用maven jar包：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("\x3c!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --\x3e\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-core</artifactId>\n    <version>2.10.1</version>\n</dependency>\n\x3c!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --\x3e\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>2.10.1</version>\n</dependency>\n\x3c!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --\x3e\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-annotations</artifactId>\n    <version>2.10.1</version>\n</dependency>\n")])])]),t("h3",{attrs:{id:"序列化一个对象成json字符串-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列化一个对象成json字符串-2"}},[a._v("#")]),a._v(" 序列化一个对象成JSON字符串")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public void toJson() throws JsonProcessingException {\n\n    ObjectMapper mapper = new ObjectMapper();\n\n    City case1 = new City();\n    case1.setCity("SZ");\n    case1.setAge(123);\n\n    String jsonStr = mapper.writeValueAsString(case1);\n    System.out.println("JSON:" + jsonStr);\n}\n// 输出：JSON:{"city":"SZ","age":123}\n')])])]),t("h3",{attrs:{id:"反序列化一个json字符串成java对象-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反序列化一个json字符串成java对象-2"}},[a._v("#")]),a._v(" 反序列化一个JSON字符串成Java对象")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public void toObj() throws JsonParseException, JsonMappingException, IOException {\n    ObjectMapper mapper = new ObjectMapper();\n    String inputjsonstr = "{\\"city\\":\\"SZ\\",\\"age\\":123}";\n    \n    City readcase = mapper.readValue(inputjsonstr, City.class);\n\n    System.out.println("city info:" + readcase);\n}\n')])])]),t("blockquote",[t("p",[a._v("如果里面有未知属性，比如json中有"),t("code",[a._v("desc")]),a._v("字段，但是City中没有相应字段，会报错, 需要设置如下：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n")])])]),t("h3",{attrs:{id:"常用注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用注解"}},[a._v("#")]),a._v(" 常用注解")]),a._v(" "),t("ul",[t("li",[t("code",[a._v('@JsonProperty("xxx")')]),a._v(": 将当前的属性名在json字符串中重新命名为当前设置的这个值，比如在示例中，将age--\x3emAge")]),a._v(" "),t("li",[t("code",[a._v("@JsonIgnore")]),a._v(": 将被标注的属性在生成json字符串的时候，直接忽略")]),a._v(" "),t("li",[t("code",[a._v("@JsonInclude")]),a._v(": 是一个类级别的设置，JsonInclude.Include.NON_EMPTY标识只有非NULL的值才会被纳入json string之中，其余的都被忽略，比如这里的location属性，并没有出现在最终的结果字符串中。")]),a._v(" "),t("li",[t("code",[a._v("@JsonSerialize")]),a._v(": 使用自定义的类来实现自定义的字段转换。写入操作。")]),a._v(" "),t("li",[t("code",[a._v("@JsonDeserialize")]),a._v(": 解析的时候，自定义的转换器；读取操作。")]),a._v(" "),t("li",[t("code",[a._v("@JsonAutoDetect")]),a._v(": 设置类的访问策略，是否所有的属性都可以，还是按照一定的方式来提取。")]),a._v(" "),t("li",[t("code",[a._v("@JsonRawValue")]),a._v(": 无转换的将属性值写入到json 字符串中。 写入操作")]),a._v(" "),t("li",[t("code",[a._v("@JsonValue")]),a._v(": 标注方法，用以替代缺省的方法，由该方法来完成json的字符输出。")])]),a._v(" "),t("h2",{attrs:{id:"gson"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gson"}},[a._v("#")]),a._v(" GSON")]),a._v(" "),t("h3",{attrs:{id:"gson简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gson简介"}},[a._v("#")]),a._v(" Gson简介")]),a._v(" "),t("p",[a._v("Gson是这样一个Java类库，它可以将Java对象转换为相应的JSON形式，也可以将JSON字符串转换为对应的Java对象。\nGson可以使用任意Java对象，包括哪些预先存在的、不在你的源代码中的对象（因此，你并不知道对象的属性）。")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/1e20b28c39d1",target:"_blank",rel:"noopener noreferrer"}},[a._v("Gson用户指南（中文翻译）在新窗口打开"),t("OutboundLink")],1),a._v("看这里")])]),a._v(" "),t("h3",{attrs:{id:"gson的目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gson的目标"}},[a._v("#")]),a._v(" Gson的目标")]),a._v(" "),t("ul",[t("li",[a._v("提供一种机制，使得将Java对象转换为JSON或相反如使用toString()以及构造器（工厂方法）一样简单。")]),a._v(" "),t("li",[a._v("允许预先存在的不可变的对象转换为JSON或与之相反。")]),a._v(" "),t("li",[a._v("允许自定义对象的表现形式")]),a._v(" "),t("li",[a._v("支持任意复杂的对象")]),a._v(" "),t("li",[a._v("输出轻量易读的JSON")])]),a._v(" "),t("h3",{attrs:{id:"gson的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gson的使用"}},[a._v("#")]),a._v(" Gson的使用")]),a._v(" "),t("p",[a._v("使用Gson的首要类是Gson类，你可以仅仅通过new\nGson()的方式创建它。你也可以通过GsonBuilder类去创建Gson实例，这个类允许你进行一系列配置，例如版本控制等等。")]),a._v(" "),t("p",[a._v("Gson实例不会保存任何进行Json操作时的状态。因此，你可以自由的服用相同的Gson对象进行诸多的Json序列化和反序列化操作。")]),a._v(" "),t("p",[a._v("引用maven jar包：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("\x3c!-- https://mvnrepository.com/artifact/com.google.guava/guava --\x3e\n<dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>28.2-jre</version>\n</dependency>\n")])])]),t("h3",{attrs:{id:"序列化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列化"}},[a._v("#")]),a._v(" 序列化")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('// 基础类型\nGson gson = new Gson();\ngson.toJson(1);            ==> prints 1\ngson.toJson("abcd");       ==> prints "abcd"\ngson.toJson(new Long(10)); ==> prints 10\nint[] values = { 1 };\ngson.toJson(values);       ==> prints [1]\n\n// 对象\nBagOfPrimitives obj = new BagOfPrimitives();\nGson gson = new Gson();\nString json = gson.toJson(obj);  \n==> json is {"value1":1,"value2":"abc"}\n\n// 数组\nGson gson = new Gson();\nint[] ints = {1, 2, 3, 4, 5};\nString[] strings = {"abc", "def", "ghi"};\ngson.toJson(ints);     ==> prints [1,2,3,4,5]\ngson.toJson(strings);  ==> prints ["abc", "def", "ghi"]\n\n// 集合\nGson gson = new Gson();\nCollection<Integer> ints = Lists.immutableList(1,2,3,4,5);\nString json = gson.toJson(ints); ==> json is [1,2,3,4,5]\n')])])]),t("p",[a._v("其中的对象代码：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('class BagOfPrimitives {\n  private int value1 = 1;\n  private String value2 = "abc";\n  private transient int value3 = 3;\n  BagOfPrimitives() {\n    // no-args constructor\n  }\n}\n')])])]),t("h3",{attrs:{id:"反序列化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反序列化"}},[a._v("#")]),a._v(" 反序列化")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('// 基础类型\nGson gson = new Gson();\nint one = gson.fromJson("1", int.class);\nInteger one = gson.fromJson("1", Integer.class);\nLong one = gson.fromJson("1", Long.class);\nBoolean false = gson.fromJson("false", Boolean.class);\nString str = gson.fromJson("\\"abc\\"", String.class);\nString anotherStr = gson.fromJson("[\\"abc\\"]", String.class);\n\n// 对象\nBagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);   \n==> obj2 is just like obj\n\n// 数组\nGson gson = new Gson();\nint[] ints2 = gson.fromJson("[1,2,3,4,5]", int[].class); \n==> ints2 will be same as ints\n\n// 集合\nGson gson = new Gson();\nType collectionType = new TypeToken<Collection<Integer>>(){}.getType();\nCollection<Integer> ints2 = gson.fromJson(json, collectionType);\nints2 is same as ints\n')])])]),t("h3",{attrs:{id:"自定义序列化和反序列化机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义序列化和反序列化机制"}},[a._v("#")]),a._v(" 自定义序列化和反序列化机制")]),a._v(" "),t("p",[a._v("有时候，默认的实现并不是你想要的。这在处理类库时常常发生（例如DateTime）。Gson允许你注册自己自定义的序列化器和反序列化器。该过程分为两部分：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Json序列化器：需要为一个对象自定义序列化机制。")])]),a._v(" "),t("li",[t("p",[a._v("Json反序列化器：需要为一个类型自定义反序列化机制。")])])]),a._v(" "),t("p",[a._v("实例构造者：并不需要，如果无参构造器是可用的或者注册了一个反序列化器。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("GsonBuilder gson = new GsonBuilder();\ngson.registerTypeAdapter(MyType2.class, new MyTypeAdapter());\ngson.registerTypeAdapter(MyType.class, new MySerializer());\ngson.registerTypeAdapter(MyType.class, new MyDeserializer());\ngson.registerTypeAdapter(MyType.class, new MyInstanceCreator());\n")])])]),t("p",[a._v("registerTypeAdapter会检查类型适配器是否实现了上面三个接口中的一个以上并且它们都注册了类型适配器。")]),a._v(" "),t("p",[a._v("更多请参考："),t("a",{attrs:{href:"https://www.jianshu.com/p/1e20b28c39d1",target:"_blank",rel:"noopener noreferrer"}},[a._v("Gson用户指南（中文翻译）在新窗口打开"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),t("ul",[t("li",[a._v("https://github.com/FasterXML/jackson")]),a._v(" "),t("li",[a._v("https://www.runoob.com/w3cnote/fastjson-intro.html")]),a._v(" "),t("li",[a._v("https://blog.csdn.net/m0_37076574/article/details/81317403")]),a._v(" "),t("li",[a._v("https://blog.csdn.net/blueheart20/article/details/52212221")]),a._v(" "),t("li",[a._v("https://blog.csdn.net/gjb724332682/article/details/51586701")]),a._v(" "),t("li",[a._v("https://www.jianshu.com/p/1e20b28c39d1")]),a._v(" "),t("li",[a._v("https://www.jianshu.com/p/923a9fe78108")])])])}),[],!1,null,null,null);t.default=e.exports}}]);