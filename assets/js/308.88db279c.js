(window.webpackJsonp=window.webpackJsonp||[]).push([[308],{639:function(t,a,e){"use strict";e.r(a);var n=e(4),i=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"单元测试-idea下单元测试详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试-idea下单元测试详解"}},[t._v("#")]),t._v(" 单元测试 - IDEA下单元测试详解")]),t._v(" "),a("blockquote",[a("p",[t._v("工欲善其事必先利其器，我们在写单元测试一定要使用工具，这将能大幅度提升编码的效率。本文以IDEA为例，看看如何利用插件提升效率。")])]),t._v(" "),a("h2",{attrs:{id:"场景准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景准备"}},[t._v("#")]),t._v(" 场景准备")]),t._v(" "),a("p",[t._v("准备一个待测试的类, 其中还包含着错误。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("package tech.pdai.junit4.module;\n\npublic class Calculator {\n\n    public int result = 0;\n\n    /**\n     * add.\n     *\n     * @param operand1 first param\n     * @param operand2 second param\n     * @return sum\n     */\n    public int add(int operand1, int operand2) {\n        result = operand1 + operand2;\n        return result;\n    }\n\n    public int subtract(int operand1, int operand2) {\n        result = operand1 - operand2;\n        return result;\n    }\n\n    public int multiple(int operand1, int operand2) {\n        result = operand1 * operand2;\n        for (; ; ) {                    //死循环\n        }\n    }\n\n    public int divide(int operand1, int operand2) {\n        result = operand1 / 0;\n        return result;\n    }\n\n    public int getResult() {\n        return this.result;\n    }\n\n}\n")])])]),a("h2",{attrs:{id:"插件使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件使用"}},[t._v("#")]),t._v(" 插件使用")]),t._v(" "),a("h3",{attrs:{id:"自动生成单元测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动生成单元测试"}},[t._v("#")]),t._v(" 自动生成单元测试")]),t._v(" "),a("p",[t._v("第一个插件，首推的是JunitGeneratorV2.0")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-1.png",alt:"img"}})]),t._v(" "),a("p",[t._v("设置默认采用Junit4")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-2.png",alt:"img"}})]),t._v(" "),a("p",[t._v("如有必要可以设置生成的模板")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-3.png",alt:"img"}})]),t._v(" "),a("p",[t._v("测试下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-4.png",alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-5.png",alt:"img"}})]),t._v(" "),a("p",[t._v("生成单元测试")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-6.png",alt:"img"}})]),t._v(" "),a("p",[t._v("补充完整代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('package tech.pdai.junit4.module;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class CalculatorTest {\n\n    private static Calculator cal=new Calculator();\n\n    @Before\n    public void setUp() throws Exception {\n        System.out.println("before");\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        System.out.println("after");\n    }\n\n    @Test\n    public void add() {\n        cal.add(2,2);\n        assertEquals(4,cal.getResult());\n    }\n\n    @Test\n    public void subtract() {\n        cal.subtract(4,2);\n        assertEquals(2,cal.getResult());\n    }\n\n    @Ignore\n    public void multiply() {\n        fail("Not yet implemented");\n    }\n\n    @Test(timeout = 2000)\n    public void divide() {\n        for(;;);\n    }\n\n    @Test(expected = ArithmeticException.class)\n    public void testDivideByZero(){\n        cal.divide(4,0);\n    }\n\n}\n')])])]),a("p",[t._v("执行结果")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-7.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"并行测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并行测试"}},[t._v("#")]),t._v(" 并行测试")]),t._v(" "),a("p",[t._v("在大量的单元测试时，如何提升测试的效率呢？肯定是并行，所以你可以用如下的插件")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-8.png",alt:"img"}})]),t._v(" "),a("p",[t._v("看下相关测试触发按钮和输出：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-9.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"代码覆盖率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码覆盖率"}},[t._v("#")]),t._v(" 代码覆盖率")]),t._v(" "),a("p",[t._v("如何快速看本地代码测试覆盖率呢？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-10.png",alt:"img"}})]),t._v(" "),a("p",[t._v("代码覆盖率")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-11.png",alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-12.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"profile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#profile"}},[t._v("#")]),t._v(" Profile")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("CPU Profile")])])]),t._v(" "),a("p",[t._v("Flame Graph")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-13.png",alt:"img"}})]),t._v(" "),a("p",[t._v("Call Tree")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-14.png",alt:"img"}})]),t._v(" "),a("p",[t._v("Method List")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-15.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Allocation Profile")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/dev-ut-idea-16.png",alt:"img"}})])])}),[],!1,null,null,null);a.default=i.exports}}]);