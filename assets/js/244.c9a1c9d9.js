(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{575:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"redis进阶-版本特性-redis4-0、5-0、6-0特性整理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis进阶-版本特性-redis4-0、5-0、6-0特性整理"}},[s._v("#")]),s._v(" Redis进阶 - 版本特性: Redis4.0、5.0、6.0特性整理")]),s._v(" "),a("blockquote",[a("p",[s._v("在学习Redis知识体系时，我们难免会需要查看版本实现之间的差异，本文主要整理Redis较为新的版本的特性。")])]),s._v(" "),a("h2",{attrs:{id:"redis-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-4"}},[s._v("#")]),s._v(" Redis 4")]),s._v(" "),a("h3",{attrs:{id:"模块系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块系统"}},[s._v("#")]),s._v(" 模块系统")]),s._v(" "),a("p",[s._v("Redis 4.0 发生的最大变化就是加入了模块系统， 这个系统可以让用户通过自己编写的代码来扩展和实现 Redis\n本身并不具备的功能，因为模块系统是通过高层次 API 实现的， 它与 Redis 内核本身完全分离、互不干扰，\n所以用户可以在有需要的情况下才启用这个功能。目前已经有人使用这个功能开发了各种各样的模块， 比如 Redis Labs 开发的一些模块就可以在\nhttp://redismodules.com 看到。模块功能使得用户可以将 Redis 用作基础设施， 并在上面构建更多功能， 这给 Redis\n带来了无数新的可能性。")]),s._v(" "),a("h3",{attrs:{id:"psync-2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#psync-2-0"}},[s._v("#")]),s._v(" PSYNC 2.0")]),s._v(" "),a("p",[s._v("新版本的PSYNC命令解决了旧版本的 Redis 在复制时的一些不够优化的地方：")]),s._v(" "),a("ul",[a("li",[s._v("在旧版本 Redis 中， 如果一个从服务器在 FAILOVER 之后成为了新的主节点， 那么其他从节点在复制这个新主的时候就必须进行全量复制。 在 Redis 4.0 中， 新主和从服务器在处理这种情况时， 将在条件允许的情况下使用部分复制。")]),s._v(" "),a("li",[s._v("在旧版本 Redis 中， 一个从服务器如果重启了， 那么它就必须与主服务器重新进行全量复制， 在 Redis 4.0 中， 只要条件允许， 主从在处理这种情况时将使用部分复制。")]),s._v(" "),a("li",[s._v("在旧版本中，当复制为链式复制的时候，如 A—>B—>C ，主节点为A。当A出现问题，C节点不能正常复制B节点的数据。当提升B为主节点，C需要全量同步B的数据。在PSYNC2：PSYNC2解决了链式复制之间的关联性。A出现问题不影响C节点，B提升为主C不需要全量同步。")]),s._v(" "),a("li",[s._v("在使用星形复制时，如一主两从。A—>B , A—>C ，主节点为A。当A出现问题，B提升为主节点，C 重新指向主节点B。使用同步机制PSYNC2，C节点只做增量同步即可。在使用sentinel故障转移可以较少数据重新同步的延迟时间，避免大redis同步出现的网络带宽占满。")])]),s._v(" "),a("h3",{attrs:{id:"缓存驱逐策略优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存驱逐策略优化"}},[s._v("#")]),s._v(" 缓存驱逐策略优化")]),s._v(" "),a("p",[s._v("新添加了Last Frequently Used（LFU）缓存驱逐策略；")]),s._v(" "),a("p",[s._v("LFU：最不经常使用。在一段时间内，使用次数最少的数据，优先被淘汰；")]),s._v(" "),a("p",[s._v("另外 Redis 4.0 还对已有的缓存驱逐策略进行了优化， 使得它们能够更健壮、高效、快速和精确。")]),s._v(" "),a("h3",{attrs:{id:"lazy-free"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lazy-free"}},[s._v("#")]),s._v(" Lazy Free")]),s._v(" "),a("p",[s._v("在 Redis 4.0 之前， 用户在使用 DEL命令删除体积较大的键， 又或者在使用 "),a("strong",[s._v("FLUSHDB")]),s._v(" 和 "),a("strong",[s._v("FLUSHALL")]),s._v("\n删除包含大量键的数据库时， 都可能会造成服务器阻塞。")]),s._v(" "),a("p",[s._v("为了解决以上问题， Redis 4.0 新添加了"),a("strong",[s._v("UNLINK")]),s._v(" 命令， 这个命令是DEL命令的异步版本，\n它可以将删除指定键的操作放在后台线程里面执行， 从而尽可能地避免服务器阻塞：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("redis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" UNLINK fruits\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("因为一些历史原因， 执行同步删除操作的DEL命令将会继续保留。此外， Redis 4.0 中的"),a("strong",[s._v("FLUSHDB")]),s._v(" 和"),a("strong",[s._v("FLUSHALL")]),s._v("\n这两个命令都新添加了ASYNC选项， 带有这个选项的数据库删除操作将在后台线程进行：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("redis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" FLUSHDB ASYNC\nOK\n\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" FLUSHALL ASYNC\nOK\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("还有，执行"),a("code",[s._v("rename oldkey newkey")]),s._v("时，如果newkey已经存在，Redis会先删除已经存在的newkey，这也会引发上面提到的删除大key问题。如果想让Redis在这种场景下也使用lazyfree的方式来删除，可以按如下配置：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("lazyfree-lazy-server-del "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"交换数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交换数据库"}},[s._v("#")]),s._v(" 交换数据库")]),s._v(" "),a("p",[s._v("Redis 4.0 对数据库命令的另外一个修改是新增了SWAPDB命令， 这个命令可以对指定的两个数据库进行互换： 比如说， 通过执行命令 "),a("code",[s._v("SWAPDB 0 1")]),s._v(" ， 我们可以将原来的数据库 0 变成数据库 1 ， 而原来的数据库 1 则变成数据库 0。")]),s._v(" "),a("h3",{attrs:{id:"混合持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混合持久化"}},[s._v("#")]),s._v(" 混合持久化")]),s._v(" "),a("p",[s._v("Redis 4.0 新增了 RDB-AOF 混合持久化格式， 这是一个可选的功能， 在开启了这个功能之后， AOF 重写产生的文件将同时包含 RDB\n格式的内容和 AOF 格式的内容， 其中 RDB 格式的内容用于记录已有的数据， 而 AOF 格式的内存则用于记录最近发生了变化的数据， 这样 Redis\n就可以同时兼有 RDB 持久化和 AOF 持久化的优点 —— 既能够快速地生成重写文件， 也能够在出现问题时，\n快速地载入数据。这个功能可以通过配置项："),a("code",[s._v("aof-use-rdb-preamble")]),s._v("进行开启。")]),s._v(" "),a("h3",{attrs:{id:"内存命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存命令"}},[s._v("#")]),s._v(" 内存命令")]),s._v(" "),a("p",[s._v("新添加了一个MEMORY命令， 这个命令可以用于视察内存使用情况， 并进行相应的内存管理操作：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("redis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" MEMORY HELP\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MEMORY USAGE <key> [SAMPLES <count>] - Estimate memory usage of key"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MEMORY STATS                         - Show memory usage details"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MEMORY PURGE                         - Ask the allocator to release memory"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MEMORY MALLOC-STATS                  - Show allocator internal stats"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("其中， 使用MEMORY USAGE子命令可以估算储存给定键所需的内存：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("redis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SET msg "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\nOK\n\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SADD fruits apple banana cherry\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" MEMORY USAGE msg\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("62")]),s._v("\n\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" MEMORY USAGE fruits\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("375")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("使用MEMORY STATS子命令可以查看 Redis 当前的内存使用情况：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("redis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" MEMORY STATS\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"peak.allocated"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1014480")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"total.allocated"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1014512")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"startup.allocated"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("963040")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"replication.backlog"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"clients.slaves"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"clients.normal"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49614")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aof.buffer"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"db.0"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"overhead.hashtable.main"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("264")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"overhead.hashtable.expires"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"overhead.total"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1012950")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"keys.count"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"keys.bytes-per-key"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10294")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dataset.bytes"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1562")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dataset.percentage"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3.0346596240997314"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("27")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"peak.percentage"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"100.00315093994141"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fragmentation"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2.1193723678588867"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("p",[s._v("使用"),a("strong",[s._v("MEMORY PURGE")]),s._v(" 子命令可以要求分配器释放内存：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("redis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" MEMORY PURGE\nOK\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("使用"),a("strong",[s._v("MEMORY MALLOC-STATS")]),s._v(" 子命令可以展示分配器内部状态：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:630"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("6")]),s._v(">")]),s._v(" MEMORY MALLOC-STATS\n___ Begin jemalloc statistics ___\nVersion: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.0")]),s._v(".3-0-ge9192eacf8935e29fc62fddc2701f7942b1cc02c\nAssertions disabled\nRun-time option settings:\n  opt.abort: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n  opt.lg_chunk: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v("\n  opt.dss: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"secondary"')]),s._v("\n  opt.narenas: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("\n  opt.lg_dirty_mult: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arenas.lg_dirty_mult: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  opt.stats_print: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n  opt.junk: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"false"')]),s._v("\n  opt.quarantine: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n  opt.redzone: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n  opt.zero: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n  opt.tcache: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n  opt.lg_tcache_max: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("\nCPUs: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\nArenas: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("\nPointer size: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\nQuantum size: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\nPage size: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v("\nMin active:dirty page ratio per arena: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(":1\nMaximum thread-cached size class: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32768")]),s._v("\nChunk size: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2097152")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("^21"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nAllocated: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3101248")]),s._v(", active: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3371008")]),s._v(", metadata: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1590912")]),s._v(", resident: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4657152")]),s._v(", mapped: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8388608")]),s._v("\nCurrent active ceiling: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4194304")]),s._v("\n \narenas"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(":\nassigned threads: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\ndss allocation precedence: secondary\nmin active:dirty page ratio: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(":1\ndirty pages: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("823")]),s._v(":10 active:dirty, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" sweep, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" madvises, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1032")]),s._v(" purged\n                            allocated      nmalloc      ndalloc    nrequests\nsmall:                         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("586304")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25408")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13607")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("170099066")]),s._v("\nlarge:                        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2514944")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3967215")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3967203")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3967223")]),s._v("\nhuge:                               "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\ntotal:                        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3101248")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3992624")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3980811")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("174066290")]),s._v("\nactive:                       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3371008")]),s._v("\nmapped:                       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6291456")]),s._v("\nmetadata: mapped: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("159744")]),s._v(", allocated: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("346240")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br")])]),a("h3",{attrs:{id:"兼容-nat-和-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兼容-nat-和-docker"}},[s._v("#")]),s._v(" 兼容 NAT 和 Docker")]),s._v(" "),a("p",[s._v("在Redis Cluster集群模式下，集群的节点需要告诉用户或者是其他节点连接自己的IP和端口。")]),s._v(" "),a("p",[s._v("默认情况下，Redis会自动检测自己的IP和从配置中获取绑定的PORT，告诉客户端或者是其他节点。而在Docker环境中，如果使用的不是host网络模式，在容器内部的IP和PORT都是隔离的，那么客户端和其他节点无法通过节点公布的IP和PORT建立连接。")]),s._v(" "),a("p",[s._v("4.0中增加了三个配置：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("cluster-announce-ip")]),s._v("：要宣布的IP地址")]),s._v(" "),a("li",[a("code",[s._v("cluster-announce-port")]),s._v("：要宣布的数据端口")]),s._v(" "),a("li",[a("code",[s._v("cluster-announce-bus-port")]),s._v("：节点通信端口，默认在端口前+1")])]),s._v(" "),a("p",[s._v("如果配置了以后，Redis节点会将配置中的这些IP和PORT告知客户端或其他节点。而这些IP和PORT是通过Docker转发到容器内的临时IP和PORT的。\nActive Defrag")]),s._v(" "),a("p",[s._v("Redis 4.0 之后支持自动内存碎片整理（Active Defrag），通过以下选项进行配置：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启自动内存碎片整理(总开关)")]),s._v("\nactivedefrag "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当碎片达到 100mb 时，开启内存碎片整理")]),s._v("\nactive-defrag-ignore-bytes 100mb\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当碎片超过 10% 时，开启内存碎片整理")]),s._v("\nactive-defrag-threshold-lower "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内存碎片超过 100%，则尽最大努力整理")]),s._v("\nactive-defrag-threshold-upper "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内存自动整理占用资源最小百分比")]),s._v("\nactive-defrag-cycle-min "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内存自动整理占用资源最大百分比")]),s._v("\nactive-defrag-cycle-max "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("实现原理可参考：https://zhuanlan.zhihu.com/p/67381368")]),s._v(" "),a("h3",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),a("ul",[a("li",[s._v("Redis Cluster的故障检测方式改变，node之间的通讯减少；")]),s._v(" "),a("li",[s._v("慢日志记录客户端来源IP地址，这个小功能对于故障排查很有用处；")]),s._v(" "),a("li",[s._v("新增zlexcount命令，用于sorted set中，和zrangebylex类似，不同的是zrangebylex返回member，而zlexcount是返回符合条件的member个数；")])]),s._v(" "),a("h2",{attrs:{id:"redis-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-5"}},[s._v("#")]),s._v(" Redis 5")]),s._v(" "),a("h3",{attrs:{id:"stream类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream类型"}},[s._v("#")]),s._v(" Stream类型")]),s._v(" "),a("p",[s._v("Stream与Redis现有数据结构比较：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("Stream")]),s._v(" "),a("th",[s._v("List, Pub/Sub, Zset")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("获取元素高效，复杂度为O(logN)")]),s._v(" "),a("td",[s._v("List获取元素的复杂度为O(N)")])]),s._v(" "),a("tr",[a("td",[s._v("支持offset，每个消息元素有唯一id。不会因为新元素加入或者其他元素淘汰而改变id。")]),s._v(" "),a("td")])])]),s._v(" "),a("p",[s._v("List没有offset概念，如果有元素被逐出，无法确定最新的元素"),a("br"),s._v("\n支持消息元素持久化，可以保存到AOF和RDB中| Pub/Sub不支持持久化消息"),a("br"),s._v("\n支持消费分组| Pub/Sub不支持消费分组"),a("br"),s._v("\n支持ACK（消费确认）| Pub/Sub不支持"),a("br"),s._v("\nStream性能与消费者数量无明显关系| Pub/Sub性能与客户端数量负相关"),a("br"),s._v("\n允许按时间线逐出历史数据，支持block，给予radix tree和listpack，内存开销少|\nZset不能重复添加相同元素，不支持逐出和block，内存开销大"),a("br"),s._v("\n不能从中间删除消息元素| Zet支持删除任意元素")]),s._v(" "),a("h3",{attrs:{id:"新的redis模块api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新的redis模块api"}},[s._v("#")]),s._v(" 新的Redis模块API")]),s._v(" "),a("p",[s._v("新的Redis模块API：定时器(Timers)、集群(Cluster)和字典API(Dictionary APIs)。")]),s._v(" "),a("h3",{attrs:{id:"集群管理器更改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群管理器更改"}},[s._v("#")]),s._v(" 集群管理器更改")]),s._v(" "),a("p",[s._v("redis3.x和redis4.x的集群管理主要依赖基于Ruby的redis-\ntrib.rb脚本，redis5.0彻底抛弃了它，将集群管理功能全部集成到完全用C写的redis-cli中。可以通过命令"),a("code",[s._v("redis-cli --cluster help")]),s._v("查看帮助信息。")]),s._v(" "),a("h3",{attrs:{id:"lua改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lua改进"}},[s._v("#")]),s._v(" Lua改进")]),s._v(" "),a("p",[s._v("将Lua脚本更好地传播到 replicas/AOF；")]),s._v(" "),a("p",[s._v("Lua脚本现在可以超时并在副本中进入BUSY状态。")]),s._v(" "),a("h3",{attrs:{id:"rdb格式变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdb格式变化"}},[s._v("#")]),s._v(" RDB格式变化")]),s._v(" "),a("p",[s._v("Redis5.0开始，RDB快照文件中增加存储key逐出策略LRU和LFU：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("LRU(Least Recently Used)：最近最少使用。长期未使用的数据，优先被淘汰。")])]),s._v(" "),a("li",[a("p",[s._v("LFU(Least Frequently Used)：最不经常使用。在一段时间内，使用次数最少的数据，优先被淘汰。")])])]),s._v(" "),a("p",[s._v("Redis5.0的RDB文件格式有变化，向下兼容。因此如果使用快照的方式迁移，可以从Redis低版本迁移到Redis5.0，但不能从Redis5.0迁移到低版本。")]),s._v(" "),a("h3",{attrs:{id:"动态hz"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态hz"}},[s._v("#")]),s._v(" 动态HZ")]),s._v(" "),a("p",[s._v("以前redis版本的配置项hz都是固定的，redis5.0将hz动态化是为了平衡空闲CPU的使用率和响应能力。当然这个是可配置的，只不过在5.0中默认是动态的，其对应的配置为："),a("code",[s._v("dynamic- hz yes")])]),s._v(" "),a("h3",{attrs:{id:"zpopmin-zpopmax命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zpopmin-zpopmax命令"}},[s._v("#")]),s._v(" ZPOPMIN&ZPOPMAX命令")]),s._v(" "),a("ul",[a("li",[s._v("ZPOPMIN key [count]")])]),s._v(" "),a("p",[s._v("在有序集合ZSET所有key中，删除并返回指定count个数得分最低的成员，如果返回多个成员，也会按照得分高低（value值比较），从低到高排列。")]),s._v(" "),a("ul",[a("li",[s._v("ZPOPMAX key [count]")])]),s._v(" "),a("p",[s._v("在有序集合ZSET所有key中，删除并返回指定count个数得分最高的成员，如果返回多个成员，也会按照得分高低（value值比较），从高到低排列。")]),s._v(" "),a("ul",[a("li",[s._v("BZPOPMIN key [key …] timeout")])]),s._v(" "),a("p",[s._v("ZPOPMIN的阻塞版本。")]),s._v(" "),a("ul",[a("li",[s._v("BZPOPMAX key [key …] timeout")])]),s._v(" "),a("p",[s._v("ZPOPMAX的阻塞版本。")]),s._v(" "),a("h3",{attrs:{id:"client新增命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client新增命令"}},[s._v("#")]),s._v(" CLIENT新增命令")]),s._v(" "),a("ul",[a("li",[s._v("CLIENT UNBLOCK")])]),s._v(" "),a("p",[s._v("**格式：**CLIENT UNBLOCK client-id [TIMEOUT|ERROR]")]),s._v(" "),a("p",[s._v("**用法：**当客户端因为执行具有阻塞功能的命令如BRPOP、XREAD被阻塞时，该命令可以通过其他连接解除客户端的阻塞")]),s._v(" "),a("ul",[a("li",[s._v("CLIENT ID")])]),s._v(" "),a("p",[s._v("该命令仅返回当前连接的ID。每个连接ID都有某些保证： 它永远不会重复，可以判断当前链接是否断开过； ID是单调递增的。可以判断两个链接的接入顺序。")]),s._v(" "),a("h3",{attrs:{id:"其他-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他-2"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("主动碎片整理V2：增强版主动碎片整理，配合Jemalloc版本更新，更快更智能，延时更低；")])]),s._v(" "),a("li",[a("p",[s._v("HyperLogLog改进：在Redis5.0中，HyperLogLog算法得到改进，优化了计数统计时的内存使用效率；")])]),s._v(" "),a("li",[a("p",[s._v("更好的内存统计报告；")])]),s._v(" "),a("li",[a("p",[s._v("客户经常连接和断开连接时性能更好；")])]),s._v(" "),a("li",[a("p",[s._v("错误修复和改进；")])]),s._v(" "),a("li",[a("p",[s._v("Jemalloc内存分配器升级到5.1版本；")])]),s._v(" "),a("li",[a("p",[s._v("许多拥有子命令的命令，新增了HELP子命令，如：XINFO help、PUBSUB help、XGROUP help…")])]),s._v(" "),a("li",[a("p",[s._v("LOLWUT命令：没什么实际用处，根据不同的版本，显示不同的图案，类似安卓；")])]),s._v(" "),a("li",[a("p",[s._v("如果不为了API向后兼容，我们将不再使用“slave”一词："),a("a",{attrs:{href:"https://www.oschina.net/news/99797/redis-master-slave-terminology",target:"_blank",rel:"noopener noreferrer"}},[s._v("查看原因在新窗口打开"),a("OutboundLink")],1)])]),s._v(" "),a("li",[a("p",[s._v("Redis核心在许多方面进行了重构和改进。")])])]),s._v(" "),a("h2",{attrs:{id:"redis-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-6"}},[s._v("#")]),s._v(" Redis 6")]),s._v(" "),a("h3",{attrs:{id:"多线程io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程io"}},[s._v("#")]),s._v(" 多线程IO")]),s._v(" "),a("p",[s._v("Redis的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程顺序执行。所以我们不需要去考虑控制\nkey、lua、事务，LPUSH/LPOP 等等的并发及线程安全问题。")]),s._v(" "),a("p",[s._v("Redis6.0的多线程默认是禁用的，只使用主线程。如需开启需要修改redis.conf配置文件：io-threads-do-reads\nyes。开启多线程后，还需要设置线程数，否则是不生效的。修改redis.conf配置文件：io-threads\n，关于线程数的设置，官方有一个建议：4核的机器建议设置为2或3个线程，8核的建议设置为6个线程，线程数一定要小于机器核数。还需要注意的是，线程数并不是越大越好，官方认为超过了8个基本就没什么意义了。")]),s._v(" "),a("p",[s._v("更多关于redis 6.0多线程的讲解，请查看：https://www.cnblogs.com/madashu/p/12832766.html")]),s._v(" "),a("h3",{attrs:{id:"ssl支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssl支持"}},[s._v("#")]),s._v(" SSL支持")]),s._v(" "),a("p",[s._v("连接支持SSL协议，更加安全。")]),s._v(" "),a("h3",{attrs:{id:"acl支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acl支持"}},[s._v("#")]),s._v(" ACL支持")]),s._v(" "),a("p",[s._v("在之前的版本中，Redis都会有这样的问题：用户执行FLUSHAL，现在整个数据库就空了在以前解决这个问题的办法可能是在Redis配置中将危险命令进行rename，这样将命令更名为随机字符串或者直接屏蔽掉，以满足需要。当有了ACL之后，你就可以控制比如：这个连接只允许使用RPOP，LPUSH这些命令，其他命令都无法调用。")]),s._v(" "),a("p",[s._v("Redis ACL是Access Control\nList（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。它的工作方式是：在客户端连接之后，需要客户端进行身份验证，以提供用户名和有效密码：如果身份验证阶段成功，则将连接与指定用户关联，并且该用户具有指定的限制。可以对Redis进行配置，使新连接通过“默认”用户进行身份验证（这是默认配置），但是只能提供特定的功能子集。")]),s._v(" "),a("p",[s._v("在默认配置中，Redis\n6（第一个具有ACL的版本）的工作方式与Redis的旧版本完全相同，也就是说，每个新连接都能够调用每个可能的命令并访问每个键，因此ACL功能对于客户端和应用程序与旧版本向后兼容。同样，使用requirepass配置指令配置密码的旧方法仍然可以按预期工作，但是现在它的作用只是为默认用户设置密码。")]),s._v(" "),a("p",[s._v("Redis AUTH命令在Redis 6中进行了扩展，因此现在可以在两个参数的形式中使用它：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("AUTH "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("password"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也可按照旧格式使用时，即：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("AUTH "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("password"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("Redis提供了一个新的命令ACL来维护Redis的访问控制信息，详情见：https://redis.io/topics/acl")]),s._v(" "),a("h3",{attrs:{id:"resp3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resp3"}},[s._v("#")]),s._v(" RESP3")]),s._v(" "),a("p",[s._v("RESP（Redis Serialization Protocol）是 Redis 服务端与客户端之间通信的协议。Redis 6之前使用的是\nRESP2，而Redis 6开始在兼容RESP2的基础上，开始支持RESP3。在Redis\n6中我们可以使用HELLO命令在RESP2和RESP3协议之间进行切换：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#使用RESP2协议")]),s._v("\nHELLO "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#使用RESP3协议")]),s._v("\nHELLO "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("推出RESP3的目的：一是因为希望能为客户端提供更多的语义化响应（semantical\nreplies），降低客户端的复杂性，以开发使用旧协议难以实现的功能；另一个原因是为了实现 Client side\ncaching（客户端缓存）功能。详细见：https://github.com/antirez/RESP3/blob/master/spec.md")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v(" HSET myhash a "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v(" HGETALL myhash\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v(" HELLO "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "server" => "redis"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "version" => "6.0"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "proto" => (integer) 3')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "id" => (integer) 5')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "mode" => "standalone"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "role" => "master"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "modules" => (empty array)')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v(" HGETALL myhash\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "a" => "1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "b" => "2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "c" => "3"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h3",{attrs:{id:"客户端缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端缓存"}},[s._v("#")]),s._v(" 客户端缓存")]),s._v(" "),a("p",[s._v("基于 RESP3\n协议实现的客户端缓存功能。为了进一步提升缓存的性能，将客户端经常访问的数据cache到客户端。减少TCP网络交互。不过该特性目前合并到了unstable\n分支，作者说等6.0 GA版本之前，还要修改很多。")]),s._v(" "),a("p",[s._v("客户端缓存的功能是该版本的全新特性，服务端能够支持让客户端缓存values，Redis作为一个本身作为一个缓存数据库，自身的性能是非常出色的，但是如果可以在Redis客户端再增加一层缓存结果，那么性能会更加的出色。Redis实现的是一个服务端协助的客户端缓存，叫做tracking。客户端缓存的命令是:")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("CLIENT TRACKING ON|OFF [REDIRECT client-id] [PREFIX prefix] [BCAST] [OPTIN] [OPTOUT] [NOLOOP]\n")])])]),a("p",[s._v('当tracking开启时， Redis会"记住"每个客户端请求的key，当key的值发现变化时会发送失效信息给客户端。失效信息可以通过 RESP3\n协议发送给请求的客户端，或者转发给一个不同的连接(支持RESP2+ Pub/Sub)。')]),s._v(" "),a("p",[s._v("更多信息见：http://antirez.com/news/130")]),s._v(" "),a("h3",{attrs:{id:"集群代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群代理"}},[s._v("#")]),s._v(" 集群代理")]),s._v(" "),a("p",[s._v("因为 Redis Cluster\n内部使用的是P2P中的Gossip协议，每个节点既可以从其他节点得到服务，也可以向其他节点提供服务，没有中心的概念，通过一个节点可以获取到整个集群的所有信息。所以如果应用连接Redis\nCluster可以配置一个节点地址，也可以配置多个节点地址。但需要注意如果集群进行了上下节点的的操作，其应用也需要进行修改，这样会导致需要重启应用，非常的不友好。从Redis\n6.0开始支持了Prxoy，可以直接用Proxy来管理各个集群节点。本文来介绍下如何使用官方自带的proxy：redis-cluster-proxy\n通过使用 redis-cluster-proxy\n可以与组成Redis集群的一组实例进行通讯，就像是单个实例一样。Redis群集代理是多线程的，使用多路复用通信模型，因此每个线程都有自己的与群集的连接，该连接由属于该线程本身的所有客户端共享。")]),s._v(" "),a("p",[s._v("在某些特殊情况下（例如MULTI事务或阻塞命令），多路复用将被禁用；并且客户端将拥有自己的集群连接。这样客户端仅发送诸如GET和SET之类的简单命令就不需要Redis集群的专有连接。")]),s._v(" "),a("p",[s._v("redis-cluster-proxy的主要功能特点：")]),s._v(" "),a("ul",[a("li",[s._v("路由：每个查询都会自动路由到集群的正确节点")]),s._v(" "),a("li",[s._v("多线程")]),s._v(" "),a("li",[s._v("支持多路复用和专用连接模型")]),s._v(" "),a("li",[s._v("在多路复用上下文中，可以确保查询执行和答复顺序")]),s._v(" "),a("li",[s._v("发生ASK | MOVED错误后自动更新集群的配置：当答复中发生此类错误时，代理通过获取集群的更新配置并重新映射所有插槽来自动更新集群。 更新完成后所有查询将重新执行，因此，从客户端的角度来看，一切正常进行（客户端将不会收到ASK | MOVED错误：他们将在收到请求后直接收到预期的回复） 群集配置已更新）。")]),s._v(" "),a("li",[s._v("跨槽/跨节点查询：支持许多命令，这些命令涉及属于不同插槽（甚至不同集群节点）的多个键。这些命令会将查询分为多个查询，这些查询将被路由到不同的插槽/节点。 这些命令的回复处理是特定于命令的。 某些命令（例如MGET）将合并所有答复，就好像它们是单个答复一样。 其他命令（例如MSET或DEL）将汇总所有答复的结果。 由于这些查询实际上破坏了命令的原子性，因此它们的用法是可选的（默认情况下禁用）。")]),s._v(" "),a("li",[s._v("一些没有特定节点/插槽的命令（例如DBSIZE）将传递到所有节点，并且将对映射的回复进行映射缩减，以便得出所有回复中包含的所有值的总和。")]),s._v(" "),a("li",[s._v("可用于执行某些特定于代理的操作的附加PROXY命令")])]),s._v(" "),a("h3",{attrs:{id:"disque-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disque-module"}},[s._v("#")]),s._v(" Disque module")]),s._v(" "),a("p",[s._v("这个本来是作者几年前开发的一个基于 Redis 的消息队列工具，但多年来作者发现 Redis 在持续开发时，他也要持续把新的功能合并到这个Disque\n项目里面，这里有大量无用的工作。因此这次他在 Redis 的基础上通过 Modules 功能实现 Disque。")]),s._v(" "),a("p",[s._v("如果业务并不需要保持严格消息的顺序，这个 Disque 能提供足够简单和快速的消息队列功能。")]),s._v(" "),a("h3",{attrs:{id:"其他-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他-3"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),a("ul",[a("li",[s._v("新的Expire算法：用于定期删除过期key的函数activeExpireCycle被重写，以便更快地收回已经过期的key；")]),s._v(" "),a("li",[s._v("提供了许多新的Module API；")]),s._v(" "),a("li",[s._v("从服务器也支持无盘复制：在用户可以配置的特定条件下，从服务器现在可以在第一次同步时直接从套接字加载RDB到内存；")]),s._v(" "),a("li",[s._v("SRANDMEMBER命令和类似的命令优化，使其结果具有更好的分布；")]),s._v(" "),a("li",[s._v("重写了Systemd支持；")]),s._v(" "),a("li",[s._v("官方redis-benchmark工具支持cluster模式；")]),s._v(" "),a("li",[s._v("提升了RDB日志加载速度；")])]),s._v(" "),a("h3",{attrs:{id:"文章来源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文章来源"}},[s._v("#")]),s._v(" 文章来源")]),s._v(" "),a("p",[s._v("本文主要来源于（参考redis4.0、5.0、6.0版本的release notes）")]),s._v(" "),a("p",[s._v("https://blog.csdn.net/sinat_14840559/article/details/108326178")])])}),[],!1,null,null,null);a.default=e.exports}}]);