(window.webpackJsonp=window.webpackJsonp||[]).push([[417],{747:function(e,n,t){"use strict";t.r(n);var r=t(4),i=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"行为型-访问者-visitor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#行为型-访问者-visitor"}},[e._v("#")]),e._v(" 行为型 - 访问者(Visitor)")]),e._v(" "),n("blockquote",[n("p",[e._v("访问者模式(visitor pattern): 当你想要为一个对象的组合增加新的能力, 且封装并不重要时, 就使用访问者模式。")])]),e._v(" "),n("h2",{attrs:{id:"意图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#意图"}},[e._v("#")]),e._v(" 意图")]),e._v(" "),n("p",[e._v("为一个对象结构(比如组合结构)增加新能力。")]),e._v(" "),n("h2",{attrs:{id:"类图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[e._v("#")]),e._v(" 类图")]),e._v(" "),n("ul",[n("li",[e._v("Visitor: 访问者，为每一个 ConcreteElement 声明一个 visit 操作")]),e._v(" "),n("li",[e._v("ConcreteVisitor: 具体访问者，存储遍历过程中的累计结果")]),e._v(" "),n("li",[e._v("ObjectStructure: 对象结构，可以是组合结构，或者是一个集合。")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/ec923dc7-864c-47b0-a411-1f2c48d084de.png",alt:"img"}})]),e._v(" "),n("h2",{attrs:{id:"实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[e._v("#")]),e._v(" 实现")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('public interface Element {\n    void accept(Visitor visitor);\n}\n\n\n\nclass CustomerGroup {\n\n    private List<Customer> customers = new ArrayList<>();\n\n    void accept(Visitor visitor) {\n        for (Customer customer : customers) {\n            customer.accept(visitor);\n        }\n    }\n\n    void addCustomer(Customer customer) {\n        customers.add(customer);\n    }\n}\n\n\n\npublic class Customer implements Element {\n\n    private String name;\n    private List<Order> orders = new ArrayList<>();\n\n    Customer(String name) {\n        this.name = name;\n    }\n\n    String getName() {\n        return name;\n    }\n\n    void addOrder(Order order) {\n        orders.add(order);\n    }\n\n    public void accept(Visitor visitor) {\n        visitor.visit(this);\n        for (Order order : orders) {\n            order.accept(visitor);\n        }\n    }\n}\n\n\n\npublic class Order implements Element {\n\n    private String name;\n    private List<Item> items = new ArrayList();\n\n    Order(String name) {\n        this.name = name;\n    }\n\n    Order(String name, String itemName) {\n        this.name = name;\n        this.addItem(new Item(itemName));\n    }\n\n    String getName() {\n        return name;\n    }\n\n    void addItem(Item item) {\n        items.add(item);\n    }\n\n    public void accept(Visitor visitor) {\n        visitor.visit(this);\n\n        for (Item item : items) {\n            item.accept(visitor);\n        }\n    }\n}\n\n\n\npublic class Item implements Element {\n\n    private String name;\n\n    Item(String name) {\n        this.name = name;\n    }\n\n    String getName() {\n        return name;\n    }\n\n    public void accept(Visitor visitor) {\n        visitor.visit(this);\n    }\n}\n\n\n\npublic interface Visitor {\n    void visit(Customer customer);\n\n    void visit(Order order);\n\n    void visit(Item item);\n}\n\n\n\npublic class GeneralReport implements Visitor {\n\n    private int customersNo;\n    private int ordersNo;\n    private int itemsNo;\n\n    public void visit(Customer customer) {\n        System.out.println(customer.getName());\n        customersNo++;\n    }\n\n    public void visit(Order order) {\n        System.out.println(order.getName());\n        ordersNo++;\n    }\n\n    public void visit(Item item) {\n        System.out.println(item.getName());\n        itemsNo++;\n    }\n\n    public void displayResults() {\n        System.out.println("Number of customers: " + customersNo);\n        System.out.println("Number of orders:    " + ordersNo);\n        System.out.println("Number of items:     " + itemsNo);\n    }\n}\n\n\n\npublic class Client {\n    public static void main(String[] args) {\n        Customer customer1 = new Customer("customer1");\n        customer1.addOrder(new Order("order1", "item1"));\n        customer1.addOrder(new Order("order2", "item1"));\n        customer1.addOrder(new Order("order3", "item1"));\n\n        Order order = new Order("order_a");\n        order.addItem(new Item("item_a1"));\n        order.addItem(new Item("item_a2"));\n        order.addItem(new Item("item_a3"));\n        Customer customer2 = new Customer("customer2");\n        customer2.addOrder(order);\n\n        CustomerGroup customers = new CustomerGroup();\n        customers.addCustomer(customer1);\n        customers.addCustomer(customer2);\n\n        GeneralReport visitor = new GeneralReport();\n        customers.accept(visitor);\n        visitor.displayResults();\n    }\n}\n\n\n\ncustomer1\norder1\nitem1\norder2\nitem1\norder3\nitem1\ncustomer2\norder_a\nitem_a1\nitem_a2\nitem_a3\nNumber of customers: 2\nNumber of orders:    4\nNumber of items:     6\n')])])]),n("h2",{attrs:{id:"jdk"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[e._v("#")]),e._v(" JDK")]),e._v(" "),n("ul",[n("li",[e._v("javax.lang.model.element.Element and javax.lang.model.element.ElementVisitor")]),e._v(" "),n("li",[e._v("javax.lang.model.type.TypeMirror and javax.lang.model.type.TypeVisitor")])])])}),[],!1,null,null,null);n.default=i.exports}}]);