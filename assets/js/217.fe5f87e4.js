(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{548:function(a,_,t){"use strict";t.r(_);var v=t(4),e=Object(v.a)({},(function(){var a=this,_=a._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"mysql-索引-b-树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql-索引-b-树"}},[a._v("#")]),a._v(" MySQL - 索引(B+树)")]),a._v(" "),_("h3",{attrs:{id:"b-tree-原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#b-tree-原理"}},[a._v("#")]),a._v(" B+ Tree 原理")]),a._v(" "),_("h4",{attrs:{id:"_1-数据结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构"}},[a._v("#")]),a._v(" 1. 数据结构")]),a._v(" "),_("p",[a._v("B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。")]),a._v(" "),_("p",[a._v("B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。")]),a._v(" "),_("p",[a._v("在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 keyi 和 keyi+1，且不为\nnull，则该指针指向节点的所有 key 大于等于 keyi 且小于等于 keyi+1。")]),a._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/061c88c1-572f-424f-b580-9cbce903a3fe.png",alt:"img"}})]),a._v(" "),_("h4",{attrs:{id:"_2-操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-操作"}},[a._v("#")]),a._v(" 2. 操作")]),a._v(" "),_("p",[a._v("进行查找操作时，首先在根节点进行二分查找，找到一个 key\n所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。")]),a._v(" "),_("p",[a._v("插入删除操作记录会破坏平衡树的平衡性，因此在插入删除操作之后，需要对树进行一个分裂、合并、旋转等操作来维护平衡性。")]),a._v(" "),_("h4",{attrs:{id:"_3-与红黑树的比较"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-与红黑树的比较"}},[a._v("#")]),a._v(" 3. 与红黑树的比较")]),a._v(" "),_("p",[a._v("红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，主要有以下两个原因:")]),a._v(" "),_("p",[a._v("(一)更少的查找次数")]),a._v(" "),_("p",[a._v("平衡树查找操作的时间复杂度等于树高 h，而树高大致为 O(h)=O(logdN)，其中 d 为每个节点的出度。")]),a._v(" "),_("p",[a._v("红黑树的出度为 2，而 B+ Tree 的出度一般都非常大，所以红黑树的树高 h 很明显比 B+ Tree 大非常多，检索的次数也就更多。")]),a._v(" "),_("p",[a._v("(二)利用计算机预读特性")]),a._v(" "),_("p",[a._v("为了减少磁盘\nI/O，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的旋转时间，因此速度会非常快。")]),a._v(" "),_("p",[a._v("操作系统一般将内存和磁盘分割成固态大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O\n就能完全载入一个节点，并且可以利用预读特性，相邻的节点也能够被预先载入。")]),a._v(" "),_("h3",{attrs:{id:"mysql-索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql-索引"}},[a._v("#")]),a._v(" MySQL 索引")]),a._v(" "),_("p",[a._v("索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。")]),a._v(" "),_("h4",{attrs:{id:"_1-b-tree-索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-b-tree-索引"}},[a._v("#")]),a._v(" 1. B+Tree 索引")]),a._v(" "),_("p",[a._v("是大多数 MySQL 存储引擎的默认索引类型。")]),a._v(" "),_("p",[a._v("因为不再需要进行全表扫描，只需要对树进行搜索即可，因此查找速度快很多。除了用于查找，还可以用于排序和分组。")]),a._v(" "),_("p",[a._v("可以指定多个列作为索引列，多个索引列共同组成键。")]),a._v(" "),_("p",[a._v("适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。")]),a._v(" "),_("p",[a._v("InnoDB 的 B+Tree 索引分为主索引和辅助索引。")]),a._v(" "),_("p",[a._v("主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。")]),a._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/c28c6fbc-2bc1-47d9-9b2e-cf3d4034f877.jpg",alt:"img"}})]),a._v(" "),_("p",[a._v("辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。")]),a._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/7ab8ca28-2a41-4adf-9502-cc0a21e63b51.jpg",alt:"img"}})]),a._v(" "),_("h4",{attrs:{id:"_2-哈希索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-哈希索引"}},[a._v("#")]),a._v(" 2. 哈希索引")]),a._v(" "),_("p",[a._v("哈希索引能以 O(1) 时间进行查找，但是失去了有序性，它具有以下限制:")]),a._v(" "),_("ul",[_("li",[a._v("无法用于排序与分组；")]),a._v(" "),_("li",[a._v("只支持精确查找，无法用于部分查找和范围查找。")])]),a._v(" "),_("p",[a._v("InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让\nB+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。")]),a._v(" "),_("h4",{attrs:{id:"_3-全文索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-全文索引"}},[a._v("#")]),a._v(" 3. 全文索引")]),a._v(" "),_("p",[a._v("MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。查找条件使用 MATCH AGAINST，而不是普通的 WHERE。")]),a._v(" "),_("p",[a._v("全文索引一般使用倒排索引实现，它记录着关键词到其所在文档的映射。")]),a._v(" "),_("p",[a._v("InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。")]),a._v(" "),_("h4",{attrs:{id:"_4-空间数据索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-空间数据索引"}},[a._v("#")]),a._v(" 4. 空间数据索引")]),a._v(" "),_("p",[a._v("MyISAM 存储引擎支持空间数据索引(R-Tree)，可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。")]),a._v(" "),_("p",[a._v("必须使用 GIS 相关的函数来维护数据。")]),a._v(" "),_("h3",{attrs:{id:"索引优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引优化"}},[a._v("#")]),a._v(" 索引优化")]),a._v(" "),_("h4",{attrs:{id:"_1-独立的列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-独立的列"}},[a._v("#")]),a._v(" 1. 独立的列")]),a._v(" "),_("p",[a._v("在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。")]),a._v(" "),_("p",[a._v("例如下面的查询不能使用 actor_id 列的索引:")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[a._v("SELECT actor_id FROM sakila.actor WHERE actor_id + 1 = 5;\n")])])]),_("h4",{attrs:{id:"_2-多列索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-多列索引"}},[a._v("#")]),a._v(" 2. 多列索引")]),a._v(" "),_("p",[a._v("在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[a._v("SELECT film_id, actor_ id FROM sakila.film_actor\nWHERE actor_id = 1 AND film_id = 1;\n")])])]),_("h4",{attrs:{id:"_3-索引列的顺序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-索引列的顺序"}},[a._v("#")]),a._v(" 3. 索引列的顺序")]),a._v(" "),_("p",[a._v("让选择性最强的索引列放在前面，索引的选择性是指: 不重复的索引值和记录总数的比值。最大值为\n1，此时每个记录都有唯一的索引与其对应。选择性越高，查询效率也越高。")]),a._v(" "),_("p",[a._v("例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[a._v("SELECT COUNT(DISTINCT staff_id)/COUNT(*) AS staff_id_selectivity,\nCOUNT(DISTINCT customer_id)/COUNT(*) AS customer_id_selectivity,\nCOUNT(*)\nFROM payment;\n\n\n\n   staff_id_selectivity: 0.0001\ncustomer_id_selectivity: 0.0373\n               COUNT(*): 16049\n")])])]),_("h4",{attrs:{id:"_4-前缀索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-前缀索引"}},[a._v("#")]),a._v(" 4. 前缀索引")]),a._v(" "),_("p",[a._v("对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。")]),a._v(" "),_("p",[a._v("对于前缀长度的选取需要根据索引选择性来确定。")]),a._v(" "),_("h4",{attrs:{id:"_5-覆盖索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-覆盖索引"}},[a._v("#")]),a._v(" 5. 覆盖索引")]),a._v(" "),_("p",[a._v("索引包含所有需要查询的字段的值。")]),a._v(" "),_("p",[a._v("具有以下优点:")]),a._v(" "),_("ul",[_("li",[a._v("索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。")]),a._v(" "),_("li",[a._v("一些存储引擎(例如 MyISAM)在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用(通常比较费时)。")]),a._v(" "),_("li",[a._v("对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。")])]),a._v(" "),_("h3",{attrs:{id:"索引的优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引的优点"}},[a._v("#")]),a._v(" 索引的优点")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("大大减少了服务器需要扫描的数据行数。")])]),a._v(" "),_("li",[_("p",[a._v("帮助服务器避免进行排序和分组，也就不需要创建临时表(B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，因为不需要排序和分组，也就不需要创建临时表)。")])]),a._v(" "),_("li",[_("p",[a._v("将随机 I/O 变为顺序 I/O(B+Tree 索引是有序的，也就将相邻的数据都存储在一起)。")])])]),a._v(" "),_("h3",{attrs:{id:"索引的使用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引的使用场景"}},[a._v("#")]),a._v(" 索引的使用场景")]),a._v(" "),_("ul",[_("li",[a._v("对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效。")]),a._v(" "),_("li",[a._v("对于中到大型的表，索引就非常有效。")]),a._v(" "),_("li",[a._v("但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。")])]),a._v(" "),_("h3",{attrs:{id:"参考文章"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),_("ul",[_("li",[a._v("https://www.cnblogs.com/xiaoxi/p/6894610.html")])])])}),[],!1,null,null,null);_.default=e.exports}}]);