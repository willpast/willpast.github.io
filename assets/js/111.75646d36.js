(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{442:function(a,v,t){"use strict";t.r(v);var e=t(4),_=Object(e.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"♥java8特性知识体系详解♥"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#♥java8特性知识体系详解♥"}},[a._v("#")]),a._v(" ♥Java8特性知识体系详解♥")]),a._v(" "),v("blockquote",[v("p",[a._v("Java 8 新特性详解汇总。")]),a._v(" "),v("ul",[v("li",[a._v("Java 新特性的增加都是来源于 JSR或者JEP")]),a._v(" "),v("li",[a._v("JSR论坛: https://jcp.org/en/jsr/detail?id=335")])])]),a._v(" "),v("h2",{attrs:{id:"知识体系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#知识体系"}},[a._v("#")]),a._v(" 知识体系")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/willpast/image/blog/ka_java/java8-overview.png",alt:"img"}})]),a._v(" "),v("h2",{attrs:{id:"相关文章"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关文章"}},[a._v("#")]),a._v(" 相关文章")]),a._v(" "),v("h3",{attrs:{id:"函数编程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数编程"}},[a._v("#")]),a._v(" 函数编程")]),a._v(" "),v("blockquote",[v("p",[a._v("面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。")])]),a._v(" "),v("ul",[v("li",[a._v("Lambda 表达式的特点")]),a._v(" "),v("li",[a._v("Lambda 表达式使用和Stream下的接口")]),a._v(" "),v("li",[a._v("函数接口定义和使用，四大内置函数接口Consumer，Function，Supplier, Predicate.")]),a._v(" "),v("li",[a._v("Comparator排序为例贯穿所有知识点。")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-lambda"}},[a._v("Java 8 - 函数编程")])]),a._v(" "),v("h3",{attrs:{id:"optional类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#optional类"}},[a._v("#")]),a._v(" Optional类")]),a._v(" "),v("blockquote",[v("p",[a._v("这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。")])]),a._v(" "),v("ul",[v("li",[a._v("Optional类的意义")]),a._v(" "),v("li",[a._v("Optional类有哪些常用的方法")]),a._v(" "),v("li",[a._v("Optional举例贯穿所有知识点")]),a._v(" "),v("li",[a._v("多重类嵌套Null值判断")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-optional"}},[a._v("Java 8 - Optional类")])]),a._v(" "),v("h3",{attrs:{id:"default方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#default方法"}},[a._v("#")]),a._v(" default方法")]),a._v(" "),v("blockquote",[v("p",[a._v("默认方法给予我们修改接口而不破坏原来的实现类的结构提供了便利，目前java 8的集合框架已经大量使用了默认方法来改进了，当我们最终开始使用Java\n8的lambdas表达式时，提供给我们一个平滑的过渡体验。")])]),a._v(" "),v("ul",[v("li",[a._v("为什么会出现默认方法?")]),a._v(" "),v("li",[a._v("接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别?")]),a._v(" "),v("li",[a._v("多重实现的默认方法冲突怎么办?")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-default"}},[a._v("Java 8 - default方法")])]),a._v(" "),v("h3",{attrs:{id:"类型注解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型注解"}},[a._v("#")]),a._v(" 类型注解")]),a._v(" "),v("blockquote",[v("p",[a._v("那充满争议的类型注解究竟是什么? 复杂还是便捷?")])]),a._v(" "),v("ul",[v("li",[a._v("注解在JDK哪个版本中出现的，可以在哪些地方用注解?")]),a._v(" "),v("li",[a._v("什么是类型注解?")]),a._v(" "),v("li",[a._v("类型注解的作用是什么?")]),a._v(" "),v("li",[a._v("为什么会出现类型注解(JSR308)?")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-type-anno"}},[a._v("Java 8 - 类型注解")])]),a._v(" "),v("h3",{attrs:{id:"重复注解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重复注解"}},[a._v("#")]),a._v(" 重复注解")]),a._v(" "),v("ul",[v("li",[a._v("Java8之前对重复注解是怎么做的?")]),a._v(" "),v("li",[a._v("Java8对重复注解添加了什么支持?")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-anno-repeat"}},[a._v("Java 8 - 重复注解")])]),a._v(" "),v("h3",{attrs:{id:"类型推断"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[a._v("#")]),a._v(" 类型推断")]),a._v(" "),v("blockquote",[v("p",[a._v("导致类型间互相转换的问题困扰着每个java程序员，通过编译器自动推断类型的东西可以稍微缓解一下类型转换太复杂的问题。")])]),a._v(" "),v("ul",[v("li",[a._v("什么是泛型?")]),a._v(" "),v("li",[a._v("Java7对泛型推断做了哪些优化?")]),a._v(" "),v("li",[a._v("Java8对此有做了哪些优化?")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-type"}},[a._v("Java 8 - 类型推断优化")])]),a._v(" "),v("h3",{attrs:{id:"jre-精简"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jre-精简"}},[a._v("#")]),a._v(" JRE 精简")]),a._v(" "),v("blockquote",[v("p",[a._v("模块化特性是javaer所期待的特性,\n一个占用资源少的JRE运行环境，紧凑的JRE特性的出现，能带来以后的物联网的发展，甚至还是会有大量的java应用程序出现在物联网上面。")])]),a._v(" "),v("ul",[v("li",[a._v("为什么精简Java8 JRE，及好处是啥?")]),a._v(" "),v("li",[a._v("紧凑的JRE分3种，分别是compact1、compact2、compact3，他们的关系是?")]),a._v(" "),v("li",[a._v("在不同平台上如何编译等?")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-jre"}},[a._v("Java 8 - JRE精简")])]),a._v(" "),v("h3",{attrs:{id:"localdate-localdatetime"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#localdate-localdatetime"}},[a._v("#")]),a._v(" LocalDate/LocalDateTime")]),a._v(" "),v("blockquote",[v("p",[a._v("Date/Calendar槽点, java8对其进行了重写。")])]),a._v(" "),v("ul",[v("li",[a._v("Java8之前的Date有哪些槽点? (Calendar的所有属性都是可变的，SimpleDateFormat的线程不安全性等)")]),a._v(" "),v("li",[a._v("Java8之前使用哪些常用的第三方时间库?")]),a._v(" "),v("li",[a._v("Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么?")]),a._v(" "),v("li",[a._v("其它语言时间库?")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-localdatetime"}},[a._v("Java 8 -\nLocalDate/LocalDateTime")])]),a._v(" "),v("h3",{attrs:{id:"javafx"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#javafx"}},[a._v("#")]),a._v(" JavaFX")]),a._v(" "),v("blockquote",[v("p",[a._v("JavaFX主要致力于富客户端开发，以弥补swing的缺陷，主要提供图形库与media库，支持audio,video,graphics,animation,3D等，同时采用现代化的css方式支持界面设计。同时又采用XUI方式以XML方式设计UI界面，达到显示与逻辑的分离。")])]),a._v(" "),v("ul",[v("li",[a._v("javaFX发展历程?")]),a._v(" "),v("li",[a._v("Java8对其增加了哪些特性?")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-javafx"}},[a._v("Java 8 - JavaFX")])]),a._v(" "),v("h3",{attrs:{id:"permgen移除"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#permgen移除"}},[a._v("#")]),a._v(" PermGen移除")]),a._v(" "),v("blockquote",[v("p",[a._v("PermGen space的全称是Permanent Generation space,是指内存的永久保存区域。PermGen\nspace是Oracle-Sun Hotspot才有，JRockit以及J9是没有这个区域。")])]),a._v(" "),v("ul",[v("li",[a._v("Java8之前 “java.lang.OutOfMemoryError: PermGen space”是怎么引起的，怎么解决的?")]),a._v(" "),v("li",[a._v("新增加的元空间(Metaspace)包含哪些东西，画出图")]),a._v(" "),v("li",[a._v("元空间(Metaspace)和PermGen对比")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-permgen"}},[a._v("Java 8 - 移除Permgen")])]),a._v(" "),v("h3",{attrs:{id:"stampedlock"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#stampedlock"}},[a._v("#")]),a._v(" StampedLock")]),a._v(" "),v("ul",[v("li",[a._v("为什么会引入StampedLock")]),a._v(" "),v("li",[a._v("用Lock写悲观锁和乐观锁举例")]),a._v(" "),v("li",[a._v("用StampedLock写悲观锁和乐观锁举例")]),a._v(" "),v("li",[a._v("性能对比")])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-stampedlock"}},[a._v("Java 8 - StampedLock")])]),a._v(" "),v("h3",{attrs:{id:"其它更新"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#其它更新"}},[a._v("#")]),a._v(" 其它更新")]),a._v(" "),v("ul",[v("li",[a._v("Java8 还有哪些其它更新\n"),v("ul",[v("li",[a._v("字符串")]),a._v(" "),v("li",[a._v("Base64")]),a._v(" "),v("li",[a._v("Random")]),a._v(" "),v("li",[a._v("Nashorn")]),a._v(" "),v("li",[a._v("...")])])])]),a._v(" "),v("p",[a._v("详细分析请参看: "),v("a",{attrs:{href:"/pages/java8-others"}},[a._v("Java 8 - 其它更新")])]),a._v(" "),v("h2",{attrs:{id:"参考文档"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[a._v("#")]),a._v(" 参考文档")]),a._v(" "),v("ul",[v("li",[v("p",[v("a",{attrs:{href:"https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java8教程汇总"),v("OutboundLink")],1)])]),a._v(" "),v("li",[v("p",[v("a",{attrs:{href:"https://wizardforcel.gitbooks.io/modern-java",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java8简明教程gitbook"),v("OutboundLink")],1)])]),a._v(" "),v("li",[v("p",[v("a",{attrs:{href:"https://github.com/wizardforcel/modern-java-zh",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java8简明教程"),v("OutboundLink")],1)])]),a._v(" "),v("li",[v("p",[v("a",{attrs:{href:"https://wizardforcel.gitbooks.io/java8-new-features/content/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java8新特性探究"),v("OutboundLink")],1)])])])])}),[],!1,null,null,null);v.default=_.exports}}]);